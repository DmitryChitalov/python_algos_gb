"""
3.	Сформировать из введенного числа обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486,
 то надо вывести число 6843.

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число, которое требуется перевернуть: 123
Перевернутое число: 321
"""

from random import randint
import sys

def arr2int(digits):
    ret = 0
    for i,d in enumerate(digits):
        ret += d*10**i
    return ret

# Кажется естественным сделать тип функции int -> int,
# но тогда не будет возможности сохранить начальные нули
# обращенного числа, поэтому тип int -> None.
# Вообще, если мы требуем 120 -> 021, то было бы логично
# потребовать и 021 -> 120, но тогда первый аргумент
# должен быть типа str. Это совершенно меняет алгоритм,
# т.к. обращение списка символов -- другая задача.
# Поэтому, на мой взгляд, требование сохранения нулей
# в начале числа (1:30:33 в записи семинара) лишнее,
# но я его выполняю.
def reverse(n, digits=[]):
    if n == 0:
        return print(f"{{:0{len(digits)}}}".format(arr2int(digits)))
    return reverse(n//10, [n%10]+digits)

# При запуске с аргументом работает в режиме симуляции,
# без аргументов -- в интерактивном режиме

if len(sys.argv)>1:
    n = randint(1,1000000000)
else:
    n = int(input("Введите целое число: "))

print("Запишем наоборот цифры числа ", n)
reverse(n)
