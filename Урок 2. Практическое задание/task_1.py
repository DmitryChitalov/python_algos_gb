"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, /
- условие завершения рекурсии - введена операция 0

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""

def calc():
    operate = input("Веедите действие (+,-,*,/ или 0 чтобы выйти): ")
    if operate == '0':
        print('Программа завершена')
        return ('Выход')
    else:
        try:
            first_one = float(input("введите  первое  число: "))
            second_one = float(input("введите  второе  число: "))

            if operate == '+':
                print(first_one+ second_one)
            elif operate == '-':
                print(first_one - second_one)
            elif operate == '*':
                print(first_one * second_one)
            elif operate == '/':
                print(first_one / second_one)
            else:
                print('такое действие пока не поддерживается')
        except ZeroDivisionError:
            print("деление на ноль!")
        except ValueError:
            print('вводите цифры!')
        calc()
if __name__ == "__main__":
    calc()