"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, /
- условие завершения рекурсии - введена операция 0

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""


def calculate_func():
    while True:
        symbol = input('Enter operator +, -, *, / or enter 0 to exit: ')
        if symbol in ('+', '-', '*', '/', '0'):
            break
        print('You should enter +, -, *, / or 0 to exit')
    if symbol == '0':
        print('Exit')
        return
    try:
        num_1 = float(input('Enter first number: '))
        num_2 = float(input('Enter second number: '))
        if symbol == '/' and num_2 == 0:
            raise ZeroDivisionError
    except ValueError:
        print('You should enter int or float')
    except ZeroDivisionError:
        print('Division by zero')
    else:
        operators = {
            '+': num_1 + num_2,
            '-': num_1 - num_2,
            '*': num_1 * num_2,
            '/': num_1 / num_2,
        }
        print(operators[symbol])
    calculate_func()


if __name__ == '__main__':
    calculate_func()
