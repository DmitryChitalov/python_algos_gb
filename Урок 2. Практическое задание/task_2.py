"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def parsing(digit):
    if digit == 0:
        return len(even), len(uneven)
    else:
        if digit % 10 % 2 == 0:
            even.append(digit % 10)
        else:
            uneven.append(digit % 10)
    return parsing(digit // 10)


try:
    number = int(input('Введите число: '))
    even, uneven = [], []
    if number not in range(1000001):  # ограничил условным миллионом, чтобы производить проверку ввода пользователем
        raise ValueError

    print(f'Количество четных и нечетных цифр в числе равно: {parsing(number)}')
except ValueError:
    print('Должно быть введено число, которое должно лежать в диапазоне от 1 до 1000000')
