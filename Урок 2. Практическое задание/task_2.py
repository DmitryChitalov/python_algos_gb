"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

# решение имеет недостаток: при вводе 0 - выводит (0, 0)
def even_odd(number):
    e = 0
    o = 0
    if number < 0:
        number = -number
    elif number == 0:
        return e, o

    if number % 2:
        o += 1
    else:
        e += 1

    return even_odd(number//10)[0] + e, even_odd(number//10)[1] + o


if __name__ == '__main__':

    a = 12345
    print(even_odd(a))


