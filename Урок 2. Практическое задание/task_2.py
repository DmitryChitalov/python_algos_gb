"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def get_even_odd_amount(num, even_nums=0, odd_nums=0):
    num_size = len(str(num))  # Перевод в строку тк число может быть произвольного размера и проще так
    one_dig = (num // 10**(num_size - 1))
    if one_dig % 2:
        odd_nums += 1
    else:
        even_nums += 1
    if num_size == 1:
        print(f'Количество четных и нечетных цифр в числе равно: ({even_nums}, {odd_nums})')
    else:
        get_even_odd_amount(num - one_dig * 10**(num_size - 1), even_nums, odd_nums)


try:
    get_even_odd_amount(int(input('Введите число: ')))
except ValueError:
    print('Введенно некорретное число! Надо было ввести натуральное число!')
