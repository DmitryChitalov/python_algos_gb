"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

even = 0
odd = 0
even_list = []
odd_list = []

def counting(number):
    global even, odd
    if len(number) == 0:
        return 0
    elif int(number[0]) % 2 == 0:
        even += 1
        even_list.append(int(number[0]))
        return counting(number[1:])
    else:
        odd += 1
        odd_list.append(int(number[0]))
        return counting(number[1:])


user_number = input("Введите число не меньше трехзначного: ")
counting(user_number)

print(f'Четных чисел: {even}, {even_list}')
print(f'Нечетных чисел: {odd}, {odd_list}')
