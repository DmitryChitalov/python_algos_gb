"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def count_even_odd(number_list, count_even=0, count_odd=0):
    if len(number_list) == 0:
        print(f'Количество четных и нечетных цифр в числе равно: ({count_even}, {count_odd})')
        return

    last = number_list.pop()
    if last % 2 == 0:
        count_even += 1
    else:
        count_odd += 1

    return count_even_odd(number_list, count_even, count_odd)


if __name__ == "__main__":
    number_list_data = [int(i) for i in input("Введите число: ")]
    count_even_odd(number_list_data)
