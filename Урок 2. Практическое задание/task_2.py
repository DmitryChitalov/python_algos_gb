"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def check_even(number: int) -> tuple:
    even_count = 0
    uneven_count = 0
    rest_number, numeral = divmod(number, 10)
    if numeral % 2 == 0:
        even_count += 1
    else:
        uneven_count += 1
    if rest_number != 0:
        even_rec, uneven_rec = check_even(rest_number)
        even_count += even_rec
        uneven_count += uneven_rec
    return even_count, uneven_count


print(check_even(123456789012345))
