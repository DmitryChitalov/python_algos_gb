"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def odd_even_calculate(_num):
    _odd = 0
    _even = 0
    if len(str(_num)) == 1:
        if _num % 2 == 1:
            _odd += 1
        else:
            _even += 1
    else:
        if _num % 2 == 1:
            _odd, _even = odd_even_calculate(_num // 10)
            _odd += 1
        else:
            _odd, _even = odd_even_calculate(_num // 10)
            _even += 1
    return _odd, _even


number = 34560

odd, even = odd_even_calculate(number)
print(f'Количество чётных чисел в {number}: {even}, а нечётных: {odd}')
