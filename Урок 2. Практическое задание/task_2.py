"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

count_even = 0
count_not_even = 0


def count_parity(number):
    global count_even, count_not_even
    if number / 10 < 1:
        if number % 2 == 0:
            count_even += 1
        else:
            count_not_even += 1
        return 0
    elif number % 2 == 0:
        count_even += 1
        return count_parity(number // 10)
    else:
        count_not_even += 1
        return count_parity(number // 10)


count_parity(int(input(f'введите число: ')))
print(f' количество четных чисел {count_even}, нечетных {count_not_even}')
