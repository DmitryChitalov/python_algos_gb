"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


class CheckNum:

    def __init__(self):
        self.num_lst = list(input('Введите число: '))
        self.even_counter = 0
        self.not_even_counter = 0

    def check(self):
        if len(self.num_lst):
            last_num = int(self.num_lst.pop())
            if last_num % 2 == 0:
                self.even_counter += 1
                self.check()
            elif last_num % 2 != 0:
                self.not_even_counter += 1
                self.check()
        else:
            print(f'Четных чисел - {self.even_counter}, \
             \nнечетных - {self.not_even_counter}')


check_num = CheckNum()
check_num.check()
