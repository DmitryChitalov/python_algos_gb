"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""
# понимаю, что можно сделать проще, но пока так, зато сложность не выше O(n)
counter = []


def even_odd_check(num):
    num = int(num)
    if num % 2 == 0 or num == 0:
        counter.append(True)
    else:
        counter.append(False)


def task_2(nums):
    nums = str(nums)
    if len(nums) == 1:
        even_odd_check(nums)
        return 'Числа кончились!'
    else:
        even_odd_check(nums[0])
        num = nums.replace(nums[0], '')
        return task_2(num)  # вызов рекурсии


def tell_odd_even(cntr):
    a = sum(cntr)
    return 'Количество четных равно: ' + str(a) + \
           '\nКол-во нечетных равно: ' + str(len(cntr) - a)


print(task_2(123))
print(tell_odd_even(counter))
