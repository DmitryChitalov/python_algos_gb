"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


# Решение рекурсией, незавершенное

def rec(n):

    if n // 10 == 0:  # необходимо подобрать правильный базовый случай и обработать учет 1 четного значения
        return n
    else:
        global even,odd
        odd = 0
        even = 0
        (n, rec(n // 10))
        # print('n//10',b)
        b = (n % 2, rec(n % 10))
        # print('n%10', b)
        if b[0] == 1:
            odd += 1
        else:
            even += 1
    return f' четн {even}, нечет {odd}'


print(rec(22211111))

# решение циклом
# n = 34560
#
# even = 0
# odd = 0
# while n != 0:
#
#     a = n%10
#     b = n//10
#     n = b
#     if a%2 == 0:
#         even +=1
#     else:
#         odd +=1
#
# print(even,odd)
