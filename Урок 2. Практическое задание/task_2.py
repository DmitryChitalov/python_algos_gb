"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def recurs_counter(num):
    if not num:
        return [0, 0]
    else:
        new_num = num // 10
        com = num % 10
        if com % 2:
            md, nmd = 0, 1
        else:
            md, nmd = 1, 0
        return [x + y for x, y in zip([md, nmd], recurs_counter(new_num))]


if __name__ == '__main__':
    lst = recurs_counter(123)
    print(f'Количество четных: {lst[0]}')
    print(f'Количество нечетных: {lst[1]}')


