"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def even_uneven(numbers):
    value = '01'
    if numbers == 0:
        return ''
    elif (numbers % 10) % 2 == 0:
        return even_uneven(numbers // 10) + value[0]
    elif (numbers % 10) % 2 != 0:
        return even_uneven(numbers // 10) + value[1]


try:
    number = int(input('Введите число: '))
    result = even_uneven(number)
    print(f'Количество четных и нечетных цифр в числе равно: ({result.count("0")}, {result.count("1")})')
except ValueError:
    print('Вы ввели не число. Исправтесь')
