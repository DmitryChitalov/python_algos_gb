"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def even_and_odd_digits(num: int, even=0, odd=0) -> list:
    even = 0
    odd = 0
    n = num
    while n > 0:
        if (n - (n // 10) * 10) % 2 != 0:
            odd += 1
        else:
            even += 1
        n = n // 10
        even_and_odd_digits(n, even, odd)
    # print(f'even: {even}, odd: {odd}')
    return [even, odd]


num = int(input('Введите число: '))
print(even_and_odd_digits(num))
