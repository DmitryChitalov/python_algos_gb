"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def account_parity1(number, even=0, no_even=0):
    """Функция возвращает кортеж из двух элементов (4, 3)
    первый количество четных цифр, второй количество нечетных"""
    # even - четные, no_even - не четные
    number = str(number)
    test_number = number
    if len(test_number) == 0:
        return even, no_even
    if int(test_number[-1]) % 2 == 0:
        even = even + 1
    else:
        no_even += 1
    return account_parity1(number[:-1], even, no_even)


print(account_parity1(2221110))  # Вывод (4, 3)
