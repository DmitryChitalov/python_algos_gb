"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик. Пока все числа не извлечены - рекурсивные вызовы продолжаем.
Условие завершения рекурсии - все числа извлечены.

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Решите через рекурсию. Решение через цикл не принимается.

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def calc_even_odd_num(num, even=0, odd=0):
    # num - число для подсчета цифр; even - счетчик четных; odd - счетчик нечетных цифр в числе
    if num == 0:  # все цифры числа извлечены
        return even, odd
    else:
        last_n = num % 10  # получаем последнюю цифру числа
        num = num // 10  # получаем число без последней цифры
        if last_n % 2 == 0:  # проверяем полученную цифру на четность
            even += 1  # плюсуем счетчик четных цифр в случае выполнения условия
        else:
            odd += 1  # плюсуем счетчик нечетных цифр в случае невыполнения условия
        return calc_even_odd_num(num, even, odd)  # вызов функции calc_even_odd_num из тела самой функции


try:  # валидация через try, т.к. через if-else - это антипатернелли
    number = int(input("Введите ЦЕЛОЕ положительное число: "))
    print(f"Количество (четных, нечетных) цифр в числе равно: {calc_even_odd_num(number)}")
except ValueError:
    print("Видимо было введено не число")
