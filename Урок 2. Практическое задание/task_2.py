"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def func_1(number):
    if number // 10 == 0:
        return 1 if number % 2 == 0 else 0
    else:
        even_number = 1 if number % 2 == 0 else 0
        n = number // 10
        return even_number + func_1(n)


def func_2(number):
    if number // 10 == 0:
        return 1 if number % 2 != 0 else 0
    else:
        odd_number = 1 if number % 2 != 0 else 0
        n = number // 10
        return odd_number + func_2(n)


if __name__ == '__main__':
    user_input = input('Введите число: ')
    if user_input.isdigit():
        even_count = func_1(int(user_input))
        odd_count = func_2(int(user_input))
        print(f'Количество четных: {even_count}')
        print(f'Количество нечетных: {odd_count}')
    else:
        print('Неверный ввод')
