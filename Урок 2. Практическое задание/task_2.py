"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""
<<<<<<< Updated upstream
=======
def even_odd_number(count =  {'odd': 0, 'even': 0}, numb = input('Enter number: ')):
    if len(numb) == 1:
        if int(numb[0]) % 2 == 0:
            count['even'] += 1
        else:
            count['odd'] += 1
        return count
    else:   
        if int(numb[0]) % 2 == 0:
            count['even'] += 1
        else:
            count['odd'] += 1
        return f'{even_odd_number(count, numb[1:])}'

print(even_odd_number())

>>>>>>> Stashed changes
