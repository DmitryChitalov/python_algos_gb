"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


#########################################################################

def parity(some_list):
    x = 0  # Четные цифры
    y = 0  # Нечетные цифры

    if len(some_list) == 0:
        return x, y
    if float(some_list[-1]) % 2 == 0:
        some_list.pop()
        x, y = parity(some_list)
        x += 1
    else:
        some_list.pop()
        x, y = parity(some_list)
        y += 1
    return x, y


def checking(some_numbers):
    some_list = list(str(some_numbers))
    even, odd = parity(some_list)
    print(f'Четных: {even}, Нечетных: {odd}')


checking(101007653)
