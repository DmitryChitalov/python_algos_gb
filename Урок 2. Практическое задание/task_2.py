"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

def calc_even_ord(i_num, i_counter):
    if i_num <= 0 and i_counter[0] == 0 and i_counter[1] == 0:
        i_counter[0] += 1
        return

    if i_num <= 0:
        return

    if i_num % 2 == 0:
        i_counter[0] += 1
    else:
        i_counter[1] += 1

    return calc_even_ord(i_num // 10, i_counter)


g_counter = [0, 0]

calc_even_ord(123, g_counter)

print(f'Количество четных и нечетных цифр в числе равно: ({g_counter[0]}, {g_counter[1]}).')
