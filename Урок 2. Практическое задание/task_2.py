"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def even_odd(number=int(input('Введите число:\n')), n_even = [], n_odd = []):
    a = int(str(number)[0]) % 2
    e = n_even
    o = n_odd
    if number * 1 == 0:
        return e, o
    else:
        if a == 0:
            n_even.append(str(number)[0])
        else:
            n_odd.append(str(number)[0])
        even_odd(number - (10 ** (len(str(number)) - 1) * int(str(number)[0])))


print(even_odd())
# even_odd(number - (10**(len(str(number)) - 1) * int(str(number)[0])))
# a = int(str(number)[0]) % 2
