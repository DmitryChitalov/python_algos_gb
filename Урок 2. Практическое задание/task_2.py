"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

def chet_nechet(num, even = 0, odd = 0):
    if len(str(num)) == 0:
        return f'Количество четных цифр в числе = {even}, нечетных = {odd}'
    else:
        # Тут я подумала, что именно доставать очередную цифру не обязательно. Ведь сколько бы число ни было длинным,
        # если оно оканчивается на четную цифру, оно четное и наоборот. Поэтому можно проверить четность всего
        # длинного числа, и это же будет четность последней цифры.
        if int(num) % 2 == 0:
            even += 1
            return chet_nechet(str(num)[0:-1], even, odd)
        else:
            odd += 1
            return chet_nechet(str(num)[0:-1], even, odd)


print(chet_nechet(39994))
print(chet_nechet(90531))
print(chet_nechet(21))
