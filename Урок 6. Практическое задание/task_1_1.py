"""
Задание 1.

Выполните профилирование памяти в скриптах
Проанализировать результат и определить программы с
наиболее эффективным использованием памяти.

Примечание: Для анализа возьмите любые 3-5 ваших РАЗНЫХ скриптов!
(хотя бы 3 разных для получения оценки отл).
На каждый скрипт вы должны сделать как минимум по две реализации.

Можно взять задачи с курса Основ
или с текущего курса Алгоритмов

Результаты профилирования добавьте в виде комментариев к коду.
Обязательно сделайте аналитику (что с памятью в ваших скриптах, в чем ваша оптимизация и т.д.)

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО

Попытайтесь дополнительно свой декоратор используя ф-цию memory_usage из memory_profiler
С одновременным замером времени (timeit.default_timer())!
"""

from random import randint
from memory_profiler import profile

# array = [1, 3, 1, 3, 4, 5, 1]
array = [randint(0, 9) for i in range(10000)]


@profile
def func_1():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


@profile
def func_2():
    el = max(set(array), key=array.count)
    max_3 = array.count(el)
    return f'Чаще всего встречается число {el}, ' \
           f'оно появилось в массиве {max_3} раз(а)'


if __name__ == "__main__":
    print(func_1())
    print(func_2())

print(
    """
Профилирование задания 4 из урока 4
Функция находит какое число в списке встречается чаще всего.
Первая реализация использует доп. список, что требует дополнительной памяти.
Вторая реализация не использует доп. памяти, т.к. нет временных списков
    """
)