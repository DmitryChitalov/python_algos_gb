"""
Задание 3 *.
Сделать профилировку для скриптов с рекурсией и сделать,
можно так профилировать и есть ли 'подводные камни'
"""
from memory_profiler import memory_usage
"""
Задекорировал рекурсивную функцию так, чтобы при каждом ее вызове показывалось текущее состояние памяти. Для того, чтобы
было явно видно изменение в памяти при каждом вызове, добавил вычисление [el for el in range(10 ** 6)] при каждом
вызове. Таким образом можно отследить расход памяти на каждый вызов без отдельной таблицы по каждому вызову. Решение не
очень красивое, но рабочее. Придумал его сам, в гугле найти не смог ничего явно подходящего для этой задачи.

"""

user_number = int(input('Введите целое положительное число: '))


def mem_usage_decorator(some_func):
    """Вычисляет память, выделяемую под выполнение декорируемой функции"""
    count = user_number

    def wrapper(*args, **kwargs):
        nonlocal count
        result = some_func(*args, **kwargs)
        print(f'Задействованная память после рекурсивного вызова {count}-й раз: {str(memory_usage())} MB')
        count -= 1
        return result

    return wrapper


@mem_usage_decorator
def fact(number):
    if number == 1:
        return 1
    else:
        _ = [el for el in range(10 ** 6)]  # добавляем затратные для памяти вычисления для тестирования
        return number * fact(number - 1)


print(f'Задействованная память до запуска функции: {str(memory_usage())} MB')
print(f'Факториал числа: {fact(user_number)}')
