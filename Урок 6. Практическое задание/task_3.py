"""
Задание 3 *.
Сделать профилировку для скриптов с рекурсией и сделать описание,
можно ли так профилировать и есть ли 'подводные камни' в профилировании?
Придумать как это решить!
Есть очень простое решение!

Задача. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
Количество элементов (n) вводится с клавиатуры.
Пример:
Введите количество элементов: 3
Количество элементов: 3, их сумма: 0.75
Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
Подсказка:
Каждый очередной элемент в 2 раза меньше предыдущего и имеет противоположный знак
"""
from memory_profiler import profile


@profile
def sum_n(n, start=1.0):
    if n > 1:
        return start + sum_n(n - 1, 0 - start / 2)
    return start


def call_recursion():
    m = 250
    s = sum_n(m, 1)
    print(f'Количество элементов: {m}, их сумма: {s}')


if __name__ == '__main__':
    call_recursion()


"""
Вызываем рекурсивную функцию в функции, к которой применяем декоратор.
При применении декоратора каждый вызов отображается в таблице, замеры производятся дольше, 
В моем примере при m > 250 и применении декоратора к рекурсивной функции вызывается исключние RecursionError: 
maximum recursion depth exceeded while calling a Python object(Возможно, profiler содержит рекурсивную функцию?), 
хотя при декорированиивнешней функции при m = 900 программа отрабоатывает нормально. 

Количество элементов: 900, их сумма: 0.6666666666666666
Filename: /home/alex/geekbrains/python_algos_gb/Урок 6. Практическое задание/task_3.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    27     17.2 MiB     17.2 MiB           1   @profile
    28                                         def call_recursion():
    29     17.2 MiB      0.0 MiB           1       m = 900
    30     18.4 MiB      1.2 MiB           1       s = sum_n(m)
    31     18.4 MiB      0.0 MiB           1       print(f'Количество элементов: {m}, их сумма: {s}')

"""