"""
Задание 1.
Выполните профилирование памяти в скриптах
Проанализировать результат и определить программы с
наиболее эффективным использованием памяти.

Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько
вариантов кода для одной и той же задачи. Можно взять задачи с курса Основ или с текущего курса Алгоритмов

Результаты анализа вставьте в виде комментариев к коду.
Также укажите в комментариях версию Python и разрядность вашей ОС.

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО
"""
# Python 3.8.0 win 64x
import sys

from pympler import asizeof

# Lesson_2 Task_2
new_num = 345123456713456789098765434567898765349873456789984567899876545660345123456713456789098765434567898765349873456789984567899876545660345123456713456789098765434567898765349873456789984567899876545660345123456713456789098765434567898765349873456789984567899876545660345123456713456789098765434567898765349873456789984567899876545660345123456713456789098765434567898765349873456789984567899876545660345123456713456789098765434567898765349873456789984567899876545660345123456713456789098765434567898765349873456789984567899876545660345123456713456789098765434567898765349873456789984567899876545660345123456713456789098765434567898765349873456789984567899876545660


def count_even_odd_recursion(num, even=0, odd=0):
    if (num % 10 % 2) == 0:
        even += 1
    else:
        odd += 1

    num = num // 10
    if num == 0:
        return even, odd
    else:
        return count_even_odd_recursion(num, even, odd)


print(asizeof.asizeof(count_even_odd_recursion(new_num)))
