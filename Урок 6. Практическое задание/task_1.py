"""
Задание 1.

Выполните профилирование памяти в скриптах
Проанализировать результат и определить программы с
наиболее эффективным использованием памяти.

Примечание: Для анализа возьмите любые 3-5 ваших РАЗНЫХ скриптов!
(хотя бы 3 разных для получения оценки отл).
На каждый скрипт вы должны сделать как минимум по две реализации.

Можно взять задачи с курса Основ
или с текущего курса Алгоритмов

Результаты профилирования добавьте в виде комментариев к коду.
Обязательно сделайте аналитику (что с памятью в ваших скриптах, в чем ваша оптимизация и т.д.)

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО

Попытайтесь дополнительно свой декоратор используя ф-цию memory_usage из memory_profiler
С одновременным замером времени (timeit.default_timer())!
"""

from memory_profiler import profile


@profile
def func_1():
    nums = [i for i in range(100000)]
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    del nums
    return new_arr


func_1()

# В функции создается список nums c 100k записями.
# Для оптимизации использования памяти выполнил del nums по завершению функии.
# Python 3.9, OS 64 разрядная.

# Line #    Mem usage    Increment  Occurences   Line Contents
# ============================================================
#     16     19.7 MiB     19.7 MiB           1   @profile
#     17                                         def func_1():
#     18     24.8 MiB      5.1 MiB      100003       nums = [i for i in range(100000)]
#     19     24.8 MiB      0.0 MiB           1       new_arr = []
#     20     26.4 MiB      0.0 MiB      100001       for i in range(len(nums)):
#     21     26.4 MiB      1.5 MiB      100000           if nums[i] % 2 == 0:
#     22     26.4 MiB      0.0 MiB       50000               new_arr.append(i)
#     23     22.4 MiB     -3.9 MiB           1       del nums
#     24     22.4 MiB      0.0 MiB           1       return new_arr
