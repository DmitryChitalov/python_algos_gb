"""
Задание 1.
Выполните профилирование памяти в скриптах
Проанализировать результат и определить программы с
наиболее эффективным использованием памяти.

Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько
вариантов кода для одной и той же задачи. Можно взять задачи с курса Основ или с текущего курса Алгоритмов

Результаты анализа вставьте в виде комментариев к коду.
Также укажите в комментариях версию Python и разрядность вашей ОС.

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО
"""

'''
Версия Python 3.8
разрядность ОС 64
------------------------------------------------------------------------------------------------------------------------
ЗАДАЧА 1
Задача номер 1 из третего урока, где я реализовал скрипт для заполнения словаря и списка, для замера времени

Line #    Mem usage    Increment   Line Contents
================================================
    35     13.3 MiB     13.3 MiB   @function_execution_time
    36                             @profile
    37                             def my_dict(el):
    38     91.3 MiB     12.0 MiB   	dct = {f'key{i}': i for i in range(el)}
    39     91.3 MiB      0.0 MiB   	return dct

Filename: G:/GeekBrains/6_Python_algorithms_and_data_structures/lesson_3/Урок 3. Практическое задание/task_1.py

Line #    Mem usage    Increment   Line Contents
================================================
    28     13.4 MiB     13.4 MiB   @function_execution_time
    29                             @profile
    30                             def my_list(el):
    31     32.4 MiB      0.2 MiB   	lst = [i for i in range(el)]
    32     32.4 MiB      0.0 MiB   	return lst
    
	dict_1 = my_dict(1000000)
	list_1 = my_list(1000000)
	
По полученым результатам можно заметить на сколько, больше места занимает словарь по отношению к списку, при одинаковом
колличестве элементов.
------------------------------------------------------------------------------------------------------------------------
час искал еще примеры, как-то не нашел подходящих
'''
