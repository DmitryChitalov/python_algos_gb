"""
Задание 1.
Выполните профилирование памяти в скриптах
Проанализировать результат и определить программы с наиболее эффективным использованием памяти.

Примечание: Для анализа возьмите любые 1-5 ваших разных скриптов! Сделать их разные реализации.
Можно взять задачи с курса Основ или с текущего курса Алгоритмов

Результаты анализа вставьте в виде комментариев к коду.
Также укажите в комментариях версию Python и разрядность вашей ОС.

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ) БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО

Попытайтесь дополнительно свой декоратор используя ф-цию memory_usage из memory_profiler
С одновременным замером времени (timeit.default_timer())!
"""
from memory_profiler import profile


@profile
def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


@profile
def func_2(nums):
    return (i for i in range(len(nums)) if nums[i] % 2 == 0)


nums = list(range(100000))
func_1(nums)
func_2(nums)

"""
Проход всей последовательности затратен по памяти, как можно заметить в строке 7
так же память занимает сам массив полученной последовательности чисел.
в то время как вторая реализация получения последовательности через генератерное выражение
не имеет такого влияния на память.
версия Python 3.8, 64-битный процессор

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
     4     16.7 MiB     16.7 MiB           1   @profile
     5                                         def func_1(nums):
     6     16.7 MiB      0.0 MiB           1       new_arr = []
     7     18.9 MiB      1.5 MiB      100001       for i in range(len(nums)):
     8     18.9 MiB      0.0 MiB      100000           if nums[i] % 2 == 0:
     9     18.9 MiB      0.6 MiB       50000               new_arr.append(i)
    10     18.9 MiB      0.0 MiB           1       return new_arr

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    13     17.6 MiB     17.6 MiB           1   @profile
    14                                         def func_2(nums):
    15     17.6 MiB      0.0 MiB           1       return (i for i in range(len(nums)) if nums[i] % 2 == 0)
"""
