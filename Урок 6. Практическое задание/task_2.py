"""
Задание 2.
Предложите фундаментальные варианты оптимизации памяти
 и доказать (наглядно, кодом, если получится) их эффективность

Например, один из вариантов, использование генераторов
"""
########################################################################################################################
from math import sqrt
from memory_profiler import memory_usage
"""
Первое что приходит в голову при оптимизации, это использовать втроенные библиотеки,
они уже всесторонне оптимизированы и всячески протестированы.
"""
m1 = memory_usage()

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [sqrt(i) for i in a if i % 2 == 0]
m2 = memory_usage()
print(f'Память: {m2[0] - m1[0]}')

m1_sub = memory_usage()

a_sub = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b_sub = [i ** 0.5 for i in a if i % 2 == 0]
m2_sub = memory_usage()
print(f'Память: {m2_sub[0] - m1_sub[0]}')

"""
Хотя в конкретном случае произошло всё с точностью до наоборот))) 
С использованием библиотеки :   0.019531 Мб
С простым вычислениемЖ:         0.015625 Мб

Думаю это связано с тем, что в бибилиотеке хранится функция по извлечению корня, которая занимает больше памяти,
тогда как в выражении просте вычисление. 
"""

"""
Использовать герераторы, как в примере первой задачи.
"""

"""
Использовать оператор 'del'
"""

