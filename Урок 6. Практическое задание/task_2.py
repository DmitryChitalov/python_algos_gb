"""
Задание 2. *
Предложить ещё какие-либо варианты (механизмы, библиотеки) для оптимизации памяти и
доказать! (наглядно, кодом) их эффективность (на примере профилировщика)
"""
import sys
import gc
from memory_profiler import profile
from recordclass import recordclass
from collections import namedtuple

# 1)
'''
Модуль gc позволяет инициировать сборку мусора по событию или временному интервалу.
Он так же может быть полезен в случае, если созданный объект ссылается сам на себя.
Есть функции автоматического включения и выключения стандартной сборки мусора.
'''


# данные для демонстрации удаления:
def create_garbage():
    list_1 = [8, 9, 10]
    list_1.append(list_1)


@profile
def gc_demo():
    gc.disable()  # выключение циклической автосборки мусора
    print('Создание мусора...')
    for i in range(8):
        create_garbage()

    print('Сбор мусора...')
    n = gc.collect()  # подсчёт удалённых элементов
    print(f'Количество удалённых элементов: {n}')
    print(f'Не подлежащие сбору элементы: {gc.garbage}')


gc_demo()


# 2)
'''
Модуль recordclass используется для создания переменных типа recordclass, который похож на
namedtuple за одним исключением: он изменяемый. При этом перменные занимают либо одинаковое 
количество памяти, либо переменные recordclass экономнее в её потреблении.
То есть, изменяемость типа не увеличивает потребление памяти в данном случае.
'''


@profile
def rc_demo():
    var_1 = recordclass('var_1', ('x', 'y', 'z'))
    var_2 = namedtuple('var_2', ('x', 'y', 'z'))
    c = {'x': 1, 'y': 2, 'z': 3}
    a = var_1(x=1, y=2, z=3)
    b = var_2(x=1, y=2, z=3)
    a.x = 4
    '''
    нельзя сделать следующее:
    b.x = 4
    результат: >>> AttributeError: can't set attribute
    '''
    print(f'Объём занимаемой объектом recordclass памяти: {sys.getsizeof(a)} байт(а)')
    print(f'Объём занимаемой объектом namedtuple памяти: {sys.getsizeof(b)} байт(а)')
    print(f'Объём занимаемой объектом dict памяти: {sys.getsizeof(c)} байт(а)')


rc_demo()
