"""
Задание 2.
Предложите фундаментальные варианты оптимизации памяти
 и доказать (наглядно, кодом, если получится) их эффективность

Например, один из вариантов, использование генераторов
"""


# Я не нашел task_3 к этому уроку, поэтому приложу его сюда.

from memory_profiler import profile


def task_3(n):
    if n == 0:
        return 0
    else:
        return n + task_3(n-1)


@profile
def profile_it(n):
    return task_3(n)


profile_it(25)

"""
    Если я правильно понял задачу, то решение заключается в том, что мы выносим вызов
    рекурсии в отдельную функцию (profile_it(n)) и профилируем непосредственно её.
    ====================================================================
        Line #    Mem usage    Increment  Occurences   Line Contents
    ====================================================================
        19     19.0 MiB     19.0 MiB           1   @profile
        20                                         def profile_it(n):
        21     19.0 MiB      0.0 MiB           1       return task_3(n)
    ====================================================================
"""
