"""
Задание 2.
Предложите фундаментальные варианты оптимизации памяти
 и доказать (наглядно, кодом, если получится) их эффективность

Например, один из вариантов, использование генераторов
"""
# Кажется на уроке говорилось, но во многих случаях значительно улучшить производительность в Python позволяет
# применение вместо циклов операций map, list comprehensions или numpy.vectorize .(векторизация вычислений, т. е. использование функций,
#  которые поддерживают операции над векторами. Сложно, но как я понял хорошо помогает отказаться от циклов )
# Возможность превращения больших структур данных Python (списки, кортежи или словари) в объекты numpy.ndarray
# для той же векторизации.
# Cython  позволяет скомпилировать модули Python в файлы общих объектов (.so).
#  Их можно загрузить в ваш основной скрипт на Python.Cython улучшает производительность  программы
#  но этот показатель будет меняться в зависимости от того, какого рода код вы пытаетесь оптимизировать.
#
#
