"""
Задание 2.
Предложите фундаментальные варианты оптимизации памяти
 и доказать (наглядно, кодом, если получится) их эффективность

Например, один из вариантов, использование генераторов
"""
# Кажется на уроке говорилось, но во многих случаях значительно улучшить производительность в Python позволяет
# применение вместо циклов операций map, list comprehensions или numpy.vectorize .(векторизация вычислений, т. е. использование функций,
#  которые поддерживают операции над векторами. Сложно, но как я понял хорошо помогает отказаться от циклов )
# Возможность превращения больших структур данных Python (списки, кортежи или словари) в объекты numpy.ndarray
# для той же векторизации.
# Cython  позволяет скомпилировать модули Python в файлы общих объектов (.so).
#  Их можно загрузить в ваш основной скрипт на Python.Cython улучшает производительность  программы
#  но этот показатель будет меняться в зависимости от того, какого рода код вы пытаетесь оптимизировать.
#
#
"""Задание 3 *.
Сделать профилировку для скриптов с рекурсией и сделать,
можно так профилировать и есть ли 'подводные камни'
"""




from memory_profiler import profile  # импортируем профайл
@profile
def wrapper(lst):
    result = check_num(lst)
    return result


def check_num(lst, even_n=0, odd_n=0):
    if len(lst) == 0:
        print(
            f'Количество четных символов равно: {even_n}', f'Количество нечетных равнo:{odd_n}')
        return
    elif (int(lst[0]) % 2) == 0:
        even_n += 1
    elif (int(lst[0]) % 2) == 1:
        odd_n += 1
    check_num(lst[1:], even_n, odd_n)


wrapper((list(input("Введите число"))))

'''
Как и было отмечено, на уроке, если профилировать функцию рекурсию, то будет столько же
выведено таблиц, сколько будет шагов рекурсии.Как раз такой результат у меня был в задании 1.
я обернул функцию с рекурсией функцией Wrapper  и применив у ней profiler - результатом была только 1 таблица.
'''
"""Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    16     15.5 MiB     15.5 MiB           1   @profile
    17                                         def wrapper(lst):
    18     15.5 MiB      0.0 MiB           1       result = check_num(lst)
    19     15.5 MiB      0.0 MiB           1       return result"""
