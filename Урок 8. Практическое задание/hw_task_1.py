"""
Задание 1.
Реализуйте кодирование строки "по Хаффману".
У вас два пути:
1) тема идет тяжело? тогда вы можете, опираясь на пример с урока, сделать свою версию алгоритма
Разрешается и приветствуется изменение имен переменных, выбор других коллекций, различные изменения
и оптимизации.
КОПИПАСТ ПРИМЕРА ПРИНИМАТЬСЯ НЕ БУДЕТ!
2) тема понятна? постарайтесь сделать свою реализацию.
Вы можете реализовать задачу, например, через ООП или предложить иной подход к решению.

ВНИМАНИЕ: примеры заданий будут размещены в последний день сдачи.
Но постарайтесь обойтись без них.
"""
import heapq  # для использования очереди с приритетами
from collections import Counter, namedtuple


class Node(namedtuple('Node', ['left', 'right'])):  # Внутренний вызов дерева
    def walk(self, code, acc):
        self.left.walk(code, acc + '0')  # чтобы обойти внутренний вызов, спускаемся в левый потомок с добавлением префикса
        self.right.walk(code, acc + '1')  # затем в правый с добавлением префикса


class Leaf(namedtuple('Leaf', ['char'])):
    def walk(self, code, acc):
        code[self.char] = acc or '0'  # запись в словарь code построенный код данного символа, "0" для кода из одного повторяющегося символа


def huffman_encode(s):
    h = []
    for ch, freq in Counter(s).items():
        h.append((freq, len(h), Leaf(ch)))
    heapq.heapify(h)  # Построение очереди с приоритетами
    count = len(h)
    while len(h) > 1:  # Алгоритм кодирования
        freq1, _count1, left = heapq.heappop(h)
        freq2, _count2, right = heapq.heappop(h)
        heapq.heappush(h, (freq1 + freq2, count,  Node(left, right)))  # Сначала сравниваем первые компоненты в имеющейся куче, затем вторые, если первые компоненты равны
        count += 1

    code = {}
    if h:  # обходим дерево начиная с корня, только если в очереди есть что обходить, во избежание ошибки с пустой строкой
        [(_freq, _count, root)] = h
        root.walk(code, '')
    return code


def main():
    s = input('Введите строку или символы: ')
    code = huffman_encode(s)
    encoded = ''.join(code[ch] for ch in s)
    print(f'Количество уникальных символов исходного кода: {len(code)}\nКоличество символов'
          f' закодированного кода: {len(encoded)}')
    for ch in sorted(code):
        print(f'{ch}: {code[ch]}')
    print(encoded)


if __name__ == '__main__':
    main()

'''
Введите строку или символы: abcabcabcd
Количество уникальных символов исходного кода: 4
Количество символов закодированного кода: 20
a: 01
b: 10
c: 11
d: 00
01101101101101101100

Введите строку или символы: abracadabra
Количество уникальных символов исходного кода: 5
Количество символов закодированного кода: 23
a: 0
b: 110
c: 100
d: 101
r: 111
01101110100010101101110

Введите строку или символы: aaaaa
Количество уникальных символов исходного кода: 1
Количество символов закодированного кода: 5
a: 0
00000

Введите строку или символы: 
Количество уникальных символов исходного кода: 0
Количество символов закодированного кода: 0
'''