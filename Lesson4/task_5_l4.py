"""
Задание 5.*

Приведен наивный алгоритм нахождения i-го по счёту простого числа (через перебор делителей).

Попробуйте решить эту же задачу, применив алгоритм "Решето эратосфена" (https://younglinux.info/algorithm/sieve)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000
Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма
"""

import timeit


def simple(i):
    # O(n**2)
    """Без использования «Решета Эратосфена»"""
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


def eratosfen(i):
    # O(n log(log n))
    """Используя алгоритм «Решето Эратосфена»"""
    n = 2
    l = 10000
    sieve = [x for x in range(l)]
    sieve[1] = 0
    while n < l:
        if sieve[n] != 0:
            m = n*2
            while m < l:
                sieve[m] = 0
                m += n
        n += 1
    return [p for p in sieve if p != 0][i-1]


i = int(input('Введите порядковый номер искомого простого числа: '))
print(timeit.timeit("simple(i)", setup="from __main__ import simple, i", number=100))
print(timeit.timeit("eratosfen(i)", setup="from __main__ import eratosfen, i", number=100))

"""
Результат на моём компьютере:
Время работы алгоритмов для поиска 10-го простого числа 100 раз:
- простой - 0.005706674000000245
- решето - 1.0018200989999997

Время работы алгоритмов для поиска 100-го простого числа 100 раз:
- простой - 0.6594608229999999
- решето - 0.9882690570000001

Время работы алгоритмов для поиска 1000-го простого числа 100 раз:
- простой - 112.877363859                                  # впечатляюще долго! я думала, компьютер сломался о_О
- решето - 1.0755206609999988

Алгоритм решета Эратосфена эффективен для поиска простого числа с большим порядковым номером.
Сложность простого алгоритма O(n^2)
Сложность решета Эратосфена O(n log(log n))
Основание - константа, в расчет не берется
"""