"""
3. Массив размером 2m + 1, где m – натуральное число, заполнен случайным образом.
Найдите в массиве медиану. Медианой называется элемент ряда, делящий его на
две равные части: в одной находятся элементы, которые не меньше медианы,
в другой – не больше медианы.

Задачу можно решить без сортировки исходного
массива.

Но если это слишком сложно, то используйте метод сортировки,
который не рассматривался на уроках: Шелла, Гномья, ...

arr[m]
from statistics import median
"""
import random
from statistics import median
import timeit

m = 100
arr = [random.randint(0, 100) for _ in range(2 * m + 1)]
print(f'Массив = {arr}')

def median_1(lst_obj):
    temp = lst_obj
    left_list = []
    right_list = []
    for i in range(len(temp)):
        for j in range(len(temp)):
            if temp[i] > temp[j]:
                left_list.append(temp[j])
            if temp[i] < temp[j]:
                right_list.append(temp[j])
            if temp[i] == temp[j] and i > j:
                left_list.append(temp[j])
            if temp[i] == temp[j] and i < j:
                right_list.append(temp[j])
        if len(left_list) == len(right_list):
            return temp[i]
        left_list.clear()
        right_list.clear()

def gnome_sort(lst):
    i = 0
    while i < len(lst):
        if i == 0:
            i = i + 1
        if lst[i] >= lst[i - 1]:
            i = i + 1
        else:
            lst[i], lst[i - 1] = lst[i - 1], lst[i]
            i = i - 1
    return lst

def gnome_sort_median(lst):
    mid = len(lst) // 2
    return gnome_sort(lst)[mid]

def shell_sort(data):
    inc = len(data) // 2
    while inc:
        for i, el in enumerate(data):
            while i >= inc and data[i - inc] > el:
                data[i] = data[i - inc]
                i -= inc
            data[i] = el
        inc = 1 if inc == 2 else int(inc * 5.0 / 11)
    return data

def shell_sort_median(lst):
    mid = len(lst) // 2
    return shell_sort(lst)[mid]


print(f'Медиан массива без сортировки median_1()  = {median_1(arr)}')
print('Замер по median_1(): ', timeit.timeit("median_1(arr)", \
    setup="from __main__ import median_1, arr", number=100))

print(f'Медиан массива с помощью гномьей сортировки gnome_sort()  = {gnome_sort_median(arr)}')
print('Замер по gnome_sort_median(): ', timeit.timeit("gnome_sort_median(arr)", \
    setup="from __main__ import gnome_sort_median, arr", number=100))

print(f'Медиан массива с помощью сортировки Шелла shell_sort()  = {shell_sort_median(arr)}')
print('Замер по shell_sort_median(): ', timeit.timeit("shell_sort_median(arr)", \
    setup="from __main__ import shell_sort_median, arr", number=100))

print(f'Медиан массива с помощью встроенной функции median()  = {median(arr)}')
print('Замер по встроенной функции median(): ', timeit.timeit("median(arr)", \
    setup="from __main__ import median, arr", number=100))

"""
Вывод:
1) встроенная функция median() является самой эффективной
2) Далее чуть дольше выполнялся поиск медианы массива с помощью гномьей сортировки
3) Менее эффективным оказался поиск медианы массива с помощью сортировки Шелла
4) И самой неэффективным способом оказался поиск медианы без сортировки (из-за постоянного перебора в цикле)

Массив = [44, 70, 41, 8, 40, 78, 5, 61, 29, 32, 46, 79, 6, 38, 8, 22, 17, 61, 14, 19, 92, 72, 59, 70, 38, 43, 60, 15, 32, 4, 18, 79, 80, 56, 36, 79, 94, 18, 88, 21, 89, 44, 10, 90, 97, 65, 22, 73, 53, 77, 55, 23, 37, 29, 86, 95, 19, 43, 57, 50, 4, 93, 45, 77, 46, 3, 19, 87, 54, 74, 44, 6, 82, 52, 81, 91, 30, 65, 47, 88, 1, 26, 45, 94, 74, 37, 76, 63, 18, 19, 26, 5, 88, 68, 73, 51, 5, 67, 13, 38, 74, 89, 14, 75, 1, 77, 66, 83, 52, 55, 81, 38, 8, 54, 37, 39, 53, 26, 47, 14, 46, 5, 55, 27, 54, 53, 71, 46, 61, 4, 94, 10, 72, 79, 54, 64, 57, 92, 30, 71, 2, 33, 65, 100, 96, 26, 43, 22, 11, 11, 56, 64, 22, 59, 33, 46, 64, 9, 29, 8, 41, 74, 72, 37, 14, 39, 65, 1, 78, 74, 49, 49, 22, 98, 1, 63, 11, 86, 49, 91, 8, 98, 35, 40, 63, 95, 26, 5, 29, 73, 13, 1, 57, 6, 2, 13, 0, 73, 98, 99, 63]
Медиан массива без сортировки median_1()  = 47
Замер по median_1():  1.2319522
Медиан массива с помощью гномьей сортировки gnome_sort()  = 47
Замер по gnome_sort_median():  0.0033902999999999572
Медиан массива с помощью сортировки Шелла shell_sort()  = 47
Замер по shell_sort_median():  0.012420700000000062
Медиан массива с помощью встроенной функции median()  = 47
Замер по встроенной функции median():  0.0010342999999999325
"""