"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""


# РЕШЕНИЕ 1
def biggest_profit1(dct):   # Сложность функции O(n^2)
    lst = list(dct.items())
    count = 0
    result = []
    while count != 3:
        max_profit = lst[0]
        for i in lst:
            if max_profit[1] < i[1]:
                max_profit = i
        result.append(max_profit)
        lst.remove(max_profit)
        count += 1
    print(f'Компаннии с самой большой прибылью:\n'
          f'{result[0][0]}\n'
          f'{result[1][0]}\n'
          f'{result[2][0]}')


# РЕШЕНИЕ 2
def biggest_profit2(dct): # Сложность функции O(nlogn)
    lst = list(dct.items())
    lst.sort(key=lambda i: i[1], reverse=True)
    print(f'Компаннии с самой большой прибылью:\n'
          f'{lst[0][0]}\n'
          f'{lst[1][0]}\n'
          f'{lst[2][0]}')

"""
Несмотря на то, что второе решение более компактное, 
предпочтителен первый вариант, из-за меньшей вычислительной
сложности
"""





companies = {'com1': 1000,
             'com2': 300,
             'com3': 450,
             'com4': 999,
             'com5': 998
             }
biggest_profit1(companies)
biggest_profit2(companies)