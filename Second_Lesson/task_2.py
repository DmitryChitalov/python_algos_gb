"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

def even_or_odd_numbers(numb : int, even_count=0, odd_count=0):
    if (numb < 10):
        if (numb % 2):
            print(f"Количество четных и нечетных цифр в числе равно: ({even_count}, {odd_count+1})")
        else:
            print(f"Количество четных и нечетных цифр в числе равно: ({even_count+1}, {odd_count})")
    else:
        remainder = numb % 10 # вычисляем остаток
        numb //= 10
        if (remainder % 2):
            even_or_odd_numbers(numb, even_count, odd_count + 1)
        else:
            even_or_odd_numbers(numb, even_count+1, odd_count)

even_or_odd_numbers(123, 0, 0)
even_or_odd_numbers(34560)  # работает и с аргументами по умолчанию
