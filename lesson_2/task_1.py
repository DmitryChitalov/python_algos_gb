"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, /
- условие завершения рекурсии - введена операция 0

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""


def init_opr():
    opr = None
    while opr not in ('0', '+', '-', '*', '/'):
        opr = input('Введите операцию  +, -, *, / или 0 для завершения программы: ')
        if opr == '0':
            exit()
    return opr


def init_a():
    a = None
    while type(a) is not float:
        try:
            a = float(input('Введите первое число: '))
        except ValueError:
            print('ошибка ввода')
    return a


def init_b():
    b = None
    while type(b) is not float:
        try:
            b = float(input('Введите второе число: '))
        except ValueError:
            print('ошибка ввода')
    return b


def summ(operation, n1, n2):
    if operation == '0':
        return exit()
    else:
        try:
            print(f'{n1} {operation} {n2} = ', eval('n1' + operation + 'n2'))
        except ZeroDivisionError:
            print('Деление на 0')

        return summ(init_opr(), init_a(), init_b())


print(summ(init_opr(), init_a(), init_b()))
