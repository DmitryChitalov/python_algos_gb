"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""
users = {"First_user" : ["First_pass", True], "Second_user" : ["Second_pass", False],
             "Third_user" : ["Third_pass", False], "Fourth_user" : ["Fourth_pass", True],
             "Fifth_user" : ["Fifth_pass", True], "Sixth_user" : ["Sixth_pass", False],
             }
# 1
def first_algorithm(my_dict : dict):
    login = input("Введите ваш логин: ")  # O(1)
    password = input("Введите ваш пароль: ")  # O(1)
    for l in my_dict.keys():  # O(n)
        if (l == login):  # O(1)
            print("Логин верный. Проверяем пароль...") # O(1)
            if (my_dict[l][0] == password):  # O(1)
                print("Пароль верный. Проверяем активирована ли учетная запись...")  # O(1)
                if (my_dict[l][1]):  # O(1)
                    print("Учётная запись активирована. Доступ к ресурсу разрешён") # O(1)
                    return True  # O(1)
                else:
                    print("Учётная запись не активирована, для доступа к ресурсу, ативируйте вашу учётную запись")  # O(1)
                    return False  # O(1)
            else:
                print("Пароль неверный. попробуйте ещё раз")  # O(1)
                return False  # O(1)
        else:
           continue
    return False


print("First algorithm: ", first_algorithm(users)) #Максимальная сложность O(n)

# 2
def second_algorithm(my_dict : dict):
    login = input("Введите ваш логин: ")  # O(1)
    password = input("Введите ваш пароль: ")  # O(1)
    if (login in my_dict.keys()):  # O(n)
        print("Логин верный. Проверяем пароль...")  # O(1)
        if (my_dict[login][0] == password):  # O(1)
            print("Пароль верный. Проверяем активирована ли учетная запись...")  # O(1)
            if (my_dict[login][1]):  # O(1)
                print("Учётная запись активирована. Доступ к ресурсу разрешён")  # O(1)
                return True  # O(1)
            else:
                print("Учётная запись не активирована, для доступа к ресурсу, ативируйте вашу учётную запись")  # O(1)
                return False  # O(1)
        else:
            print("Пароль неверный. попробуйте ещё раз")  # O(1)
            return False  # O(1)
    else:
        print("Логин неверный. попробуйте ещё раз")  # O(1)
        return False
print("Second algorithm: ", second_algorithm(users))
# Результирующая сложность O(n),
# отличие от первого алгоритма в том, что мы использовали не цикл для нахождения логина, а оператор вхождения in
# , но максимальная сложность от этого не изменилась
"""
# Вывод: я считаю что у оба алгоритма можно в равной степени использовать, т.к их сложность одинакова и равно по нотации
O(n). Можно было реализовать каким нибудь образом 2-й вложенный цикл, только для того, чтобы получить сложность O(n^2)
"""