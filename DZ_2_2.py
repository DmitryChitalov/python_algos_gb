"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


# Я знаю что можно было проще сделать, но я решил эту задачу по своему, вспомнив пример
# из урока со срезом массива. Вообщем по сути задача решена!


def recur(lst_obj):
    a = int(lst_obj[0]) % 2
    if a == 0:
        chet.append(lst_obj[0])
    if a == 1:
        nechet.append(lst_obj[0])
    if len(lst_obj) == 1:
        return chet, nechet

    return recur(lst_obj[1:])


chet = []
nechet = []
print("Сейчас мы посчитаем количество четных и нечетных цифр введенного натурального числа")

# Я надеюсь за то что я использовал цикл while это не считается что я нарушил требования
# выполнения задания, так как основная задача сделана через рекурсию! Просто я считаю
# что вводить данные через while и isdigit гораздо красивее и эффективнее!
user_input = (input("Введите натуральное число: "))
while not user_input.isdigit():
    user_input = (input("Нужно ввести натуральное число! Введите число: "))
#  Здесь я хотел избавится от нуля. Не хватило физически
#  времени для обдумывания этой проблемы
# b = list(str(user_input))
# if '0' in b:
#   b.remove('0')

a = recur(list(str(user_input)))
print(f"Количество четных чисел - {len(a[0])}")
print(f"Количество нечетных чисел - {len(a[1])}")
