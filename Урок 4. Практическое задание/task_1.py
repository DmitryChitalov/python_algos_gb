"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Попробуйте оптимизировать код, чтобы снизить время выполнения
Проведите повторные замеры

Добавьте аналитику: что вы сделали и почему
"""

"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание считается не принятым
"""


#Вместо цикла использовал списковое включение. Не смотря на то, что у них одинаковая сложность O(n), получил выигрыш по времени (-7 сек)
from timeit import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


nums = [x for x in range(1000)]
print(
    'Скорость выполнения func_1: ',
    timeit(
        f'func_1({nums})',
        globals = globals(),
        number = 10000
    )
)



def func_2(nums1):
    return [x for x, el in enumerate(nums) if el % 2 == 0]


nums1 = [x for x in range(1000)]
print(
    'Скорость выполнения func_2: ',
    timeit(
        f'func_2({nums1})',
        globals = globals(),
        number = 10000
    )
)