"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Попробуйте оптимизировать код, чтобы снизить время выполнения
Проведите повторные замеры

Добавьте аналитику: что вы сделали и почему
"""

from timeit import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr

def func_2(nums):
    new_arr = [i for i in range(len(nums)) if i % 2 == 0]


num = [10, 5, 3, 8, 0, 1]
print(f'func_1 = {timeit.timeit("func_1(num)", setup="from __main__ import func_1, num")}')
print(f'func_2 = {timeit.timeit("func_2(num)", setup="from __main__ import func_2, num")}')
"""
Выполнил перебор массива через генератор, скорость выпонения уменьшилась, хоть и незначительно.
Таким образом видим, что перебор  и заполнение массива с помошью генератора работает быстрее.
Хотя сложность выполнения в обоих примерах одинаковая O(n)
"""