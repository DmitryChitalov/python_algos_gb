"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание считается не принятым
"""

from timeit import Timer


def func_1(nums):
    """Сохраняет в массиве индексы четных элементов другого массива перебором"""
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


def func_2(nums):
    """Сохраняет в массиве индексы четных элементов другого массива с помощью генератора"""
    new_arr = [i for i in nums if i % 2 == 0]
    return new_arr


N = 10000

# задаем настройки вызова для первой функции, импортируем саму функцию, переменную N,
# создаем список из N элементов
my_setup_1 = """
from __main__ import func_1, N
my_list = [i for i in range(N)]
"""

# создаем экземпляр класса Timer(), передаем ему вызов функции №1 и параметры
t1 = Timer("func_1(my_list)", setup=my_setup_1)
print("Замеряем работу функции перебирающую элементы списка в цикле")
# запускаем замеры в кол-ве number= и выводим результат на экран
print("func_1 ", t1.timeit(number=1000), "seconds")

# задаем настройки вызова для второй функции, импортируем randint для создания списка,
# саму функцию, переменную N, создаем список из N элементов
my_setup_2 = """
from random import randint
from __main__ import func_2, N
my_list = [randint(0, 1000) for i in range(N)]
"""

# создаем экземпляр класса Timer(), передаем ему вызов функции №2 и параметры
t2 = Timer("func_2(my_list)", setup=my_setup_2)
print("Замеряем работу функции использущую генератор")
# запускаем замеры в кол-ве number= и выводим результат на экран
print("func_2 ", t2.timeit(number=1000), "seconds")

print("Функция с гененратором работает быстрее, т.к. это встроенная функция")
