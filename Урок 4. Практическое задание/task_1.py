"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Попробуйте оптимизировать код, чтобы снизить время выполнения
Проведите повторные замеры

Добавьте аналитику: что вы сделали и почему
"""

from timeit import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr

def func_2(nums):
    """ Выбрасываем отдельный массив для хранения данных
    Заменяем создание массивае и добаление элементов, операцией включения. Как итератор используем элементы исходного массива  """
    return  [i for i, elem in enumerate(nums) if elem % 2 == 0]
               
    


if __name__ == '__main__':
    
        
    #print(func_1(list(range(1,100))))
    
    # замеряем исходную функцию измеряем время 1000 прогонов 
    print("Время выполнения 1", 
    timeit("func_1(test_lst)", setup = "from __main__ import func_1; test_lst = test_lst = list(range(1,1000))", 
    number = 1000))

    print(func_2(list(range(1,100))))

    # замеряем решение № 2
    print("Время выполнения 2", 
    timeit("func_2(test_lst)", setup = "from __main__ import func_2; test_lst = test_lst = list(range(1,1000))", 
    number = 1000))

    """
    Время выполнения 1 0.5305926820001332
[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97]
Время выполнения 2 0.39696255500166444
    
    """
    