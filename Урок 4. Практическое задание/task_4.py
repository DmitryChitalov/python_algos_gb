"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым
"""
import random
from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1, 7, 1, 3, 8, 5, 3, 9, 11, 3]

def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)
    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    numb = max(array, key=array.count)
    return f"Чаще всего встречается число {numb}, оно появилось в массиве {array.count(numb)} раз(а)"


print(func_1())
print(func_2())
print(func_3())

print(timeit("func_1()", globals=globals()))
print(timeit("func_2()", globals=globals()))
print(timeit("func_3()", globals=globals()))


"""
Итог:
Cамый долгий результат дает второй вариант.
Это связано с использованием внутри func_2 вспомогательного массива чисел из количества включений 
числа изначального массива, этот вспомогательный масси в пробегается и анализируется несколько раз
Третий вариант незначительно быстрее первого, поскольку в нем для поиска самго частого элемента используются 
встроенные методы 

3.32497995
3.9831408969999997
3.2275109880000006
"""
