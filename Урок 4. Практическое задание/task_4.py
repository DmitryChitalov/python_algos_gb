"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым
"""
from timeit import Timer
from random import randint


#array = [1, 3, 1, 3, 4, 5, 1]
array = [randint(0, 100) for i in range(100)]



def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    num = max(set(array), key=array.count)
    return f'Чаще всего встречается число {num}, оно появилось в массиве {array.count(num)} раз(а)'


print(func_1())
print(func_2())
print(func_3())


time_1 = Timer('func_1()', globals=globals())
time_2 = Timer('func_2()', globals=globals())
time_3 = Timer('func_3()', globals=globals())

print('Функция func_1 выполняется за ', time_1.timeit(number=1000),'миллисекунды')
print('Функция func_2 выполняется за ', time_2.timeit(number=1000),'миллисекунды')
print('Функция func_3 выполняется за ', time_3.timeit(number=1000),'миллисекунды')


"""
----- Тест №1 (number=1000) -----
Чаще всего встречается число 18, оно появилось в массиве 4 раз(а)
Чаще всего встречается число 18, оно появилось в массиве 4 раз(а)
Чаще всего встречается число 5, оно появилось в массиве 4 раз(а)
Функция func_1 выполняется за  0.22009720000000002 миллисекунды
Функция func_2 выполняется за  0.259297 миллисекунды
Функция func_3 выполняется за  0.13704320000000003 миллисекунды


----- Тест №1 (number=10000) -----
Чаще всего встречается число 48, оно появилось в массиве 4 раз(а)
Чаще всего встречается число 48, оно появилось в массиве 4 раз(а)
Чаще всего встречается число 28, оно появилось в массиве 4 раз(а)
Функция func_1 выполняется за  2.1310859 миллисекунды
Функция func_2 выполняется за  2.1519744000000003 миллисекунды
Функция func_3 выполняется за  1.3476669999999995 миллисекунды

----- Тест №1 (number=100000) -----
Чаще всего встречается число 72, оно появилось в массиве 5 раз(а)
Чаще всего встречается число 72, оно появилось в массиве 5 раз(а)
Чаще всего встречается число 12, оно появилось в массиве 5 раз(а)
Функция func_1 выполняется за  21.1032565 миллисекунды
Функция func_2 выполняется за  22.0240009 миллисекунды
Функция func_3 выполняется за  12.6057913 миллисекунды


----- Аналитика -----
Во всех тестах наиболее эффективным способом решения показала себя функция (func_3) с использованием 
встроенной функции max и множества set
max   - O(n) 
set() -O(len)

Функция (func_1) выполняется немного быстрее (func_2), вероятно это связано с тем,
что в первой функции чтение идет из готового списка array О(1),но используется цикл for О(n), 
который замедляет выполнение функции

Функция (func_2) самая медленная, потому что создается список внутри функции, обход по списку for О(n),
добавляются значения в новый список .append О(1) и используется функция max О(n).

Вывод:
Вторая функция (func_2) самая медленная, но это заметно только на больших числах количества тестов.

"""
