"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.
"""
from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'

# реализация через коллекции
from collections import Counter
def func_3():
    """
    Использует специальный класс стандарной библиотеки
    """
    ans = Counter(array).most_common(1) # выбираем наиболе частотную категорию
    ans = ans[0] # перезаписываем множество в переменную
    return f'Чаще всего втречается число {ans[0]}, ' \
           f'оно появилось {ans[1]} раз(а)'

# реализация через метод max
def func_4():
    """
    Использует дополнительный аргумент функции max()
    """
    num = max(array,key = array.count)
    return f'Чаще всего встречается число {num}, '+ f'оно появилось {array.count(num)} раз(а)'


print(func_1())
print(func_2())
print(func_3())
print(func_4())

# замеры времени
print('замер реализации 1',
    timeit("func_1()", "from __main__ import func_1", number = 100000)
)

print('замер реализации 2',
    timeit("func_2()", "from __main__ import func_2", number = 100000)
)

print('замер реализации 3',
    timeit("func_3()", "from __main__ import func_3", number = 100000)
)

print('замер реализации 4',
    timeit("func_4()", "from __main__ import func_4", number = 100000)
)

"""
Самая быстрая реализация из оказалась 4, за счет использования встроенных фукнций.
Реализации 1 и 2 получились долгими по времения из-за использования циклов перебора элементов массива.
Испльзование класса Counter оказалось самым медленным, хотя он тоже является частью стандартной библиотеки.Возможно из-за выделения памяти при создания экземпляра класса и вызова методов класса время работы программы растягивается.

python3 'Урок 4. Практическое задание/task_4.py'
Чаще всего встречается число 1, оно появилось в массиве 3 раз(а)
Чаще всего встречается число 1, оно появилось в массиве 3 раз(а)
Чаще всего втречается число 1, оно появилось 3 раз(а)
Чаще всего встречается число 1, оно появилось 3 раз(а)
замер реализации 1 1.1154403370019281
замер реализации 2 1.1865649139945162
замер реализации 3 2.715797262993874
замер реализации 4 0.9312114789936459
"""