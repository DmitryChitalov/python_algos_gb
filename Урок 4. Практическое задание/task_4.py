"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.
"""

import timeit

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    frequent_num = max(array, key=array.count)
    return f"Чаще всего встречается число {frequent_num}, оно появилось в массиве {array.count(frequent_num)} раз(а)"

print(func_1())
print(func_2())
print(func_3())


print(timeit.timeit("func_1()", setup="from __main__ import func_1"))
print(timeit.timeit("func_2()", setup="from __main__ import func_2"))
print(timeit.timeit("func_3()", setup="from __main__ import func_3"))


'''В данном случае самая долгая реализация у второй функции - 2,541 с. Во второй функции при итерации создается массив, 
куда кладутся числа с результатами подсчета их количества в исходном массиве. Потом программа уже в этом массиве находит
максимум. На это уходят приличные ресурсы. 
Реализация первого варианта заняла 1,859 с, третьего - 1,836. Сопоставимы по времени, хотя цикл (первый вариант) обычно 
 занимает больше по времени по сравнению со встроенными функциями, хотя сложность по О-нотации тут одна и та же - 
 линейная О(N)'''