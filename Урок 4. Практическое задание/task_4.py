"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.
"""

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():  # придумал сам
    m = 0
    num = 0
    some_set = set(array)  # преобразуем массив в множество. убираем дубли - уменьшаем кол-во повторений в цикле
    for i in some_set:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_4():  # погуглил и немного дописал
    num = max(set(array), key=array.count)
    count = array.count(num)
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {count} раз(а)'


if __name__ == '__main__':
    from timeit import timeit

    print(func_1())
    print(func_2())
    print(func_3())
    print(func_4())

    print('Время выполнения первого варианта при 10000 повторениях: ', timeit(
        func_1,
        setup='from __main__ import func_1, array',
        number=10000
    ))

    print('Время выполнения второго варианта при 10000 повторениях: ', timeit(
        func_2,
        setup='from __main__ import func_2, array',
        number=10000
    ))

    print('Время выполнения третьего варианта при 10000 повторениях: ', timeit(
        func_3,
        setup='from __main__ import func_3, array',
        number=10000
    ))

    print('Время выполнения четвертого варианта при 10000 повторениях: ', timeit(
        func_4,
        setup='from __main__ import func_4, array',
        number=10000
    ))

"""
1. Сложность первого алгоритма составляет О(n) (присваивания имеют константную сложность и их можно не учитывать).
2. Во втором алгоритме мы два раза пробегаемся по массиву (сначала циклом - сложность O(n), потом встроенной функцией
max - сложность O(n). Плюс несколько операций присваивания и поиска элемента по индексу, имеющих константную
сложность. Таким образом суммарно второй алгоритм имеет также линейную сложность, но несколько выше, чем первый.
Дополнительно затрачиваем время и память на создание массива с количеством вхждений каждого элемента.
3. Третий вариант имеет сложность, примерно равную второму (так как имеем цикл - О(n) и создание множества из массива - 
О(n) варианту, но выигрываем за счет уменьшения кол-ва повторений в цикле, так как анализируем вхождения в массив 
элементов из множества, где исключены дубли.
4. Четвертый вариант сопоставим с третьим. Используем две встроенные функции с O(n) каждая.
"""
