"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.
"""
from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    num = max(array, key=array.count)
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {array.count(num)} раз(а)'


for i in range(1, 4):
    print(timeit(f'func_{i}()', f'from __main__ import func_{i}, array', number=1000000))

print(func_1())
print(func_2())
print(func_3())

"""
1.7432922
2.3609
1.5927088999999999

Исходя из замеров вышеприведенного кода самым быстрым является последняя реализация func_3 - её сложность O(n), но 
используются только стандартные функции. 
Самая медленная func_2 имеет сложность O(n), однако присуствует большое количество циклов по сути повторяющихся 
и формирование нового листа. 
Функция func_1 имеет сложность O(n) и близка по скорости к реализации с использованием стандартных функций (func_3). 
"""