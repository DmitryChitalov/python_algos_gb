"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым
"""
from timeit import timeit
from collections import Counter


array = [1, 3, 1, 3, 4, 5, 1, 3, 1, 3, 4, 5, 1, 3, 1, 3, 4, 5, 1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)
    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    s = Counter(array).most_common(1)
    return f'Чаще всего встречается число {s[0][0]}, ' \
           f'оно появилось в массиве {s[0][1]} раз(а)'


print(func_1())
print(func_2())
print(func_3())
print(timeit("func_1()", number=100000, globals=globals()))
print(timeit("func_2()", number=100000, globals=globals()))
print(timeit("func_3()", number=100000, globals=globals()))


"""
В первой функции на каждой итерации цикла вызывается встроенная функция count() и запоминается результат, если он лучший
Во второй создается массив с частотной характеристикой встречаемости элемента, каждую инерацию цикла следует добавление
в новый массив, что замедляет выполение, применение функции max() к созданному массиву.
в третьем случае пользуемся функцией Counter из collections, это самое быстрое решение

0.639665667025838
0.7240506680100225
0.2679181330022402

"""