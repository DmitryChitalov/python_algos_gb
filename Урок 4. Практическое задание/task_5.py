"""
Задание 5.*

Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).

Попробуйте решить эту же задачу,
применив алгоритм "Решето эратосфена" (https://younglinux.info/algorithm/sieve)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000
Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма
"""
from timeit import timeit

def simple(i):
    """Без использования «Решета Эратосфена»"""
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


i = int(input('Введите порядковый номер искомого простого числа: '))
print(simple(i))

n = int(input('Введите  число, \n'
              'до которого ведется происк простых чисел\n'
              '(правая граница): '))
number = int(input('Введите порядковый номер искомого простого числа: '))


def eratosthenes(n):
    sieve = list(range(n + 1))
    sieve[1] = 0    # без этой строки итоговый список будет содержать единицу
    for i in sieve:
        if i > 1:
            for j in range(i + i, len(sieve), i):
                sieve[j] = 0
    sieve1 = [x for x in sieve if x != 0]
    try:
        return f' Список простых чисел до границы{sieve1},\nЧисло, с порядковым номером {number}: {sieve1[number - 1]}'
    except:
        return 'Число больше правой границы'


print(eratosthenes(n))  # где n - любое число

print(timeit("simple(i)", globals=globals(), number=100))
print(timeit("eratosthenes(n)", globals=globals(), number=100))

"""
10:
0.002780099999999841
0.0032601999999997133

100:
0.43354599999999976
0.04898830000000043

1000:
63.741187499999995
0.43622179999999844


Сложность наивного алгоритма O(n^2)
Сложность решета Эратосфена: O(n log(log n))

Колоссальная разница видна на больших значениях порядкового числа
"""
