"""
Задание 5.*

Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).

Попробуйте решить эту же задачу,
применив алгоритм "Решето эратосфена" (https://younglinux.info/algorithm/sieve)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000
Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма
"""

from timeit import timeit

def simple(i):
    """Без использования «Решета Эратосфена»"""
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


def simple_era(n):
    if n == 1:
        return 2
    elif n == 2:
        return 3
    else:
        simple_arr = [2, 3]
        num = 3
        while len(simple_arr) < n:
            num += 2
            is_simple = True
            for i in simple_arr:
                if num % i == 0:
                    is_simple = False
                    break
            if is_simple:
                simple_arr.append(num)
        return simple_arr[n - 1]


i = int(input('Введите порядковый номер искомого простого числа: '))
print(simple(i))
print(simple_era(i))

print(timeit('simple(i)', 'from __main__ import simple, i', number=1000))
print(timeit('simple_era(i)', 'from __main__ import simple_era, i', number=1000))


"""
Сделал не совсем решето, но что-то похожее. Т.к. через решето ищутся числа до определенного числа, 
а у нас задан порядковый номер числа, то количество чисел для первоначального внесения в массив предугадать сложно, 
особенно на больших значениях. В итоге получился модифицированный исходный алгоритм с уменьшенным числом проверок. 
В качестве делителей берутся только простые числа, найденные на предыдущих итерациях алгоритма, 
как в оригинальном решете.

Результаты замеров:

10-е число:
0.029921848999947542
0.0057985029998235404

100-е число:
2.6555577109975275
0.35177774600015255

1000-е число:
447.6096751769983
35.10061559300084

"""