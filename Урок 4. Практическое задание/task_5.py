"""
Задание 5.*

Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).

Попробуйте решить эту же задачу,
применив алгоритм "Решето эратосфена" (https://younglinux.info/algorithm/sieve)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000
Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма
"""


from timeit import timeit


def simple(i):
    # Без использования «Решета Эратосфена»
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


i = int(input('Введите порядковый номер искомого простого числа: '))
print(simple(i))

print(f'Время нахождения простого числя для n=10 наивным алгоритмом: '
      f'{timeit("simple(10)", setup="from __main__ import simple", number=1000)}')

print(f'Время нахождения простого числя для n=100 наивным алгоритмом: '
      f'{timeit("simple(100)", setup="from __main__ import simple", number=1000)}')

print(f'Время нахождения простого числя для n=1000 наивным алгоритмом: '
      f'{timeit("simple(500)", setup="from __main__ import simple", number=1000)}')

"""
Наивный алгоритм:
Время нахождения простого числя для n=10 наивным алгоритмом: 0.021630999999999997
Время нахождения простого числя для n=100 наивным алгоритмом: 2.321303
Время нахождения простого числя для n=1000 наивным алгоритмом: 84.3095581
пришлось уменьшить количество попыток, иначе время приближалось к бесконечности
"""


def erathosfenes_basic(n):
    a = [i for i in range(n + 1)]
    a[1] = 0
    i = 2
    while i <= n:
        if a[i] != 0:
            j = i + i
            while j <= n:
                a[j] = 0
                j = j + i
        i += 1
    a = set(a)
    a.remove(0)
    a = list(a)
    return a


def erathosfenes(n):
    lcl_arr = []
    i = 1
    while n >= len(lcl_arr):
        lcl_arr = erathosfenes_basic(i * n)
        i = i * 2
    return lcl_arr[n - 1]


i = int(input('Введите порядковый номер искомого простого числа: '))
print(simple(i))


print(f'Время нахождения простого числя для n=10 Решетом Эратосфена: '
      f'{timeit("erathosfenes(10)", setup="from __main__ import erathosfenes", number=1000)}')

print(f'Время нахождения простого числя для n=100 Решетом Эратосфена: '
      f'{timeit("erathosfenes(100)", setup="from __main__ import erathosfenes", number=1000)}')

print(f'Время нахождения простого числя для n=1000 Решетом Эратосфена: '
      f'{timeit("erathosfenes(500)", setup="from __main__ import erathosfenes", number=1000)}')


""" Получается, действительно быстрее, несмотря даже на то, что вызывается функция из функции:
Время нахождения простого числя для n=10 Решетом Эратосфена: 0.0200882
Время нахождения простого числя для n=100 Решетом Эратосфена: 0.42815600000000004
Время нахождения простого числя для n=1000 Решетом Эратосфена: 2.9202765000000004
"""