"""
Задание 5.*

Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).

Попробуйте решить эту же задачу,
применив алгоритм "Решето эратосфена" (https://younglinux.info/algorithm/sieve)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000
Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма
"""

from timeit import timeit


def simple(i):
    """Без использования «Решета Эратосфена»"""
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


def erato(n):
    if n >= 10000:
        limit = n*100
    else:
        limit = n*10
    a = [i for i in range(limit)]
    a[1] = 0
    i = 2
    while i < limit:
        if a[i] != 0:
            j = i*2
            while j < limit:
                a[j] = 0
                j += i
        i += 1
    return [x for x in a if x != 0][n-1]


for i in [10, 100, 1000]:
    print(f'Замеры времени для {i} индекса: ')
    print(timeit(f'simple({i})', 'from __main__ import simple', number=10))
    print(timeit(f'erato({i})', 'from __main__ import erato', number=10))

"""
Замеры времени для 10 индекса: 
0.0001583000000000001
0.00033280000000000115
Замеры времени для 100 индекса: 
0.0190486
0.004416100000000006
Замеры времени для 1000 индекса: 
4.5471772999999995
0.05102600000000024

Согласно результатам замеров времени для кода выше - алгоритм с использованием Решета Эратосфена начинает быть 
эффективнее начиная уже с 100 индекса и становится в несколько раз эффективнее с увеличением порядкового номера
искомого элемента. 
Сложность первого алгоритма O(n^2) в виду наличия двух вложеных циклов.
Cложность алгоритма с использованиемРешета Эратосфена O(n log (log n)). 
"""