"""
Задание 5.**

Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).

Попробуйте решить эту же задачу,
применив алгоритм "Решето Эратосфена" (https://younglinux.info/algorithm/sieve)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000
Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма

Укажите формулу сложности О-нотация каждого алгоритма
и сделайте обоснвование рез-ам
"""
from timeit import timeit


def simple(i):
    """Без использования «Решета Эратосфена»"""
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


def simple_2(i):
    simples = []
    cur_numb = 2
    cur_indx = 1
    while cur_indx < i + 1:
        is_simple = True
        for j in simples:
            if cur_numb % j == 0:
                cur_numb += 1
                is_simple = False
                break
        if is_simple:
            simples.append(cur_numb)
            cur_indx += 1
    return cur_numb


i = int(input('Введите порядковый номер искомого простого числа: '))
print(simple(i))
print(simple_2(i))

print(timeit("simple(i)", number=10000, globals=globals()))
print(timeit("simple_2(i)", number=10000, globals=globals()))


"""
В первом алгоритме сложность O(n*n/2) - примерно, второй множитель число итераций до первого делителя из подряд идущих
чисел, во втором O(n*log(n)) - примерно, второй множитель - первый простой делитель, сложность несколько ниже

Тест на двух алгоритмах:
Введите порядковый номер искомого простого числа: 9
23
23
0.10205988999223337
0.05808210698887706

Введите порядковый номер искомого простого числа: 44
193
193
2.7389839999959804
0.9043658300070092

"""





