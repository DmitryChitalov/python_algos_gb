"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""


def calc():
    sign_or_exit = input("Введите операцию (+, -, *, / или 0 для выхода): ")
    if sign_or_exit == '0':
        return
    if sign_or_exit not in ['+', '-', '*', '/']:
        print("Вы ввели неверный знак (((. Исправьтесь")
        return calc()
    first = input("Введите первое число: ")
    if first.isdigit() is False:
        print("Вы ввели не число (((. Исправьтесь")
        return calc()
    second = input("Введите второе число: ")
    if second.isdigit() is False:
        print("Вы ввели не число (((. Исправьтесь")
        return calc()
    if sign_or_exit == '/' and second == '0':
        print("На 0 делить нельзя (((. Исправьтесь")
        return calc()
    print(eval(f'{first} {sign_or_exit} {second}'))
    return calc()


calc()
