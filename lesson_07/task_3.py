"""
3. Массив размером 2m + 1, где m – натуральное число, заполнен случайным образом.
Найдите в массиве медиану. Медианой называется элемент ряда, делящий его на
две равные по длине части: в одной находятся элементы, которые не меньше медианы,
в другой – не больше медианы.

Задачу можно решить без сортировки исходного
массива.

Но если это слишком сложно, то используйте метод сортировки,
который не рассматривался на уроках: Шелла, Гномья, Кучей...

[5, 3, 4, 3, 3, 3, 3]

[3, 3, 3, 3, 3, 4, 5]

my_lst
new_lts

arr[m]


from statistics import median

[3, 4, 3, 3, 5, 3, 3]


left.clear()
right.clear()


m = 3
len = 7
i
left = []
right = []

left == right and

for i in
    for
    left == right
    left.clear()
    right.clear()


"""

from statistics import median
from random import randint
from timeit import timeit


def median_remove_max(lst: list):

    removable_list = lst.copy()

    for _ in range(len(lst) // 2):
        removable_list.remove(max(removable_list))

    return max(removable_list)


def median_equal_sides(lst: list):

    border = len(lst) // 2
    left_side = []
    right_side = []
    mid = []

    for item in lst:
        for element in lst:
            if element > item:
                right_side.append(element)
            elif element < item:
                left_side.append(element)
            else:
                mid.append(element)

        if mid:
            mid.remove(item)

        for el in mid:
            left_side.append(el) if len(left_side) < border else right_side.append(el)

        if len(left_side) == len(right_side):
            return item

        left_side.clear()
        right_side.clear()
        mid.clear()


def median_sort_shell(lst: list):

    array = lst.copy()
    inc = len(array) // 2

    while inc:
        for i, element in enumerate(array):
            while i >= inc and array[i - inc] > element:
                array[i] = array[i - inc]
                i -= inc
            array[i] = element
        inc = 1 if inc == 2 else int(inc * 5 / 11)

    return array[len(array) // 2]


ms = (5, 50, 500)

test_list = tuple([randint(1, 1000) for _ in range(m * 2 + 1)] for m in ms)


print('\n\nФункция на основе удаления максимального элемента:')
for test in test_list:
    print(f'\nМассив из {len(test)} элемента(-ов): {median_remove_max(test)}')
    print(f'Проверка встроенной функцией: {median(test)}')
    print(f'Время выполнения: {timeit("median_remove_max(test)", globals=globals(), number=1000)}')

    # Массив из 11 элемента(-ов): 548
    # Проверка встроенной функцией: 548
    # Время выполнения: 0.001778799999999997
    #
    # Массив из 101 элемента(-ов): 412
    # Проверка встроенной функцией: 412
    # Время выполнения: 0.0652085
    #
    # Массив из 1001 элемента(-ов): 519
    # Проверка встроенной функцией: 519
    # Время выполнения: 5.1571057


print('\n\nФункция на основе разбиения и равенства массивов:')
for test in test_list:
    print(f'\nМассив из {len(test)} элемента(-ов): {median_equal_sides(test)}')
    print(f'Проверка встроенной функцией: {median(test)}')
    print(f'Время выполнения: {timeit("median_equal_sides(test)", globals=globals(), number=1000)}')

    # Массив из 11 элемента(-ов): 548
    # Проверка встроенной функцией: 548
    # Время выполнения: 0.004324200000000111
    #
    # Массив из 101 элемента(-ов): 412
    # Проверка встроенной функцией: 412
    # Время выполнения: 0.5640168000000001
    #
    # Массив из 1001 элемента(-ов): 519
    # Проверка встроенной функцией: 519
    # Время выполнения: 12.721911299999999


print('\n\nФункция на основе сортировки Шелла:')
for test in test_list:
    print(f'\nМассив из {len(test)} элемента(-ов): {median_sort_shell(test)}')
    print(f'Проверка встроенной функцией: {median(test)}')
    print(f'Время выполнения: {timeit("median_sort_shell(test[:])", globals=globals(), number=1000)}')

    # Массив из 11 элемента(-ов): 548
    # Проверка встроенной функцией: 548
    # Время выполнения: 0.0047989000000008275
    #
    # Массив из 101 элемента(-ов): 412
    # Проверка встроенной функцией: 412
    # Время выполнения: 0.07420820000000106
    #
    # Массив из 1001 элемента(-ов): 519
    # Проверка встроенной функцией: 519
    # Время выполнения: 1.500517600000002

# Замеры показывают, что быстрее всего с задачей справляются алгоритмы, основанные на исключении максимальных элементов
# и с применением сортировки Шелла. Алгоритм на основе разбиения и равенства массивов работает медленнее всего,
# так как для его выполнения требуется полный обход по всем элементам массива с выполнением повторного обхода
# по всем элементам на каждом шаге - то есть сложность этого алгоритма в любом случае будет не ниже O(N^2).
# Алгоритм, основанный на исключении максимальных элементов, также имеет квардатичную сложность, но обходит только
# половину массива, соответственно неплохо работает на массивах небольшой длины, и на средних значениях N будет
# выдавать приемлемые результаты.
# Несмотря на то, что в худшем случае алгоритм на основе сортировки Шелла тоже будет иметь квадратичную сложность,
# на практике при правильном подборе шага для предварительных грубых сортировок он будет выдавать самые хорошие
# результаты при больших N, так как его сложность для частично упорядоченных массивов приближается к линейной - то есть
# в итоге он совершит гораздо меньшее количество обходов, чем предыдущие два алгоритма.
