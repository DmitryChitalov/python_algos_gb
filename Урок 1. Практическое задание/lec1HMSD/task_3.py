"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

#Решение 1 более эффективное, лаконичное и простое в чтении. Решение 2 медленнее, требует больше времени для понимания

comp_list = {
    'microsoft': 2000,
    'yandex': 500,
    'gazprom': 2500,
    'cisco': 1500,
    'Mosgaz': 300
}


#Решение 1. Лакончиное.
#Сложность: O(n*log n)
def sort_dict(list_comp):
    list_dic = list(list_comp.items()) # O(n)
    list_dic.sort(reverse=True, key=lambda i: i[1]) # O(n log n)
    #return list([list_dic[element] for element in range(3)])  # O(n)
    return list_dic[:3] # O(n)

#Решение 2. Классическое
#Сложность: O(n^2)
def sort_dict_manual(list_comp):
    minn = list(list_comp.items())[0][1]
    list_dic = list(list_comp.items())
    for i in range(len(list_dic)): # O(n)
        for  j in range(len(list_dic) - 1 - i): # O(n)
            if  list_dic[j][1] < list_dic[j + 1][1]: # O(n)
                list_dic[j], list_dic[j + 1] = list_dic[j + 1], list_dic[j] # O(n)
    return list([list_dic[element] for element in range(3)]) #O(n)


print(comp_list)
print(sort_dict(comp_list))
print(sort_dict_manual(comp_list))