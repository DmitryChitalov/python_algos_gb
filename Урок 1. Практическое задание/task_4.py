"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""



# Решение №1
# Сложность решения: O(n)


def authorization(auth_dict):
    while True:
        i = 0
        login = input()
        password = input()
        if login in auth_dict['login']:
            i = auth_dict['login'].index(login)
        if password != auth['password'][i]:
            print('Не верный логин или пароль')
        else:
            if auth_dict['activation'][i]:
                print('Вход выполнен')
                break
            else:
                print('Пользователь не активирован, активировать сейчас? ')
                answer = input().lower()
                if answer == 'да' or answer == 'lf':
                    auth_dict['activation'][i] = True
                    print('Пользователь активирован, повторите попытку входа')


auth = {
    'login': ('sergey123', 'geek456', 'brains789'),
    'password': ['qwerty123', 'Zxcvb321', 'qazWsx456'],
    'activation': [True, False, True]
}

# authorization(auth) # для проверки

# Решение №2
# Сложность решения: O(n**2)

def authorization_2(auth_dict):
    i = 0
    n = 0
    while True:
        if n < 2:
            login = input('Введите логин: ')
            password = input('Введите пароль: ')
        while n != 2:
            if login in auth_dict['login']:
                i = auth_dict['login'].index(login)
                n += 1
            if password == auth['password'][i]:
                n += 1
            else:
                print('Не верный логин или пароль')
                n = 0
                break
        if n == 2:
            if auth_dict['activation'][i]:
                print('Вход выполнен')
                break
            else:
                answer = input('Пользователь не активирован, активировать сейчас?').lower()
                if answer == 'да' or answer == 'lf':
                    auth_dict['activation'][i] = True
                    print('Пользователь активирован, повторите вход')
                    n = 0


auth2 = {
    'login': ('sergey123', 'geek456', 'brains789'),
    'password': ['qwerty123', 'Zxcvb321', 'qazWsx456'],
    'activation': [True, False, True]
}
# authorization_2(auth2) # для проверки

"""
Вывод: решение №1 эфективнее, так его сложность O(n), нет лишнего вложеного цикла как в решении №2
"""




