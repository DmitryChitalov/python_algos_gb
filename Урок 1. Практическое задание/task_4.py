"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

data_users = {'John': ["qwerty1", True], 'Serzh': ["qwerty2", False], 'Alex': ["qwerty3", False],
              'Liza': ["qwerty4", True]}
data_users_lst = [['John', "qwerty1", True], ['Serzh', "qwerty2", False], ['Alex', "qwerty3", False],
                  ['Liza', "qwerty4", True]]


def free_access(login, password):
    """
    Функция принимает значения логина и пароля, проверяет наличие логина и соответствие пароля из базы данных в виде
    словаря. При успешной проверке выдает сообщение о входе в систему и о статусе активации. При не успешном входе
    выдает соотв. сообщения.
    Сложность: # O(N) - линейная
    Аналитика:
    отсутствие вложенных циклов и применение словаря в для хранения данных дает хорошую оптимизацию O(N) по сравнению
    с использованием вложенных циклов
    """
    for key, value in data_users.items():                         # O(N) - линейная
        if key == login:                                          # O(1) - константа
            if data_users.get(key)[0] == password:                # O(1) - константа
                print(f'Пользователь {key} в системе, ', end='')  # O(1) - константа
            else:
                print("Пароль не верный")                         # O(1) - константа
                return                                            # O(1) - константа
            if data_users.get(key)[1]:                            # O(1) - константа
                print('Ваша учетная запись активирована')         # O(1) - константа
                return                                            # O(1) - константа
            else:
                print('Активируйте вашу учетную запись')          # O(1) - константа
                return                                            # O(1) - константа
    print("Данного пользователя не существует!")                  # O(1) - константа


def free_access_lst(login, password):
    """
    Функция принимает значения логина и пароля, проверяет наличие логина и соответствие пароля из базы данных в виде
    списка списков. Перебирается один уровень вложенности и сверяется с данными в имеющемся списке данных.
    При успешной проверке выдает сообщение о входе в систему и о статусе активации. При не успешном входе
    выдает соотв. сообщения.
    Сложность: # O(N) - линейная
    Аналитика:
    отсутствие вложенных циклов дает хорошую оптимизацию O(N) по сравнению с использованием вложенных циклов. Вложенного
    цикла удалось избежать, заранее зная позиции элементов списка, если же это не известно, тогда нужен вложенный цикл.
    """
    for el in data_users_lst:                                       # O(N) - линейная
        if el[0] == login:                                          # O(1) - константа
            if el[1] == password:                                   # O(1) - константа
                print(f'Пользователь {el[0]} в системе, ', end='')  # O(1) - константа
                if el[2]:                                           # O(1) - константа
                    print('Ваша учетная запись активирована')       # O(1) - константа
                    return                                          # O(1) - константа
                else:
                    print('Активируйте вашу учетную запись')        # O(1) - константа
                    return
            else:
                print("Пароль не верный")                           # O(1) - константа
                return                                              # O(1) - константа
    print("Данного пользователя не существует!")                    # O(1) - константа


free_access("John", "qwerty1")
free_access("Mike", "qwerty11")
free_access_lst("Alex", "qwerty3")
free_access_lst("Liza", "qwerty4")
free_access_lst("Stiv", "qwerty4")