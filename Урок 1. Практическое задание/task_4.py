"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


# 1-й вариант: # O(1) - константная
def check_user1(login, password_enter, dict_obj):
    access_allowed = False
    password_user = dict_obj[login][0]  # O(1)
    activated_user = dict_obj[login][1]  # O(1)
    if activated_user:
        if password_user == password_enter:
            access_allowed = True
        else:
            print(f"Неверный пароль {password_enter}")
    else:
        print(f"Ваша учетная запись - {login} не активирована, хотите ее активровать сейчас?")

    return f"Для пользователя {login} доступ к ресурсу: {access_allowed}!"


# 2-й вариант: O(n) - линейная
def check_user2(login, password_enter, dict_obj):
    access_allowed = False
    for k, v in dict_obj.items():  # O(n)
        if k == login:
            password_user = v[0]  # O(1)
            activated_user = v[1]  # O(1)
            if activated_user:
                if password_user == password_enter:
                    access_allowed = True
                else:
                    print(f"Неверный пароль {password_enter}")
            else:
                print(f"Ваша учетная запись - {login} не активирована, хотите ее активровать сейчас?")

    return f"Для пользователя {login} доступ к ресурсу: {access_allowed}!"


dict_value = {'User1': (12345, True), 'User2': (426346, False), 'User3': (12341, True), 'User4': (657967, False)}
print(check_user1('User2', 426346, dict_value))
print(check_user2('User1', 12345, dict_value))
print(check_user2('User3', 643643346, dict_value))

""" 1-й вариант лучше - O(1) - константная сложность алгоритма, так как количество операций не растет
 и постоянно при любых значениях входных данных по сравнению с другими алгоритмами. 
"""
