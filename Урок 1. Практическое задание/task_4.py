"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

users_data_storage = {
    'atimofeev': ['12345', 1],
    'pfedotova': ['Rhsv2014', 0],
    'lsemenova': ['KjB43Hsf', 1],
    'mkuznetsov': ['password', 1],
    'kmartinova': ['28081985', 0],
    'kakimochkin': ['Pfdnhfrd900', 0],
}


def user_check_1(login, password):
    """ О(n)
        Из-за перебора значений в словаре увеличивается время и ресурсы, затрачиваемые на вычисления.
    """
    if login in users_data_storage.keys():  # О(n)
        if password == users_data_storage[login][0]:
            if not users_data_storage[login][1]:
                if input('Учётная запись не активированна. Для активации введите 1: ') == "1":
                    users_data_storage[login][1] = 1
                    return 'Вход выполнен.'
                else:
                    return 'Введено некорректное значение. Учётная запись не активированна'
            else:
                return 'Вход выполнен.'
        else:
            return 'Не верный пароль'
    else:
        return 'Такой аккаунт не зарегистрирован'


def user_check_2(login, password):
    """ O(1)
        Самое эффективное решение из представленных, т.к. при увеличении входных данных,
        выделяемая память под алгоритм не изменяется.
    """
    try:
        if password == users_data_storage[login][0]:
            if users_data_storage[login][1] == 1 or \
                    input('Учётная запись не активированна. Для активации введите 1: ') == "1":
                users_data_storage[login][1] = 1
                return 'Вход выполнен.'
            else:
                return 'Введено некорректное значение. Учётная запись не активированна'
        else:
            return 'Не верный пароль'
    except KeyError:
        return 'Такой аккаунт не зарегистрирован'


print(user_check_1('atimofeev', '12345'))
print(user_check_1('mkuznetsov', '12345'))
print(user_check_1('kmartinova', '28081985'))
print(user_check_1('atimfeev', '12345'))
print('')

print(user_check_2('atimofeev', '12345'))
print(user_check_2('mkuznetsov', '12345'))
print(user_check_2('pfedotova', 'Rhsv2014'))
print(user_check_2('atimfeev', '12345'))