"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""
dict_obj = {
    'name': ['password', 'yes'],
    'fname': ['fpassword', 'no']
}

def autentification(dict):
    dict_obj = dict
    name = input('Введите логин')
    name_check = 0
    autorization = list(dict_obj.keys())
    for i in range(len(autorization)):
        if autorization[i] != name:
            i+=1
        else:
            name_check = 1
            break
    if name_check != 1:
        return 'Пользователя не существует'
    else:
        password = input('Введите пароль')
        checker = dict_obj.get(autorization[i])
        if checker[0] == password and checker[1] == 'yes':
            return 'Авторизация прошла успешно'

        elif checker[0] == password and checker[1] != 'yes':
            return 'Необходимо активировать аккаунт'
        else:
            return 'Введен неверный пароль' # 2 O(n^2)


def autentification2(dict):
    dict_obj = dict
    name = input('Введите логин')
    names = dict_obj.keys()
    auto_check = 0
    us_values = dict_obj.values()
    for i in range(len(names)):
        if names[i] != name:
            i+=1
        else:
            name_check = 1
            password = input('Введите пароль')
            for j in range(len(names)):
                password_check = us_values[j]
                if password_check[0] == password:
                    auto_check = 1
                    if password_check[1] == 'yes':
                        return 'Авторизация прошла успешно'
                    else:
                        return 'Необходимо активировать аккаунт'
    if auto_check != 1:
        return 'Введен неверный пароль'
    if name_check != 1:
        return 'Пользователя не существует'
 #2 O(n^2)
 # Более эффективного решения не представлено так, как сложнось обоих алгоритмов одинакова, но первый алгоритм проще в прочтении