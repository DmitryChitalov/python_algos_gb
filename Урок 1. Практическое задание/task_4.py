"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


def check(name, password):  # O(1)
    if dct[name][0] == password and dct[name][1] is True:  # O(1)
        return 'Вы успешно прошли аутентификацию!'  # O(1)
    return 'Повторите попытку!'  # O(1)


dct = {'dovgal': [1234567, True],
       'demidov': [123456, False],
       'krakov': [34567890, True],
       'fajeen': [2345678, True],
       'asdfghjk': [45678987, True],
       'fghjhhjk': [456789878, True],
       'kjhgfvbnm': [987654, True]}

while True:  # O(n)
    name = input('Введите имя: ')  # O(1)
    if name.isdigit():  # O(1)
        print('Попробуйте еще раз!')  # O(1)
    else:
        break

while True:  # O(n)
    password = input('Введите пароль: ')  # O(1)
    if password.isdigit():  # O(1)
        password = int(password)  # O(1)
        break
    else:
        print('Попробуйте еще раз!')  # O(1)

result = check(name, password)
print(result)
# Вывод: сложность линейная
