"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""
import random

def auth_1(storage):
    """
    Сложность алгоритма O(1) - константная.
    В этом алгоритме не используется обход ключей словаря. Вместо этого
    происходит поиск элемента, который в ассоциированном массиве
    занимает постоянное время.
    Быстрейший алгоритм из представленных.
    """
    user = input('Введите имя пользователя: ')
    password = input('Введите пароль: ')
    if storage.get(user, False):
        if storage[user][0] == password:
            if storage[user][1]:
                print('Доступ разрешен.')
            else:
                print('Учетная запись не активирована. Пройдите '
                      'активацию пожалуйста.')
        else:
            print('Введен неверный пароль.')
    else:
        print('Введенное имя пользователя не обнаружено в системе.')

def auth_2(storage):
    """
    Сложность алгоритма O(n) - линейная.
    Используется поэлементный обход ключей словаря.
    Алгоритм не оптимизирован для быстрого поиска, он медленнее auth_1.
    """
    user = input('Введите имя пользователя: ')
    password = input('Введите пароль: ')
    for usr in storage.keys():
        if usr == user:
            if storage[usr][0] == password:
                if storage[usr][1]:
                    print('Доступ разрешен.')
                    break
                else:
                    print('Учетная запись не активирована. Пройдите '
                          'активацию пожалуйста.')
                    break
            else:
                print('Введен неверный пароль.')
                break
    else:
        print('Введенное имя пользователя не обнаружено в системе.')

if __name__ == '__main__':
    # Создание словаря-хранилища учетных записей.
    n = 100000
    chars = 'abcdefghxyzmnk'
    users = []
    for i in range(n):
        users.append(''.join([str(w) for w in random.sample( \
        chars, len(chars))]))
    passwords = random.sample(range(100000, 99999999), n)
    storage = {x: (str(y), random.choice((True, False))) for x, y, in \
               zip(users, passwords)}
    for k, v in storage.items():
        print(f'{k}: {v}')

    # Проверка аутентификации.
    print('Первый способ:')
    auth_1(storage)
    print('Второй способ:')
    auth_2(storage)