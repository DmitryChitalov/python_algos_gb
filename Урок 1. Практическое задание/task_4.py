"""
Задание 4.
Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему
Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.
Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.
Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


USER_DB_LIST = [{"login": "Sauron", "password": "BigEye", "auth": True},
                {"login": "Saruman", "password": "KillAllPeople", "auth": False},
                {"login": "Gendalf", "password": "uShallNotPass", "auth": False}]
USER_DB_DICT = {"Sauron": {"password": "BigEye", "auth": True},
                "Saruman": {"password": "KillAllPeople", "auth": False},
                "Gendalf": {"passw": "uShallNotPass", "auth": False}}


# Первый вариант - сложность O(n):
def check_user_first(user_name, user_pass):
    for user in USER_DB_LIST:  # O(n)
        if user["login"] == user_name:  # O(1)
            if user["password"] == user_pass:  # O(1)
                if user["auth"]:  # O(1)
                    print('Welcome To Midgard!')
                    break
                else:
                    print('Активируйтесь!')
                    break
            else:
                print('Вы наколдовали неверный пароль!')
                break
    else:
        print('Такого волшебника не существует!')


check_user_first(input('Ваше Имя на Эльфийском:     '), input('Наколдуйте пароль:      '))


# Второй вариант - сложность O(1):
def check_user_second(user_name, user_pass):
    user = USER_DB_DICT.get(user_name)           # O(1)
    if user is not None:                  # O(1)
        if user["password"] == user_pass:        # O(1)
            if user["auth"]:              # O(1)
                print('Welcome To Midgard!')
            else:
                print('Активируйтесь!')
        else:
            print('Вы наколдовали неверный пароль!')
    else:
        print('Такого волшебника не существует!')


check_user_second(input('Ваше Имя на Эльфийском:     '), input('Наколдуйте пароль:      '))
