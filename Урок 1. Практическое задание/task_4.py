"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


log_pass = {'nichaotomita': 'april', ' tvcomrade': 'raven',
            'boxman': 'velma', 'narucho-dou': 'tsuna'}

"""Алгоритм 1. Сложность квадратическая """
log_pass_aut = [(log, passw) for (log, passw) in log_pass.items()]


def patreon(*x):
    message = "authorizate please"
    log = (input('введите логин'),
           input('введите пароль'))
    while log not in log_pass_aut:  # O(n)
        if log in log_pass_aut:  # O(n)
            message = "access granted"
        else:
            print("Registrate please")
            log = (input('введите логин'),
                   input('введите пароль'))
            log_pass_aut.append(log)

    return(print(message))


patreon()


""" Алгоритм 2. Сложность квадратическая. """


def check_registration(login):
    for i in log_pass.keys():
        if login == i:
            return True
    return False                        # - O(n^2)


def check_password(pswd, login):
    if pswd == log_pass.get(login):
        return True
    return False                        # - O(n)


user_login = input('Enter login ')

if check_registration(user_login):
    if check_password(input('Enter password '), user_login):
        print('congratulation! you are in system!')
    else:
        print('Error! Wrong password')
else:
    print('Error! You  are not registered yet.')                # - O(n^2)

# В первом решении логин и пароль берутся кортежем, проверка происходит удвух значений.
# Второе решение подразумевает послдеовательные проверки, с заранее созданными функциями .
# Первый вариант заносит новые данные пользователя в систему, и сразу позволяет зарегистрироватьсяБ в отличие от алгоритма 2.
# На основании этого, я считаю его более удачным.
