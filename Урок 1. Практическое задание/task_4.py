"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""
"""
Вариант 1
Сложность: О(9)
"""
data = {1: ['Иванов', 'qwerty', 1], 2: ['Петров', '12345', 0], 3: ['Сидоров', '', 1], 4: ['', 'de34rf', 0]}
def check_user(key): # максимальная сложность 9
    if data[key][0] != '' and data[key][1] != '' and data[key][2] == 1: #3
        print(f'Пользователь {key}, вы допущены к ресурсу') #1
    elif data[key][0] != '' and data[key][1] != '' and data[key][2] == 0: #3
        print(f'Пользователь {key}, ваша учетная запись не активирована. Пройдите актвацию! ') #1
    elif data[key][0] == '' or data[key][1] == '': #2
        print('Вы не допущены к ресурсу. Не указан логин или пароль') #1

check_user(1)
check_user(2)
check_user(3)
check_user(4)

"""
Что-то иного варианта не приходит в голову, поэтому по эффективности сравнить не с чем.
"""
