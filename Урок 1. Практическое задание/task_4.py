"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


users = {"user0": {"pass": 55555, "active": False},
        "user1": {"pass": 11111, "active": False},
        "user2": {"pass": 22222, "active": False},
        "user3": {"pass": 33333, "active": True},
        "user4": {"pass": 44444, "active": True}}


def first_sol(user_dict, u_login, u_pass):
    """
    Данная функция будет иметь итоговую сложность O(1), так как все операции сравнения, вхождения в словарь
    или поиск по ключу имеют сложность O(1).
    """
    if u_login in user_dict:
        if user_dict[u_login]["pass"] != u_pass:
            return "Wrong pass!"
        elif user_dict[u_login]["active"]:
            return "Welcome!!"
        else:
            return "Looks like your account is inactive, please activate it!"
    else:
        return "Wrong user name!!"

print(first_sol(users,"user0", 55555))
