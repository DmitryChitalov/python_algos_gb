"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


user_list = {"vasy": ("pass", True), "fedy": ("123", True), "pop": ("123", False)}


def check_user(user, passwrd, user_dict):
    """Если брать по максимуму то получение по ключу из словаря и вывод сообщения
    T(n)=2 """
    if user_dict.get(user) == None:
        return f"пользователя {user} нет в систе. рекомендуем пройти авторизацию"
    bufer_user = user_dict.get(user)
    if bufer_user[1]:
        if bufer_user[0] == passwrd:
            return f"пользователю {user} разрешен доступ"
        else:
            return f"пользователь {user} пароль не совпадает"
    else:
        return f"пользователь {user} заблокирован"


def check_user_2(user, password, user_dict):
    """Смотрим по максимуму весь цикл и еще вывод
    в цикле точно выполниться одно присваивание и далее еще одно возвращение
    T(n)=n+1"""
    count = 0
    for key, value in user_dict.items():
        if user == key:
            if value[1]:
                if value[0] == password:
                    return f"пользователю {user} разрешен доступ"
                else:
                    return f"пользователь {user} пароль не совпадает"
            else:
                return f"пользователь {user} заблокирован"
        count += 1
    if count == len(user_dict):
        return f"пользователя {user} нет в систе. рекомендуем пройти авторизацию"


print(check_user("fedy", "13", user_list))
print(check_user_2("fedy", "123", user_list))

# если сравнить формулы T(n)=2 и T(n)=n+1 для завершения первой максимально необходимо выполнить 2 действия а второй
# N раз если пользователя нет, первая получилась быстрее.
#

