"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


#Решение 1 Квадратичная сложность (вложенный цикл)

log_data = [('login1', 'password1', True), ('login2', 'password2', False), ('login3', 'password3', True)]


def account_check1(user_login, user_password):
    for el in log_data:
        while user_login in el:
            if user_login == el[0] and user_password == el[1] and el[2] is True:
                print('Доступ разрешен')
                break
            elif user_login == el[0] and user_password == el[1] and el[2] is False:
                print('Необходимо активировать аккаунт')
                break
            else:
                print('Доступ запрещен. Неверные логин и/или пароль')
                break

account_check1('login2', 'password2')

#Решение 2 Линейная сложность.(Логарифмическая?)


class Account:
    status = False

    def __init__(self, user_pass):
        self._user_pass = user_pass


login1 = Account('password1')
login1.status = True
login2 = Account('password2')


def account_check(user_log, user_pass):
    if user_pass == getattr(user_log, '_user_pass') and user_log.status is True:
        print('Доступ разрешен')
    elif user_pass == getattr(user_log, '_user_pass') and user_log.status is False:
        print('Необходимо активировать аккаунт')
    else:
        print('Доступ запрещен. Неверные логин и/или пароль')


account_check(login1, 'password1')

"""Второе решение наиболее оптимальное, тк проверка происходит максимально просто
с использованием встроенной функции getattr и ленивой проверки 'and', то есть если первое
условие не выполняется, второе условие уже не проверяется, поэтому я предполагаю, что сложность
может быть и логарифмическая по аналогии с бинарным поиском."""






