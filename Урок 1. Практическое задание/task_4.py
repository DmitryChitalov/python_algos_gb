"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


# 1
def auth_check1(lis, login, password):
    exists = False
    for i in range(len(lis)):  # O(N) далее так как аккаунты не повторяются у всех строк сложность O(1)
        if lis[i]['login'] == login and lis[i]['password'] == password:
            exists = True

            if lis[i]['auth']:
                print('Вход успешен.')

            else:
                answer = input('Хотите ли пройти аутентификацию? д/н ')

                if answer == 'д' or answer == 'да':
                    lis[i]['auth'] = True
                    print('Аутентификация успешна, можете зайти в аккаунт.')

                elif answer == 'н' or answer == 'нет':
                    print('Вы не сможете зайти в аккаунт без аутентификации.')

                else:
                    print('Нет такого варианта ответа.')

    if not exists:
        print('Указаны неверные данные.')


accounts = [
    {'login': 'asd', 'password': 'asf', 'auth': False},
    {'login': 'qwe', 'password': 'qwr', 'auth': True}
]

# auth_check1(accounts, input('Введите имя пользователя: '), input('Введите пароль: '))

'''Общая сложность O(N), пойдёт'''


# 2, отличается способом хранения данных

def auth_check2(dct, login, password):
    try:
        checker = login + ' ' + password
        if dct[checker]:  # O(1) далее O(1)
            print('Вход успешен.')

        else:
            answer = input('Хотите ли пройти аутентификацию? д/н ')
            if answer == 'д' or answer == 'да':
                dct[checker] = True
                print('Аутентификация успешна, можете зайти в аккаунт.')

            elif answer == 'н' or answer == 'нет':
                print('Вы не сможете зайти в аккаунт без аутентификации.')

            else:
                print('Нет такого варианта ответа.')

    except KeyError:
        print('Указаны неверные данные.')


accounts_dict = {'asd asf': False, 'qwe qwr': True}  # логин и пароль разделяются пробелом при хранении

auth_check1(accounts, input('Введите имя пользователя: '), input('Введите пароль: '))
auth_check2(accounts_dict, input('Введите имя пользователя: '), input('Введите пароль: '))

'''Второй способ использует другую систему хранения, проще (О(1)), выглядит более компактно, всё это засчёт словаря, 
а не списка словарей я бы использовал его.'''
