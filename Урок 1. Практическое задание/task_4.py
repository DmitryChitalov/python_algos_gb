"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""
my_dict = {'user1': [111, 'True'], 'user2': [222, 'True'], 'user3': [333, 'False']}


# O(N)
def activation_status(my_dict):
    login = input('input login: ')  # O(1)
    pwd = input('input pwd: ')  # O(1)
    for i in my_dict.items():  # O(N)
        if login in i and pwd == str(i[1][0]):  # O(N)
            if i[1][1] == 'True':
                print("Ваша аккаунт активирован.")
            else:
                print("!!! Активируйте уч. запись!!!")


activation_status(my_dict)


# O(N)
def account(login):
    val = my_dict.get(login)  # O(1)
    if val[1] == 'True':  # O(N)
        print('Your account in active')
    else:
        print('Your account is blocked')


account('user3')
# Обе функии одиноковой О-натации = О(N), второй вариант короче, 
#так-как там не обязательно вводить полные данные, для проверки статуса активации.