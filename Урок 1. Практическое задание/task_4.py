"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

bd_users = {'Zeus': ['mnbhjh25', True],
            'Athena': ['nvjdkn154', False],
            'Heracles': ['absds444', False],
            'Aphrodite': ['14djhsgjd', True],
            'Gera': ['sfmbh45dff', True],
            'Hades': ['sfhvhf16', True],
            'Hermes': ['fjsjssj2s545', False],
            }

#########################################################################################################
"""
Решение №1 сложность  O(9)
это решение лучше на одну операцию. И оно лучше читаеться
"""


def authentication_first(data_user, bd_users_in_f):
    """
    функция получает логин и пароль пользователя,
    проверяет наличие такого пользователя в базе и активацию учетной записи,
    если пользователя нет придлагает регистрацию,
    если учетка не активированна тогда активацию
    """
    login, password = data_user  # O(1)
    if bd_users_in_f.get(login) is None or password != bd_users_in_f.get(login)[0]:  # O(1)+(1)+O(1)+(O(1)+O(1))
        print('invalid username or password')
    elif bd_users_in_f.get(login)[1] is False:  # (O(1)+O(1)) + O(1)
        print('activate your account')
    else:
        print('Welcome')


####################################################################################################
"""
Решение №2 сложность  O(10)
"""


def authentication_second(data_user, bd_users_in_f):
    """
        функция получает логин и пароль пользователя,
        проверяет наличие такого пользователя в базе и активацию учетной записи,
        если пользователя нет придлагает регистрацию,
        если учетка не активированна тогда активацию
    """
    if data_user[0] in bd_users_in_f.keys():  # O(1) + O(1) + O(1)
        if data_user[1] == bd_users_in_f[data_user[0]][0]:  # O(1) + O(1) + O(1) + O(1)
            if bd_users_in_f[data_user[0]][1] is True:  # O(1) + O(1) + O(1)
                print('Welcome')
            print('activate your account')
    else:
        print('invalid username or password')


###########################################################################################################

if __name__ == '__main__':

    user_1 = ['Athena', 'nvjdkn154']
    authentication_first(user_1, bd_users)
    authentication_second(user_1, bd_users)
