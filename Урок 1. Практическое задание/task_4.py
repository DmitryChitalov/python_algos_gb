"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


# O(1)
def auth(lst_users, name, pswd):
    if lst_users.get(name):
        if lst_users[name]['password'] != pswd:
            return "Указан неверный пароль!"
        return "Добро пожаловать!" if lst_users[name]['active'] else "Необходимо пройти активацию учетной записи!"
    else:
        return "Данной учетной записи не существует!"


# O(n)
def auth_user(lst_users, name, pswd):
    for key, value in lst_users.items():
        if key == name:
            if value['password'] != pswd:
                return "Указан неверный пароль!"
            return "Добро пожаловать!" if value['active'] else "Необходимо пройти активацию учетной записи!"

    return "Данной учетной записи не существует!"


users = {'user_1': {'password': '123456', 'active': True}, 'user_2': {'password': '098765', 'active': False}}
print(auth(users, 'user_1', '123456'))
print(auth(users, 'user_1', '1234567'))
print(auth(users, 'user_2', '098765'))

print(auth_user(users, 'user_1', '123456'))
print(auth_user(users, 'user_1', '1234567'))
print(auth_user(users, 'user_2', '098765'))

# Первая функция со сложностью O(1) будет быстрее и эффективнее для данной задачи,
# т.к реализован поиск по ключу в словаре и без использования перебора последовательности
