"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

# Структура данных для хранения значений о пользователях

logins = ['Ann', 'Bob', 'Bill', 'Charli', 'Alex'] # список имен пользователей

# информация об аккаунте первый элемент подсписка - пароль, авторой активация учетки
accounts = [ ['god',True],          # Ann
             ['1234', False],       # Bob
              ['30.06.91',True],    # Bill
               ['kitty76', False],  # Charli
               ['root123', True]]   # Alex

storage = dict(zip(logins,accounts))

def log_in1(acc_info):
    """ Проверяет наличие пользователя в хранилице, статус учетной записи. Если пользователя 
    нет в системе - предлагаем зарегистрироваться 
    Сложность решения O(n) по результирующей, только ветвления без циклов """
    
    user = input('Укажите имя пользователя: ') # O(1)
    passw = input('Введите пароль: ')          # O(1)

    if user in acc_info.keys():       # линейная in list Q(n)
        inf = acc_info[user] # извлекаем инф. о пользователе Q(1)
        if passw == inf[0]:  # O(1)
            if inf[1]== False: #O(1)
                print(f'Уважаемый {user} Ваша учетная запись не активирована') # O(1)
                agr =str(input('Желаете пройти активацию (да/нет) \n')) #O(1)
                if agr.lower() == 'да':  #O(1)
                    acc_info[user] = [passw, True] # O(1)
                else: # у весех return O(1)
                     return print('Неактивный пользователь не может работать в системе')
            else:
                return print(f'Уважаемый {user}, добро пожаловать!')
        else:
            return print('Неправильно указан пароль')
    else:
        agr = input('Пользователя с таким именем не существует, зарегистрироваться ? (да/нет)')# O (N)
        if agr.lower() == 'да':
            passw = input('Придумайте пароль')
            acc_info[user] = [passw, False]
        else:
            return print('Незарегистрированный пользователь не может работать в системе')
    
    update_accounts(acc_info) # O(N)
    return

def log_in2(acc_info):
    """ Второй вариант решения задачи
    Общая сложность: O(n)
    """
    #функциия для работы с аккаунтом 
    def sing_in(usr, pas):
        """ Вход в систему зарегистрированных пользователей """
        if usr in acc_info.keys():       # линейная in list Q(n)
            inf = acc_info[user] # извлекаем инф. о пользователе Q(1)
            if pas == inf[0]:  # O(1)
                if inf[1]== False: #O(1)
                    print(f'Уважаемый {user}, Ваша учетная запись не активирована') # O(1)
                    agr =str(input('Желаете пройти активацию (да/нет) \n')) #O(1)
                    if agr.lower() == 'да': #O(1)
                        active(usr, pas)  
                    else:
                        return 
                else:
                    return print(f"Добро пожаловть {user}!") 
            else:
                return print('Указан неверный пароль войти! \n')
        else: 
            print("Пользователя с таким именем не существут ")
            agr =str(input('Желаете пройти регистрацию (да/нет) \n')) #O(1)
            if agr.lower() == 'да': #O(1)
                reg_in(usr)  
            else:
                return 
        return

    def reg_in(usr):
        """ Регистрация нового пользователя"""
        usr1 = input('Укажите имя пользователя: ') # O(1)
        pas1= input('Введите пароль: ')   

        acc_info[usr1] = [pas1, False]
        print("Вы зарегистрированы")
        return

    def active(usr, pas):
        """ Активация аккаунта пользователя"""
        acc= acc_info[usr]
        acc_info[usr] = [pas, True]
        print("Аккаунт активирован")
        return
       

    user = input('Укажите имя пользователя: ') # O(1)
    passw = input('Введите пароль: ')          # O(1)

    sing_in(user, passw)


    return 

def update_accounts(acc_info):
    """ Заглушка обновление хранилица аккаунтов"""
    pass
    

def main_loop():
    """ Клиентская часть приложения"""
    flag = True
    print(storage.items())
    menu = {1:log_in1, 2:log_in2}
    while flag:
        print('Выберите решение (введите номер): \n')   
        ch =  int(input("1. Певый способ решения \n2. Второй способ решения \n0 - для выхода \n"))

        if ch != 0:
            des = menu[ch]
            des(storage)
        else :
            flag = False
    
    return

# работа приложения

if __name__ == '__main__':
    main_loop()

# Сложность обоих решений одинаковая. Во втором решении код более структурированны. #Операции с аккаунтом выделены в отдельные методы, что улучшит поддержку кода и #добавление фукционала   
# Разбор домашнего задания уже посмотрел если будет возможсть доделаю без использования #промежуточных переменных.
