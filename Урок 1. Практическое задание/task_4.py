"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

users = {'user1': ['qwerty', True],
         'user2': ['123456', False],
         'user3': ['654321', True]}

user_list = [['user1', 'qwerty', True], ['user2', '123456', False], ['user3', '654321', True]]


# Вариант 1. Для хранения данных пользователей используется словарь.
# Сложность O(1). благодаря использованию словаря нет необходимости перебирать пользователей в цикле.
# Цикл при вводе пользователем ответа на сложность в данном случае не влияет.
def check_user(user_name, password):
    if users[user_name][0] == password:
        if users[user_name][1]:
            return True
        else:
            user_ans = ''
            while user_ans not in ['y', 'n']:
                user_ans = input('Учетная запись не активирована. Активировать? y/n: ')
                if user_ans not in ['y', 'n']:
                    print('Ошибка ввода. Попробуйте ещё раз.')
            if user_ans == 'y':
                users[user_name][1] = True
                return True
    return False


# Вариант 2. Для хранения данных пользователей используется список.
# Сложность O(N). Сложность стала линейной из-за перебора записей циклом for.
# Цикл при вводе пользователем ответа на сложность в данном случае не влияет.
def check_user2(user_name, password):
    for us in user_list:
        if us[0] == user_name and us[1] == password:
            if us[2]:
                return True
            else:
                user_ans = ''
                while user_ans not in ['y', 'n']:
                    user_ans = input('Учетная запись не активирована. Активировать? y/n: ')
                    if user_ans not in ['y', 'n']:
                        print('Ошибка ввода. Попробуйте ещё раз.')
                if user_ans == 'y':
                    us[2] = True
                    return True
    return False


# Вариант 1 предпочительнее, тк обладает меньшей сложностью и будет работать быстрее.
name = input('Введите имя полязователя: ')
pas = input('Введите пароль: ')
if check_user(name, pas):
    print('Добро пожаловать!')
else:
    print('Неверное имя пользователя или пароль')

name = input('Введите имя полязователя: ')
pas = input('Введите пароль: ')
if check_user2(name, pas):
    print('Добро пожаловать!')
else:
    print('Неверное имя пользователя или пароль')

