import random
"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


def registration(login, password, status='no'):     # регистрация пользователя
    data[login] = [password, status]                # O(1) - присваивание константы


def activation(login, password):                    # Сложность функции: O(len(...))
    if login in data:                               # O(len(...)) - сравнение значений
        if password == data[login][0]:              # O(len(...)) - сравнение значений
            data[login][1] = 'yes'                  # O(1) - присваивание константы


def authentication(login, password):
    if login in data and password == data[login][0] and data[login][1] == 'yes':   #O(len(...))-сравнение значений
        print('Вы прошли авторизацию')                      # O(1) - вывод

    if login in data and password != data[login][0]:        # O(len(...)) - сравнение значений
        raise SyntaxError('Вы ввели неверный пароль')       # O(1) - вывод

    if login in data and password == data[login][0] and data[login][1] == 'no': # O(len(...)) - сравнение значений
        print('Вам нужно подтвердить свою учетную запись. Для подтверждения нажмите "Y": ')     # O(1) - вывод
        answer = input()                                    # O(1) - ввод
        if answer == 'Y' or answer == 'y':                  # O(len(...)) - сравнение значений
            activation(login, password)                     # Вызов ф-ии со сложностью O(len(...))
        else:
            raise SyntaxError('Вы отказались от подтверждения. Попробуйте еще.')    # O(1) - вывод

    if login not in data:                                                       # O(len(...)) - сравнение значений
        raise SyntaxError('Пользователь не найден')                             # O(1) - вывод

    """Вывод: Данный алгоритм хорош тем, что в нем не используется цикл. Сложность данного алгоритма составляет:
    O(len(...))^2, что в итоге является O(1) - константной функцией"""


data = {}
registration('shavrinbs', 'qwerty')     # регистрируем пользователя
print(data)

authentication('shavrinbs', 'qwerty')   # проходим аутентификацию с подтверждением активации
print(data)
