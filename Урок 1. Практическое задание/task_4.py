"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


def auth1(user_lst, name, psw):
    """
    Использование встроенных функций.
    Согласно документации поиск по ключу имеет константную стоимость O(1)
    """
    if user_lst.get(name):
        if user_lst[name]['password'] == psw and user_lst[name]['act']:
            return 'Пользователь найден, доступ открыт'
        elif user_lst[name]['password'] == psw and not user_lst[name]['act']:
            return 'Пользователь найден, необходимо пройти активацию'
        elif user_lst[name]['password'] != psw:
            return 'Неверный пароль, доступ запрещен'
    else:
        return 'Пользователь не найден'


def auth2(user_lst, name, psw):
    """
    Поиск пользователя выполняется перебором в цикле,
    соответственно, стоимость линейная O(n)
    """
    for key, val in user_lst.items():
        if key == name:
            if val['password'] == psw and val['act']:
                return 'Пользователь найден, доступ открыт'
            elif val['password'] == psw and not val['act']:
                return 'Пользователь найден, необходимо пройти активацию'
            elif val['password'] != psw:
                return 'Неверный пароль, доступ запрещен'
    return 'Пользователь не найден'


Users = {'User_1': {'password': '1111', 'act': True},
         'User_2': {'password': '2222', 'act': False},
         'User_3': {'password': '3333', 'act': True},
         'User_4': {'password': '4444', 'act': True},
         'User_5': {'password': '5555', 'act': False}
         }

print(auth1(Users, 'User_1', '1111'))
print(auth1(Users, 'User_2', '1111'))
print(auth1(Users, 'User_7', '1111'))

print(auth2(Users, 'User_3', '3333'))
print(auth2(Users, 'User_4', '1111'))
print(auth2(Users, 'User1', '1111'))

# Первый вармант эффективнее, т.к. он имеет константную стоимость вне зависимости от количества пользователей.
# У второго варианта стоимость линейная и зависит от числа пользователей
