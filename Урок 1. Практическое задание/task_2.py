"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.

Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.

Примечание:
Построить список можно через генератор списка.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""
import random

def greedy_search(lst_obj):
    """ Реализует поиск минимального значения в списке путем сравнения каждого элемента 
    со всеми другими """

    min_el = lst_obj[0] # на старте присвоим переменной первое значение из списка

    for el in lst_obj: # перебираем список 
        for el2 in lst_obj:
            if el > el2: # сравниваем текущий элемент с каждым элементом списка
                if min_el > el2:
                    min_el = el2
                
    return min_el # после перебора в переменной должно остатся минимальное занчение

def lin_search(lst_obj):
    """ Поиск минимального элемента с линейной сложностью"""
    min = lst_obj[0]
    
    for el in lst_obj: # перебираем список
        if min > el:
            min = el
    return min # сложность должна стремится к 1/2*n


def bench_search(lst_obj):
    """ Реализует поиск минимального элемента в списке с линейной сложностью
    используя встроенную функцию"""
    return min(lst_obj) # втроенная функция оптимизировано до линейноq сложности (Таблица)

# клиентская часть

N = 10 # длинна массива

test_list = [random.randint(-100,100) for i in range(0,N)] # заполняем список сл. числами -100 до 100

print(test_list)

print(greedy_search(test_list))
print(lin_search(test_list))
print(bench_search(test_list))