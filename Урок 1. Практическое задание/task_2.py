"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.

Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.

Примечание:
Построить список можно через списковое включение.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""

lst3 = [55, 4, 3, 2, 14]


def min_lst(lst: int):
    """
    Ф-я поиска минимального значения для списка O(n), только type = int
    Сложность !!! O(1)
    """
    return min(lst)


print(min_lst(lst3))


# Алгоритм #1  Ф-я поиска минимального значения для списка O(n^2)
# Алгоритм в  виде функции, должен обеспечивать поиск минимального значения для списка.
# В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
# Сложность такого алгоритма: O(n^2) - квадратичная.
#

def lst_min_value(lst):
    """
    Решение через встроенные функции, без сравнения каждого числа со всеми.
    Сложность !!! O(n log n)
    """
    new_lst = []
    for i in lst:  # !!! O(n)
        new_lst.append(i)  # !!! O(1)

    new_lst.sort()  # !!! O(n log n)
    min_val = new_lst[0]
    return min_val  # !!! O(1)


print(lst_min_value(lst3))


def list_find_min_value(lst):
    """
    Решение через сравнение двух значений в списке
    Сложность !!! O(n)
    """
    func_lst = []
    for i in lst:  # !!! O(n)
        func_lst.append(i)
        if len(func_lst) > 1:  # !!! O(1)
            if func_lst[0] < func_lst[1]:
                func_lst.pop(1)  # !!!  O(n) тк вырезаем определенный индекс?
            else:
                func_lst.pop(0)
    return func_lst  # !!! O(1)


print('_____next algo_____')
print(lst_min_value(lst3))
print('_____next algo_____')
print(list_find_min_value(lst3))
