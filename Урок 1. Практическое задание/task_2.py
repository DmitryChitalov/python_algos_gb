import random

"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.
"""


def find_min_1(lst):  # пузырьковый алгоритм
    flag = True
    while flag:   # в худшем случает когда список отсортирован в обратном порядке имеет сложность O(n^2)
        flag = False
        for i in range(len(lst) - 1):
            if lst[i] > lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
                flag = True
    return lst[0]


"""
Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.
"""

# def find_min_3(lst):
#     min_number = lst[0]
#     for i in range(len(lst)):
#         if lst[i] < min_number: # в худшем случает когда надо пройти все элементы имеет сложность O(n^2)
#             min_number = lst[i]
#     return min_number


def find_min_2(lst):
    return min(lst)


"""
Примечание:
Построить список можно через генератор списка.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""


lst_elem = random.sample(range(0, 100), 10)
print(find_min_1(lst_elem))
print(find_min_2(lst_elem))
# print(find_min_3(lst_elem))
