"""
Задание 1.

Для каждой из трех задач выполнить следующее:

1) для каждой инструкции рядом в комментарии определите сложность этой инструкции
2) определите сложность алгоритма в целом

укажите сложность непосредственно в этом файле
точки, где нужно поработать вам, отмечены знаком '!!!'

Примечание:
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""

import random
import time


#############################################################################################
def check_1(lst_obj):
    """Функция должна создать множество из списка.

    Алгоритм 3:
    Создать множество из списка

    Сложность: логарифмическая O(n)
    """
    lst_to_set = set(lst_obj)  # сложность зависит от длинны аргумента, по идее должна быть линейная.
    return lst_to_set # константа


#############################################################################################
def check_2(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 1:
    Проходимся по списку и для каждого элемента проверяем,
    что такой элемент отстутствует
    в оставшихся справа элементах

    Сложность: !!!. итого : O(n*(2n+1)+1) или O(3) если выкинет сразу на первом шаге. по идее надо брать максимальныю
    Значит O((2n+1)^2+1) = O(4*n^2+2), константы отбрасываем, множитель наверное тоже - сложность квадратичная - O(n**2)
    """
    start_time= time.time()
    for j in range(len(lst_obj)):          # !!! цикл - n, длина списка  конатснта, итого n+1
        if lst_obj[j] in lst_obj[j+1:]:    # !!! тут мы 2 раза срезаем, поэтому n+n = 2n. Также  тут проверка условия,
            # по идее сложность соcтоит из 2х частей:
            # та которая выполнится если false или последний return  если элементы зазличаются.
            # в последнем случае будет константа, так что ей можно принебречь как явно наименьшей
            # частью сложности. В проверке условия само сравенение будет 1. Итого 2n+1
            return False                   # !!! тут константа
    end_time = time.time()
    return True,  end_time - start_time                         # !!! и тут константа


#############################################################################################
def check_3(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 2:
    Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
    Если присутствуют дубли, они будут находиться рядом.

    Сложность: !!!должно быть что-то такое O(max(1+n*log(n)+(n+1)*(2n+1), 1))
    очевидно что 1 заведомо меньше левой части сравнения, отбросм ее.
    1+n*log(n)+(n+1)*(2n+1) = 2n^2+n+2n+1+1+n*log(n)= 2n^2+3n+n*log(n) +2.
    Итого максимальная сложность O(2n**2) - квадратичная. Хотя и подозреваю что должна быть
    линейнологарифмическая, но так получилось.
    И замеры времени подтвердели что check_3 выполняестя гораздо быстрее чем
    check_2. цикл выполняется безусловно, значит дело в срезе, почему-то он в этот раз не влияет на сложность,
    вероятно из-за сортировки. Если это действительно так то в цикле будет сложность не квадратичная,
     а линейная и тогда  сложность в этой функции O(n*log(n))


     PS:посмотрел видео и понял что затупил. Это же не срез а обращение по индексу, поэтому оно O(1).
    """
    start_time = time.time()
    lst_copy = list(lst_obj)                 # !!!присваивание, значит константа
    lst_copy.sort()                          # !!!сортировка, n*log(n)
    for i in range(len(lst_obj) - 1):        # !!!n -цикл по длине списка +1 - константа на определение длины
        if lst_copy[i] == lst_copy[i+1]:     # !!! тут мы как и впредыдущей функции дважды срезаем по элементу списка
            # стало быть 2n
            return False                     # !!! константа
    end_time = time.time()
    return True,  end_time - start_time                                # !!! константа

#############################################################################################


for j in (50, 500, 1000, 5000, 1000):  #
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = random.sample(range(-100000, 100000), j)

print(check_1(lst))
print(check_2(lst))
print(check_3(lst))
