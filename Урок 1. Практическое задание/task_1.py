"""
Задание 1.

Для каждой из трех задач выполнить следующее:

1) для каждой инструкции рядом в комментарии определите сложность этой инструкции
2) определите сложность алгоритма в целом

укажите сложность непосредственно в этом файле
точки, где нужно поработать вам, отмечены знаком '!!!'

Примечание:
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""

import random

#############################################################################################
def check_1(lst_obj):
    """Функция должна создать множество из списка.

    Алгоритм 3:
    Создать множество из списка

    Сложность: 0(n).
    """
    lst_to_set = set(lst_obj) # n = кол-во элементов в передаваемом списке
    return lst_to_set


#############################################################################################
def check_2(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 1:
    Проходимся по списку и для каждого элемента проверяем,
    что такой элемент отстутствует
    в оставшихся справа элементах

    Сложность: O(n**2)
    """
    # 1) т.к. имемм 2 цикла (for + if), и что бы перебрать весь список провоим такие операции
    # for заходит в список с n элементов и при каждом заходе выполняет проверку: 
    #   if проверяет каждый n элемент и какждый раз при работе for
    #  => for  работает по линейной сложности, анализирую какждый элемент и 
    #   if работает работает также, но уже проводя анлиз каждого элемента с предыдущим
    # т.о. скорость будет зависеть от входящих в список элементов, точнее от их кол-ва
    # => в данном примере циклы for и if будут иметь сложность О(n), привалирующую над константой в return.
    # 
    # 2)  что бы оценить весь алгоритм, попробую составить формулу: 
    # О (n*n*1*1) == (n*n) == (n**2) => сложность всего алгоритма О(n**2) - квадратичная

    for j in range(len(lst_obj)):          # перебор каждого элемента, поэтому O(n)
        if lst_obj[j] in lst_obj[j+1:]:    # перебор каждого элемента, поэтому O(n)
            return False                   # в данном случае опредлено услвоие входных данных, поэтому O(1)
    return True                            # в данном случае опредлено услвоие входных данных, поэтому O(1)


#############################################################################################
def check_3(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 2:
    Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
    Если присутствуют дубли, они будут находиться рядом.

    Сложность:   О(n log n) 
    """
    lst_copy = list(lst_obj)                 # О(1)
    lst_copy.sort()                          # О(n log n) - преобладающая 
    for i in range(len(lst_obj) - 1):        # O(n)
        if lst_copy[i] == lst_copy[i+1]:     # O(n)
            return False                     # O(1)
    return True                              # O(1)

#############################################################################################


for j in (50, 500, 1000, 5000, 1000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = random.sample(range(-100000, 100000), j)

print(check_1(lst))
print(check_2(lst))
print(check_3(lst))
