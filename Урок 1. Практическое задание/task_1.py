"""
Задание 1.

Для каждой из трех задач выполнить следующее:

1) для каждой инструкции рядом в комментарии определите сложность этой инструкции
2) определите сложность алгоритма в целом

укажите сложность непосредственно в этом файле
точки, где нужно поработать вам, отмечены знаком '!!!'

Примечание:
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""

import random


#############################################################################################
def check_1(lst_obj):
    """Функция должна создать множество из списка.

    Алгоритм 3:
    Создать множество из списка

    Сложность: O(N)+1 линейная - зависит от длинны полученного списка .
    """
    lst_to_set = set(lst_obj)  # O(N)- линейная O(len()) - таблица
    return lst_to_set          # 1 - константная - оператор вывода


#############################################################################################
def check_2(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 1:
    Проходимся по списку и для каждого элемента проверяем,
    что такой элемент отстутствует
    в оставшихся справа элементах

    Сложность: O(N)*1O(N)+O(1)+O(1) -> O(n^2) квадратичная сложность из-за цикла
    """
    for j in range(len(lst_obj)):          # O(N) линейная - таблица - цикл без вложенных циклов
        if lst_obj[j] in lst_obj[j+1:]:    # 1O(N) - условный оператор константная x in list линейная
            return False                   # O(1) константная - оператор вывода
    return True                            # O(1) константная - оператор вывода


#############################################################################################
def check_3(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 2:
    Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
    Если присутствуют дубли, они будут находиться рядом.

    Сложность: 1+NLogN+N*1+1+1 = N*logN+N+3 -> O(N*logN)
    """
    lst_copy = list(lst_obj)                 # O(1) константная - таблица
    lst_copy.sort()                          # O(NlogN) - таблица - встроенная сортировка
    for i in range(len(lst_obj) - 1):        # O(N) линейная - цикл без вложенных циклов
        if lst_copy[i] == lst_copy[i+1]:     # O(1) - константная - сравнение двух переменных
            return False                     # O(1) - константная - оператор вывода
    return True                              # O(1) - константная - оператор вывода

#############################################################################################


for j in (50, 500, 1000, 5000, 1000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = random.sample(range(-100000, 100000), j)

print("Длинна массива",len(lst))

print(check_1(lst))
print(check_2(lst))
print(check_3(lst))
