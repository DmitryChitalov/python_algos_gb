"""
Задание 1.

Для каждой из трех задач выполнить следующее:

1) для каждой инструкции рядом в комментарии определите сложность этой инструкции
2) определите сложность алгоритма в целом

укажите сложность непосредственно в этом файле
точки, где нужно поработать вам, отмечены знаком '!!!'

Примечание:
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""

import random


#############################################################################################
def check_1(lst_obj):
    """Функция должна создать множество из списка.

    Алгоритм 3:
    Создать множество из списка

    Сложность: линейная - O(len(..)).
    """
    lst_to_set = set(lst_obj)  # зависит от длины O(len(..))
    return lst_to_set


#############################################################################################
def check_2(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 1:
    Проходимся по списку и для каждого элемента проверяем,
    что такой элемент отстутствует
    в оставшихся справа элементах

    Сложность:
                O(N+1) * (O(N) + O(N-(j+1)) ) *1 = (N + 1) * (N - N*j) = N^2 + N - N^2*j - N*j... Что за бред я считаю?
                O(N+1) - гарантированная значимость
                поиск - значимость гарантирована, срез - значимость снижается с каждым шагом
                Получается цикл с поиском дают квадратическую функцию, сложность которай линейно снижается срезом
                Если предположить что j это пропускаемый процент от общего размера списка, то получается что-то адекватное,
                но это не точно
                В самом худшем виде выйдет N^2 + N, то есть сложность квадратичная... вроде

    """
    for j in range(len(lst_obj)):          # цикл даёт O(N) и len(..) даёт O(1) итого здесь O(N + 1)
        if lst_obj[j] in lst_obj[j+1:]:    # поиск даёт O(N), срез даёт O(N - (j+1)), и как это по итогу считать?..
            return False                   # возврат это фактически присваивание, сложность O(1)
    return True                            # также как выше, работает один из возвратов


#############################################################################################
def check_3(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 2:
    Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
    Если присутствуют дубли, они будут находиться рядом.

    Сложность: O(N) + O(N * log N) + O(N - 1)*O(2)= N + N*log N + 2*N - 2 = N*(3 + log N) - 2
                тут есть и линейная часть, и лагорифмическая, учтя их связи приходим к преобладанию лагорифмической
    """
    lst_copy = list(lst_obj)                 # копирование аналогично срезу, что даёт нам O(N)
    lst_copy.sort()                          # O(N * log N), здесь вспомнилось "да где тебе пригодится эта математика?!"
    for i in range(len(lst_obj) - 1):        # len даёт O(1), цикл даёт O(N - 1), ну, мы же не весь список проходим
        if lst_copy[i] == lst_copy[i+1]:     # здесь получается O(2), т.к. смотрим всего 2 элемента, а не весь список
            return False                     # присваивание O(1)
    return True                              # O(1)

#############################################################################################


for j in (50, 500, 1000, 5000, 1000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = random.sample(range(-100000, 100000), j)

print(check_1(lst))
print(check_2(lst))
print(check_3(lst))
