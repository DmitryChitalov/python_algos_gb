"""
Задание 1.

Для каждой из трех задач выполнить следующее:

1) для каждой инструкции рядом в комментарии определите сложность этой инструкции
2) определите сложность алгоритма в целом

укажите сложность непосредственно в этом файле
точки, где нужно поработать вам, отмечены знаком '!!!'

Примечание:
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""

import random


#############################################################################################
def check_1(lst_obj):
    """Функция должна создать множество из списка.

    Алгоритм 3:
    Создать множество из списка

    Сложность: !!! - O(n) - линейная сложность, тк set() - встроенная ф-ция и ее сложность 
        зависит от длинны списка lst_obj.
    """
    lst_to_set = set(lst_obj)  # !!! O(len(lsr_obj)) = O(n), где n - длина списка lst_obj
    return lst_to_set


#############################################################################################
def check_2(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 1:
    Проходимся по списку и для каждого элемента проверяем,
    что такой элемент отстутствует
    в оставшихся справа элементах

    Сложность: !!! if lst_obj[j] in lst_obj[j+1:]: вложен в цикл, чья сложность линейная, 
        поэтому сложность квадратичная O(n^^2).
    """
    for j in range(len(lst_obj)):          # !!! O(n) - линейная, n - длина списка
        if lst_obj[j] in lst_obj[j+1:]:    # !!! - поиск в списке - линеная
            return False                   # !!! - константная сложность
    return True                            # !!! - константая сложность


#############################################################################################
def check_3(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 2:
    Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
    Если присутствуют дубли, они будут находиться рядом.

    Сложность: !!! по доминанте - сложность O(N*logN) - линейно-логарифмическая
    """
    lst_copy = list(lst_obj)                 # !!! линейная - зависит от длины аргумента
    lst_copy.sort()                          # !!! N*logN - линейно-логарифмическая сложность
    for i in range(len(lst_obj) - 1):        # !!! линейная = O(n)? где n=len(lst_obj) - 1
        if lst_copy[i] == lst_copy[i+1]:     # !!! константа
            return False                     # !!! константа
    return True                              # !!! константа

#############################################################################################


for j in (50, 500, 1000, 5000, 1000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = random.sample(range(-100000, 100000), j)

print(check_1(lst))
print(check_2(lst))
print(check_3(lst))
