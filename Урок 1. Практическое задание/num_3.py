"""
Задание 3.
Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему
Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

d =  {'Samsung': 77, 'LG': 33, 'Apple': 88, 'Xiaomi': 89, 'Huawei': 45}

# первый вариант
# T(n) = 10 * O(n) + O(1)
my_list = []
# переношу значения из словаря в сисок
for value in d.keys():         #  O(n)
    my_list.append(d[value])   # O(1)
# нахожу три максимальных значения в полученном списке
m1 = max(my_list)    # O(n)
my_list.remove(m1)   # O(n)
m2 = max(my_list)    # O(n)
my_list.remove(m2)   # O(n)
m3 = max(my_list)    # O(n)
# print(m1, m2, m3)
# сравниваю значения из словаря со значениями из списка, если они равны, вывожу на экран
for values in d.keys():     # O(n)
    if d[values] == m1:     # O(1)
        print(values, d[values])
    elif d[values] == m2:   # O(1)
        print(values, d[values])
    elif d[values] == m3:   # O(1)
        print(values, d[values])


# второй вариант
def top(sorted_d):
    a = sorted(sorted_d, key=d.get, reverse=True)[:3]  # O(nLog n)
    return a
# второй вариант прдпочтительнее, т.к.

print(top(d))



