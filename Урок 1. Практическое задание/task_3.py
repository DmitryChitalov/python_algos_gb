"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

companies = {
    'COMP1': 1500,
    'COMP2': 650,
    'COMP3': 1200,
    'COMP4': 1230
}

# 1 способ сложность O(log n)

dict_to_list = list(companies.items())
dict_to_list.sort(key=lambda a: a[1], reverse=True)
for a in range(3):
    print(dict_to_list[a][0], ':', dict_to_list[a][1])


# 2 способ сложность O(n) лучше первого, нет манипуляций со списком

def big_ones(comps):
    max_from_list = {}
    list_c = dict(comps)
    for a in range(2):
        maximum = max(list_c.items(), key=lambda a: a[1])
        del list_c[maximum[0]]
        max_from_list[maximum[0]] = maximum[1]
    return max_from_list

print(big_ones(companies))

