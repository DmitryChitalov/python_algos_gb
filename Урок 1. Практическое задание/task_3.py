"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""
import collections

companies = {
    'First': 1000,
    'Second': 3000,
    'Third': 5000,
    'Fourth': 9000,
    'Fifth': 500
}

# Алгоритм O(n^2)
companies_2 = companies.copy()
max_company = ''
max_companies = {}
num = 0

while len(max_companies) < 3:
    for k, v in companies_2.items():
        if v > num:
            num = v
            max_company = k
    max_companies[max_company] = companies_2[max_company]
    companies_2.pop(max_company)
    num = 0

print(len(max_companies))
print(max_companies)

# Конастантная. Этот подход более эффективен, так как занимает конкретное коллиество
# действий вне зависимости от вх. элементов.
companies_3 = companies.copy()
max_companies_2 = collections.Counter(companies_3)
max_companies_2 = max_companies_2.most_common(3)
print(max_companies_2)




