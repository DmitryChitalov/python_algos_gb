"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""


def search_max_values(d, n):  # итоговая сложность: линейно-логарифмическая (n log n)
    l = list(d.items())  # сложность: линейная (n)
    l.sort(key=lambda i: i[1], reverse=True)  # сложность: линейно-логарифмическая (n log n)
    result = []  # сложность: константная (1)
    for i in l[:n]:  # сложность: константная (1) * 3
        result.append(i[0])  # сложность: константная (1) * 3
    return result  # сложность: константная (1)


def search_max_values_v2(d, n):  # итоговая сложность: линейная (n)
    l = list(d.items())  # сложность: линейная (n)
    result = []  # сложность: константная (1)
    for i in range(n):  # сложность: константная (1) * 3
        max_value = l[0]  # сложность: константная (1)
        for y in l[1:]:  # сложность: линейная (n)
            if y[1] > max_value[1]:  # сложность: константная (1)
                max_value = y  # сложность: константная (1)
        result.append(max_value[0])  # сложность: константная (1)
        l.remove(max_value)  # сложность: константная (1)
    return result