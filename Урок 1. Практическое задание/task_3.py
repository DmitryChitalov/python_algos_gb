"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""
# порядок должен быть такой: Comp_4, Comp_2, Comp_6

def sort_by_num(item):
    return item[1]
# Метода намба 1
data = [
    ('Comp_1', 1500),
    ('Comp_2', 21500),
    ('Comp_3', 1050),
    ('Comp_4', 100500),
    ('Comp_5', 10500),
    ('Comp_6', 15000),
    ('Comp_7', 5000)]

data.sort(key=sort_by_num)      # O(N * log N) если верить методичке
print(data[:-4:-1])             # не запутаться бы O((-1) - (-4)) = O(3) ... логично
# Метода намба 2
data_2 = {
    'Comp_1': 1500,
    'Comp_2': 21500,
    'Comp_3': 1050,
    'Comp_4': 100500,
    'Comp_5': 10500,
    'Comp_6': 15000,
    'Comp_7': 5000}

tmp = data_2.items()                                        # O(N) судя по таблице
print(sorted(tmp, key=sort_by_num, reverse=True)[:3])       # есть сортировка, значит минимум O(N), плюс срез O(3)
"""
    Общая сложность выполнения 1-м методом: O(N * log N) + O(3) = N * log N + 3
    Общая сложность выполнения 2-м методом: O(N) + O(N) + O(3) = 2 * N + 3
    Преимущества мне не совсем очевидны, но логарифм не особо симпатизирует,
    чем больше выборка, тем больше будет расхождение
    Вариант без логарифма выглядит проще и эффективнее, но это на больших выборках
    А там где log N будет меньше 2, будет правильным применять первый метод.
    
    Но это всё равно не верно, потому что я не учитываю ключ-функцию, а она 1000000% вносит свой вклад в работу кода 
"""
