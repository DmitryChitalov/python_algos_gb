"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

company_data = {
    'hp': 50000,
    'Dell': 20000,
    'Google': 30000,
    'Samsung': 40000,
    'Microsoft': 10000
}


def highest_profits_1(data, num_of_data):
    return sorted(data.values(), reverse=True)[0:num_of_data]


# O(n) - создание нового списка через - data.values()
# потом его сортировка - O(n log n)
# делаем его срез + O(n) ведь чем больше значений, тем больше нужно срезать, по сути это поэлементное создание
# нового списка. Итого:
# O(n) + O(n log n) + O(n) = O(n log n)


def highest_profits_2(data, num_of_data):
    list_of_profits = []
    max_list = []
    for profit in data.values():            # O(n) - пройтись по всем эл-ам списка
        list_of_profits.append(profit)      # O(1) - добавить кажд эл-т в новый список

    for _ in range(num_of_data):            # O(n) - сделать необходимое кол-во итераций
        max_profit = max(list_of_profits)   # O(n) проходим по всему списку в поисках мах значения
        max_list.append(max_profit)         # O(1) добавить его в список
        list_of_profits.remove(max_profit)  # O(n) удаляем его из общего списка значение найдя его в списке
    return max_list  # O(1)
#  O(n) * O(1) + O(n) * ( O(n) + O(n)) = O(n**2)


"""Вывод:
в первом случае решение будет более эффективным т.к. сложность O(n log n) меньше, чем квадратичная 
"""

print(highest_profits_1(company_data, 3))
print(highest_profits_2(company_data, 3))
