"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""
my_dict = {'company': 100, 'company2': 400, 'company3': 50, 'company4': 700, 'compay5': 900, 'company6': 200}
# O(N log N))
def company_profit(my_dict):
    profit = list(my_dict.items())  # O(len(...))
    profit.sort(key=lambda i: i[1])  # O(N log N)
    return profit[3:]  # или profit[-3:]	# O(N)


print(company_profit(my_dict))

# O(N**2), хотя есть предположение что это O(N)
for i in range(3):
    profit = max(my_dict.values())  # O(1)
    company = ''.join([i for i in my_dict if my_dict[i] == profit])  # O(N)
    print(f'{company} : {profit}')
    del my_dict[company]
# O(N log N) будет работать эффективнее, чем O(N**2), но медленнее, чем O(N)