"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""
#1 - опускаем все константы, получаеися O(N) - линейная. Эфф. Если смысл определения верен, в чем сомнения есть.
lst_max_profit = [] # O(1)
dict = {             # O(1)
    'firm_1': 50000,
    'firm_2': 60000,
    'firm_3': 10000,
    'firm_4': 2000,
    'firm_5': 2000
}
i = 0                  #O(1)
while i <= 2:          #O(N)
    lst_max_profit.append(max(dict, key=dict.get))  #O(1)
    dict.pop(max(dict, key=dict.get))               #O(1)
    i+=1                                            #O(1)
print(lst_max_profit);                              #O(1)

#2 -
lst_max_profit2=[]   # O(1)
dict2 = {             # O(1)
    'firm_1': 50000,
    'firm_2': 60000,
    'firm_3': 10000,
    'firm_4': 2000,
    'firm_5': 2000
}
print(sorted(dict2.values())[-3:]); #O(N logN) Получается линейно-логарифмическая, менее эфф, чем линейная


