"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

'Формируем словарь название компании : годовая прибыль'
comp_dict = {'Газпром': 500000,
             'Северсталь': 300000,
             'Лукойл': 400000,
             'Сбербанк': 250000,
             'Apple': 200000}

'''Реализация алгоритма сортировки словаря через список. Сложность O(n * log(n))'''

'Представляем словарь в виде списка кортежей. O(len(comp_dict_items())'
comp_list = list(comp_dict.items())

'Сортируем список по значению с помощью list.sort(). O(n * log(n))'
comp_list.sort(key=lambda i: i[1])

'Выводим три компании с наибольшей годовой прибылью. O(1)'
print(comp_list[2:])

'''Реализация сортировки словаря через модуль operator. Сложность O(n * log(n))'''

from operator import itemgetter

'сортируем словарь с помощью встроенной функции sorted() и оператора itemgetter(). O(n * log(n))'
sorted_comp_dict = sorted(comp_dict.items(), key=itemgetter(1))

'Выводим три компании с наибольшей годовой прибылью. O(1)'
print(sorted_comp_dict[2:])

'''По своей эффективности решения идентичны, но первое решение не подразумевает импорт модуля, 
 таким образом с точки зрения использования ресурсов является более оптимальным'''
