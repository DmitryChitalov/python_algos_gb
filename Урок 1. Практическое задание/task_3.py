"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

companies_profit = {'Альфа': 5000, 'Люкс': 2000, 'Элит Профит': 3000, 'Премиум-Престиж': 4000, 'Приоритет-Премиум': 1000}

""" Решение 1. Сложность O(n*log(n)) за счет функции sort."""

profit_values = list(companies_profit.values())
profit_values.sort(reverse=True)
max_profits = list()
i = 0
j = 0
while j < 3:
    max_profits.append(profit_values[i])
    i += 1
    j += 1

best_companies = list()
for i in companies_profit.items():
    for j in max_profits:
        if i[1] == j:
            best_companies.append(i[0])
print(best_companies)

""" Решение 2. Сложность O(n*log(n)). При одинаковой сложности O, второе решение лучше, т.к. легче читается """

profit_values = list(companies_profit.values())
profit_values.sort(reverse=True)
max_profits = list()
i = 0
j = 0
while j < 3:
    max_profits.append(profit_values[i])
    i += 1
    j += 1

best_companies2 = {key:value for (key,value) in companies_profit.items() if value in max_profits}
print(best_companies2)
