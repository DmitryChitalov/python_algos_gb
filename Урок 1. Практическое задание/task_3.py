"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""


"""
search_2 оптимальнее исходя из расчета сложности О-большое, потребуется меньше времени
"""

def search_1(storage):
    """
    сложность NlogN - линейно-логарифмическая
    """
    storage.sort(key=lambda x: x["profit"], reverse=True)
    return list(storage[0:3])


def search_2(storage):
    """
    сложность 3(N+1) ~ N - линейная
    """
    var_list = []
    for i in range(3):
        x = {}
        for item in storage:
            if len(x) == 0 and item not in var_list:
                x = item
            if len(x) > 0 and item["profit"] > x["profit"] and item != x and item not in var_list:
                x = item
        var_list.append(x)
    return var_list


storage = [{"name": "name_1", "profit": 100}, {"name": "name_2", "profit": 50}, {"name": "name_3", "profit": 200},
           {"name": "name_4", "profit": 150}, {"name": "name_5", "profit": 100}, {"name": "name_6", "profit": 400}]

x = search_1(storage)
print(x)

x = search_2(storage)
print(x)
