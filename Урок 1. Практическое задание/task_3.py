"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

companies_dict = {
    'Company1': 10_000,
    'Company2': 40_000,
    'Company3': 25_000,
    'Company4': 32_000,
    'Company5': 28_000,
    'Company6': 17_000,
}


def max_search1(dic, top):
    """ О(n**2) цикл в цикле.
        Перебираем каждую пару ключ-значение из словаря.
        Если значение больше предыдущей пары и ключ ещё не содержится в результате, то добавляем в результат.
        Повторяем top (второй аргумент функции) раз.

        Квадраимчная функция неэффективная из-за вложенного цикла, занимет много памяти.
    """
    result = {}
    for n in range(top):
        max_val = 0
        top_company = ''
        for key, value in dic.items():
            if value > max_val and key not in result.keys():
                max_val = value
                top_company = key
        result[top_company] = max_val
    return result


def max_search2(dic, top):
    """ О(n log n)
        Генерируем список на основе полученного словаря, сортируем по убыванию,
        возвращаем только топ (второй агрумент функции).

        Более эффективное решение, занимает меньше памяти, количество операций значительно меньше при равном n
    """
    result = [[value, key] for key, value in dic.items()]
    result.sort(reverse=True)
    return result[0:top]


def max_search3(dic, top):
    """ О(n)
        Ищем максимум среди текущих значений словаря, добавляем эту пару в итог и удаляем их основного списка.
        Повторяем нужное количество раз (второй агрумент функции).

        Самое эффективное решение из представленных, задействовано минимум памяти, максимальная скорость выполнения.
    """
    start_dic = dic.copy()
    result = []
    for i in range(top):
        maximum = max(start_dic.items(), key=lambda el: el[1])
        start_dic.pop(maximum[0])
        result += maximum
    return result


print(max_search1(companies_dict, 3))
print(max_search2(companies_dict, 3))
print(max_search3(companies_dict, 3))
