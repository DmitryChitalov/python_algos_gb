"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

firms_dict = {'Фирма №1': 123, 'Фирма №2': 132, 'Фирма №3': 678, 'Фирма №4': 12, 'Фирма №5': 45, 'Фирма №6': 526,
              'Фирма №7': 111, 'Фирма №8': 9}


# Вариант 1. Сложность: O(n*log n)
def find_profit1(any_dict):
    companies_lst = sorted(any_dict.items(), key=lambda x: x[1], reverse=True)  # O(n*log n)
    companies_3_rich = [(name, profit) for (name, profit) in companies_lst][:3]  # O(n) + O(n)
    return [el[0] for el in companies_3_rich]  # O(1) + O(n)


# Вариант 2. Сложность: O(n^2)
def find_profit2(any_dict):
    profits = []
    for name, profit in any_dict.items():
        profits.append(any_dict[name])  # O(n)
    profits.sort(reverse=True)  # O(n*log(n))
    profits = profits[:3]  # O(n)
    profitable = []  # O(n)
    for el in profits:  # O(n^2)
        for name, profit in any_dict.items():
            if profit == el:
                profitable.append(name)  # O(n)
    return profitable


print(f'Три самых прибыльных компании: {find_profit1(firms_dict)} Вариант 1 лучше Сложность: O(n*log n)')
print(f'Три самых прибыльных компании: {find_profit2(firms_dict)} Вариант 2 хуже Сложность: O(n^2)')
