                    """ Домашнее задание к уроку № 2 """

# ################################### 1 ################################### #

"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, /
- условие завершения рекурсии - введена операция 0

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
"""


def calc(operation, a, b):
    if operation == '+':
        print(f"Ваш результат {a + b}")
    elif operation == '-':
        print(f"Ваш результат {a - b}")
    elif operation == '*':
        print(f"Ваш результат {a * b}")
    elif operation == '/':
        try:
            print(f"Ваш результат {a / b}")
        except ZeroDivisionError:
            print("Деление на 0 невозможно.")


def action():
    operation = input("Введите операцию (+, -, *, / или 0 для выхода): ")
    if operation == '0':
        return print("Программа завершена.")
    else:
        if operation in "+-*/":
            try:
                num_1 = int(input("Введите первое число: "))
                num_2 = int(input("Введите второе число: "))
            except ValueError:
                print("Вы ввели не число.")
                return action()
            calc(operation, num_1, num_2)
            return action()
        else:
            print("Введен неверный символ.")
        return action()


action()


# ################################### 2 ################################### #

"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def f_recursion(number, even=0, odd=0):
    if number == 0:
        return even, odd
    else:
        remainder_number = number % 10
        number = number // 10
        if remainder_number % 2 == 0:
            even += 1
            return f_recursion(number, even, odd)
        else:
            odd += 1
            return f_recursion(number, even, odd)


try:
    in_num = int(input("Введите натуральное число: "))
    print(f"Количество четных и нечетных цифр в числе равно: {f_recursion(in_num)}")
except ValueError:
    print("Это не число!")


# ################################### 3 ################################### #

"""
3.	Сформировать из введенного числа обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486,
 то надо вывести число 6843.

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число, которое требуется перевернуть: 123
Перевернутое число: 321
"""


def f_recursion(number, flip=0):
    if number == 0:
        return flip
    else:
        flip = (flip * 10) + (number % 10)
        number = number // 10
        return f_recursion(number, flip)


try:
    in_num = int(input("Введите число: "))
    print(f"Перевернутое число: {f_recursion(in_num)}")
except ValueError:
    print("Это не число!")


# ################################### 4 ################################### #

"""
4.	Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
Количество элементов (n) вводится с клавиатуры.

Пример:
Введите количество элементов: 3
Количество элементов - 3, их сумма - 0.75

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def f_recursion(i, number, counter, sum_num):
    if i == counter:
        print(f"Сумма {counter} элементов, равна {sum_num}")
    elif i < counter:
        next_number = number / 2 * -1
        sum_num += number
        return f_recursion(i + 1, next_number, counter, sum_num)


try:
    n = int(input("Введите количество элементов: "))
    f_recursion(0, 1, n, 0)
except ValueError:
    print("Это не число!")


# ################################### 5 ################################### #

"""
5.	Вывести на экран коды и символы таблицы ASCII, начиная с символа
под номером 32 и заканчивая 127-м включительно.
Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.

Пример:
32 -   33 - ! 34 - " 35 - # 36 - $ 37 - % 38 - & 39 - ' 40 - ( 41 - )
42 - * 43 - + 44 - , 45 - - 46 - . 47 - / 48 - 0 49 - 1 50 - 2 51 - 3
52 - 4 53 - 5 54 - 6 55 - 7 56 - 8 57 - 9 58 - : 59 - ; 60 - < 61 - =
62 - > 63 - ? 64 - @ 65 - A 66 - B 67 - C 68 - D 69 - E 70 - F 71 - G
72 - H 73 - I 74 - J 75 - K 76 - L 77 - M 78 - N 79 - O 80 - P 81 - Q
82 - R 83 - S 84 - T 85 - U 86 - V 87 - W 88 - X 89 - Y 90 - Z 91 - [
92 - \ 93 - ] 94 - ^ 95 - _ 96 - ` 97 - a 98 - b 99 - c 100 - d 101 - e
102 - f 103 - g 104 - h 105 - i 106 - j 107 - k 108 - l 109 - m 110 - n 111 - o
112 - p 113 - q 114 - r 115 - s 116 - t 117 - u 118 - v 119 - w 120 - x 121 - y
122 - z 123 - { 124 - | 125 - } 126 - ~ 127 - 

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def f_recursion(from_symbol, to_symbol, output_str=''):
    for i in range(from_symbol, to_symbol):
        if i <= last_number:
            output_str += f'{i:3} - {chr(i)} '
    print(output_str)
    if to_symbol < last_number:
        return f_recursion(from_symbol + step, to_symbol + step)


first_number = 32
last_number = 127
step = 10

f_recursion(first_number, first_number + step)
