"""
3. Массив размером 2m + 1, где m – натуральное число, заполнен случайным образом.
Найдите в массиве медиану. Медианой называется элемент ряда, делящий его на
две равные части: в одной находятся элементы, которые не меньше медианы,
в другой – не больше медианы.

Задачу можно решить без сортировки исходного
массива.

Но если это слишком сложно, то используйте метод сортировки,
который не рассматривался на уроках: Шелла, Гномья, ...

arr[m]
"""


from statistics import median
from random import randint


def gnome_sort(lst):
    i = 1
    l = len(lst)
    while i < l:
        if lst[i - 1] <= lst[i]:
            i += 1
        else:
            lst[i], lst[i - 1] = lst[i - 1], lst[i]
            i -= 1
            if i == 0:
                i = 1
    return lst


m = input('Введите целое число - количество элементов в полумассиве: _')
while not m.isdecimal():
    m = input('Вы ошиблись! Введите целое число - количество элементов полумассива: _')
m = int(m)
x = 2 * m + 1
my_list = [randint(0, 50) for i in range(x)]
my_list_1 = my_list.copy()
my_list_2 = my_list.copy()

print (f' Это начальный сгенерированный список: {my_list}')
print (f' Это медиана сформированного необработанного списка {my_list[m]}')
print (f' Это проверка правильной медианы при помощи median - медиана равна: {median(my_list_2)}')
print (f' Это отсортированный  список методом Гномья сортировка: {gnome_sort(my_list_1)}')
print(f' Это проверка, что список не изменился: {my_list}')

def sear_med(lst):
    i = 0
    while i <= len(lst)-1:
        if i < m:
            if lst[i] < lst[m]:
                i += 1
            else:
                lst[i], lst[m] = lst[m], lst[i]
                i -= 1
                if i == -1:
                    i = 0
        else:
            if lst[i] < lst[m]:
                lst[i], lst[m] = lst[m], lst[i]
                i = i -i
            else:
                i += 1
    return lst


print (f' Это обработанный список без сортировки: {sear_med(my_list)}')
print (f' Это медиана обработанного списка без сортировки: {my_list[m]}')

"""
Введите целое число - количество элементов в полумассиве: _5
 Это начальный сгенерированный список: [3, 15, 44, 47, 13, 48, 0, 22, 41, 28, 38]
 Это медиана сформированного необработанного списка 48
 Это проверка правильной медианы при помощи median - медиана равна: 28
 Это отсортированный  список методом Гномья сортировка: [0, 3, 13, 15, 22, 28, 38, 41, 44, 47, 48]
 Это проверка, что список не изменился: [3, 15, 44, 47, 13, 48, 0, 22, 41, 28, 38]
 Это обработанный список без сортировки: [0, 3, 15, 22, 13, 28, 48, 47, 44, 41, 38]
 Это медиана обработанного списка без сортировки: 28
 
 
 Введите целое число - количество элементов в полумассиве: _4
 Это начальный сгенерированный список: [49, 46, 18, 42, 9, 48, 10, 7, 43]
 Это медиана сформированного необработанного списка 9
 Это проверка правильной медианы при помощи median - медиана равна: 42
 Это отсортированный  список методом Гномья сортировка: [7, 9, 10, 18, 42, 43, 46, 48, 49]
 Это проверка, что список не изменился: [49, 46, 18, 42, 9, 48, 10, 7, 43]
 Это обработанный список без сортировки: [7, 9, 10, 18, 42, 49, 48, 46, 43]
 Это медиана обработанного списка без сортировки: 42
 
 
 Введите целое число - количество элементов в полумассиве: _3
 Это начальный сгенерированный список: [22, 21, 9, 14, 12, 2, 44]
 Это медиана сформированного необработанного списка 14
 Это проверка правильной медианы при помощи median - медиана равна: 14
 Это отсортированный  список методом Гномья сортировка: [2, 9, 12, 14, 21, 22, 44]
 Это проверка, что список не изменился: [22, 21, 9, 14, 12, 2, 44]
 Это обработанный список без сортировки: [2, 12, 9, 14, 22, 21, 44]
 Это медиана обработанного списка без сортировки: 14
 """








