"""
Задача 4.
Поработайте с обычным словарем и OrderedDict.
Выполните различные операции с каждым из объектов и сделайте замеры.
Опишите полученные результаты, сделайте выводы.
"""

from collections import OrderedDict
from random import seed, randint
from time import process_time

seed(1)
DEGREE = (5, 6, 7)
builtin_dicts = {'name': 'builtin_dict'}
ordered_dicts = {'name': 'ordered_dict'}
# Создадим несколько словарей разных размеров,
# чтобы иметь возможность оценивать O()
for k in DEGREE:
    d = {
        # Заполняем словарь строковыми ключами
        str(n := randint(100000, 1000000)): n
        for _ in range(10**k)}
    builtin_dicts[k] = d
    ordered_dicts[k] = OrderedDict(d)

data = [builtin_dicts, ordered_dicts]

methods = [
    ("__setitem__", 2),
    ("__getitem__", 1),
    ("__delitem__", 1)]

num_runs = 10**6
d = builtin_dicts
for (fun_name, num) in methods:
    for d in data:
        print(f'{d["name"]}, {fun_name}')
        for k in DEGREE:
            size = 10 ** k
            print(f'{size} элементов')
            met = getattr(d[k], fun_name)
            start = process_time()
            for i in range(num_runs):
                args = (str(i), i)[:num]
                met(*args)
            dt = process_time() - start
            print(f'{size}: {dt}')
        print()

# ---
# builtin_dict, __setitem__
# 100000 элементов
# 100000: 0.6716675999999993
# 1000000 элементов
# 1000000: 0.7608359580000013
# 10000000 элементов
# 10000000: 0.7604866769999994
#
# ordered_dict, __setitem__
# 100000 элементов
# 100000: 0.8217655059999984
# 1000000 элементов
# 1000000: 0.913207314000001
# 10000000 элементов
# 10000000: 0.8177587049999993
#
# builtin_dict, __getitem__
# 100000 элементов
# 100000: 0.5964190340000002
# 1000000 элементов
# 1000000: 0.6935882549999981
# 10000000 элементов
# 10000000: 0.742809373
#
# ordered_dict, __getitem__
# 100000 элементов
# 100000: 0.6058348170000016
# 1000000 элементов
# 1000000: 0.7125418229999987
# 10000000 элементов
# 10000000: 0.7536874749999996
#
# builtin_dict, __delitem__
# 100000 элементов
# 100000: 0.5940442270000013
# 1000000 элементов
# 1000000: 0.712487785999997
# 10000000 элементов
# 10000000: 0.7481913849999984
#
# ordered_dict, __delitem__
# 100000 элементов
# 100000: 0.6545065669999985
# 1000000 элементов
# 1000000: 0.828653580000001
# 10000000 элементов
# 10000000: 0.9702847160000019
# ---

# Обе структуры показывают поразительно
# слабую зависимость времени операции
# от размера коллекции (а в случае записи
# вообще отсутствие такой зависимости).
#
# Главным выводом можно считать практически
# полное соответствие по времени обеих коллекций
# с незначительным выигрышем встроенных словарей.
# Таким образом нет явной причины использовать
# OrderedDict за исключением
# поддержки legacy-кода
