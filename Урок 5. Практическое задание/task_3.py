"""
Задача 3.
В соответствии с документацией Python,
deque – это обобщение стеков и очередей.
Вот основное правило: если вам нужно что-то быстро дописать или вытащить, используйте deque.
Если вам нужен быстрый случайный доступ, используйте list.

Задача: создайте простой список (list) и очередь (deque).
Выполните различные операции с каждым из объектов.
Сделайте замеры и оцените, насколько информация в документации
соответствует дейстивтельности.
"""

from timeit import timeit
from collections import deque
from random import seed, randint


NUM_RUNS = 1000

SIZE = 1000000
IDX = SIZE//2

seed(1)
arr0 = [randint(1, 100) for i in range(SIZE)]

arr = list(arr0)
print("Извлекаем значения из середины списка")
print(timeit("_ = arr[IDX]", globals=globals(), number=NUM_RUNS))

deq = deque(arr0)
print("Извлекаем значения из середины дека")
print(timeit("_ = deq[IDX]", globals=globals(), number=NUM_RUNS))


N = 10000
seed(1)
arr0 = [randint(1, 100) for i in range(SIZE)]

arr = list(arr0)
print("Вставляем значения в голову списка")
print(timeit("arr.insert(500, 0)", globals=globals(), number=NUM_RUNS))

arr = deque(arr0)
print("Добавляем значения в хвост списка")
print(timeit("arr.append(500)", globals=globals(), number=NUM_RUNS))

deq = deque(arr0)
print("Вставляем значения в голову дека")
print(timeit("deq.insert(500, 0)", globals=globals(), number=NUM_RUNS))

deq = deque(arr0)
print("Добавляем значения в голову дека")
print(timeit("deq.appendleft(500)", globals=globals(), number=NUM_RUNS))

deq = deque(arr0)
print("Добавляем значения в хвост дека")
print(timeit("deq.append(500)", globals=globals(), number=NUM_RUNS))
# ---
# Извлекаем значения из середины списка
# 6.176996976137161e-05
# Извлекаем значения из середины дека
# 0.08101026999065652
# Вставляем значения в голову списка
# 0.9436411040369421
# Добавляем значения в хвост списка
# 6.619800115004182e-05
# Вставляем значения в голову дека
# 0.0009685130207799375
# Добавляем значения в голову дека
# 9.289098670706153e-05
# Добавляем значения в хвост дека
# 6.085203494876623e-05
# ---

# Самый предсказуемый результат -- добавление в хвост
# как списка, так и дека примерно одинаково по времени
# и очень бысто, согласно документации O(1).

# Про добавление в голову и хвост дека в документации написано
# approximately the same O(1) performance in either direction,
# что тоже подтверждается.

# Про существенное отличие скорости произвольного доступа
# к списку и деку не написано ничего, но оно есть (для 1000000
# элементов более, чем в 1000 раз).

# Для коллекций из 10000 элементов вставка в начало списка
# происходит в 100 раз медленнее, чем добавление в начало дека
# через deque.appendleft(). Про list в документации написано
# incur O(n) memory movement costs for pop(0) and insert(0, v)
# что мы и наблюдаем.

# Теперь исследуем удивительную особенность дека, результаты операций
# insert(0, x) и appendleft(x) равны, однако их время выполнения
# различается почти в 10 раз:
d1 = deque([3, 2, 1])
d2 = deque(d1)
print(d1 == d2)
# ---
# True
# ---
d1.insert(0, 4)
d2.appendleft(4)
print(d1 == d2)
# ---
# True
# ---
# Предположительно из-за того, что insert сдвигает содержимое,
# чтобы освободить место для нового элемента, а appendleft
# добавляет элемент в резервную область пямяти, содержимое
# дека остается на месте.
