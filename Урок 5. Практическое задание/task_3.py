"""
Задача 3.
В соответствии с документацией Python,
deque – это обобщение стеков и очередей.
Вот основное правило: если вам нужно что-то быстро дописать или вытащить, используйте deque.
Если вам нужен быстрый случайный доступ, используйте list.

Задача: создайте простой список (list) и очередь (deque).
Выполните различные операции с каждым из объектов.
Сделайте замеры и оцените, насколько информация в документации
соответствует дейстивтельности.
"""

from timeit import timeit
from collections import deque

ex1 = list(range(100000))
ex2 = deque(ex1)

st1 = '''
for elem in range(100000):
    ex1.insert(0, elem)
'''

st2 = '''
for elem in range(100000):
    ex2.appendleft(elem)
'''

st3 = '''
for elem in range(100000):
    ex1.append(elem)
'''

st4 = '''
for elem in range(100000):
    ex2.append(elem)
'''

st5 = '''
while len(ex1):
    ex1.pop(0)
'''

st6 = '''
while len(ex2):
    ex2.popleft()
'''

st7 = '''
for i in range(len(ex1)):
    val = ex1[i]
'''

st8 = '''
for i in range(len(ex2)):
    val = ex2[i]
'''

print('Вставка влево')
print('Список: ', timeit(st1, globals=globals(), number=2))
print('Дек: ', timeit(st2, globals=globals(), number=2))

ex1 = list(range(100000))
ex2 = deque(ex1)

print('Вставка вправо')
print('Список: ', timeit(st3, globals=globals(), number=2))
print('Дек: ', timeit(st4, globals=globals(), number=2))

ex1 = list(range(100000))
ex2 = deque(ex1)

print('Удаление слева')
print('Список: ', timeit(st5, globals=globals(), ))
print('Дек: ', timeit(st6, globals=globals()))

print('Извлечение по индексу')
print('Список: ', timeit(st7, globals=globals(), number=10000000))
print('Дек: ', timeit(st8, globals=globals(), number=10000000))


"""
Вставка влево
Список:  15.541667306999999
Дек:  0.018327277999999225
Вставка вправо
Список:  0.023892135000000536
Дек:  0.01763323399999983
Удаление слева
Список:  0.49265879200000207
Дек:  0.015033988000002552
Извлечение по индексу
Список:  3.047977691
Дек:  3.1948667009999987

Как видно из замеров, дек работает в 1000 раз быстрее списка, когда речь идет об добавлении элемента в начало.
При этом если добавлять элемент в конец, то время работы примерно одинаковое, дек работает чуть быстрее.
При удалении элемента слева дек работает ~100 раз быстрее. 
При извлечении элемента по индексу список работает чуть быстрее, чем дек.
Из всего вышенаписанного можно сделать вывод, что документация не врет - операции вставки-удаления "начало-конец" 
у дека работают быстрее, чем у списка, когда как операция взятия по индексу работает быстрее у списка.
"""