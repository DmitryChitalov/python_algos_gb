"""
2.*	Написать программу сложения и умножения двух шестнадцатеричных чисел.
При этом каждое число представляется как массив, элементы которого это цифры числа.
Например, пользователь ввёл A2 и C4F. Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’], произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

Подсказка:
Для решения задачи обязательно примените какую-нибудь коллекцию из модуля collections
Для лучшее освоения материала можете даже сделать несколько решений этого задания,
применив несколько коллекций из модуля collections
Также попробуйте решить задачу вообще без collections и применить только ваши знания по ООП
(в частности по перегрузке методов)

__mul__
__add__

Пример:
Например, пользователь ввёл A2 и C4F.
Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’]
Произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

1. вариант
defaultdict(list)
int(, 16)
reduce

2. вариант
class HexNumber:
    __add__
    __mul__

hx = HexNumber
hx + hx
"""
import collections
import functools


def calc():
    numbers = collections.defaultdict(list)

    for dig in range(2):
        num = input(f"Введите {dig + 1}-е натуральное шестнадцатиричное число: ")
        numbers[f"{dig + 1}-{num}"] = list(num)
    print(numbers)

    summ = sum([int(''.join(i), 16) for i in numbers.values()])
    print("Сумма: ", list('%X' % summ))

    mult = functools.reduce(lambda a, b: a * b, [int(''.join(i), 16) for i in numbers.values()])
    print("Произведение: ", list('%X' % mult))


calc()
