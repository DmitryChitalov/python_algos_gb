"""
2.	Написать программу сложения и умножения двух шестнадцатеричных чисел.
При этом каждое число представляется как массив, элементы которого это цифры числа.
Например, пользователь ввёл A2 и C4F. Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’], произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

Подсказка:
Для решения задачи обязательно примените какую-нибудь коллекцию из модуля collections
Для лучшее освоения материала можете даже сделать несколько решений этого задания,
применив несколько коллекций из модуля collections
Также попробуйте решить задачу вообще без collections и применить только ваши знания по ООП
(в частности по перегрузке методов)
"""


class Operations:
    def __init__(self):
        self.obj_1 = int(input('Введите первое число в 16-ричной системе счисления: '), 16)
        self.obj_2 = int(input('Введите второе число в 16-ричной системе счисления: '), 16)
        self.res = 0

    def __add__(self, other):
        self.res = self.obj_1 + other.obj_2
        self.res = ((hex(self.res))[2:]).upper()
        return self

    def __mul__(self, other):
        self.res = self.obj_1 * other.obj_2
        self.res = ((hex(self.res))[2:]).upper()
        return self

    def __str__(self):
        return f'{self.res}'


def operations():
    request = input('Умножаем или складываем? Введите + или *\nИли введите 0 для выхода: ')
    if request != '+' and request != '*' and request != '0':
        print('Попробуйте выбрать правильный оператор\n')
        operations()
    else:
        if request == '0':
            return print('Прощайте')
        else:
            num = Operations()
            if request == '*':
                num * num
            elif request == '+':
                num + num
            return print(f'Результат: {num}')


operations()
'''
Я не понял для какой цели здесь применять DefaultDict,
поэтому применил ООП.
Хотя и ООП кривое получилось.
Без него можно было все в функции прописать.
'''