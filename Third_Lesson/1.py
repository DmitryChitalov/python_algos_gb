"""
Задание 1.

Докажите, что словари обрабатываются быстрее, чем списки.

Реализуйте две функции, в первой нужно заполнить элементами список, во второй-словарь
Сделайте замеры времени выполнения каждой из функций

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к двум своим функциям.
"""
""" Сделал декоратор, каторый обернул функцию, в которой замеряется время начала испытания,
затем выполняется наша целевая функция - по заполнению(списка или словаря), и, затем вычисяется 
время окончания замера (Для объективности, я заполнил оба контейнера 10 миллионами элементов)"""
import time
first_dict = {}
first_list = []

def decorator_function(func):
    def check_time(*args):
        start_val = time.time()
        func(*args)
        end_val = time.time()
        return end_val - start_val
    return check_time

@decorator_function
def dict_fill(my_dict : dict):
    for i in range(1, 10000000):
        my_dict['{i}'] = i

@decorator_function
def list_fill(my_list : list):
    for i in range(1, 10000000):
        my_list.append(i)

print("Время заполнения словаря: ", dict_fill(first_dict))
print("Время заполнения списка: ",list_fill(first_list))

""" 
После 5 запусков данного скрипта, я получил такие вот значения работы декоратора:
Т.е можно сделать вывод о том, что при достаточно высоких объёмах заполнения,
словари работают почти в 2 раза быстрее чем списки.

1)  Время заполнения словаря:  0.6800389289855957
    Время заполнения списка:  1.3480770587921143

2)  Время заполнения словаря:  0.7140407562255859
    Время заполнения списка:  1.3490774631500244

3)  Время заполнения словаря:  0.7270417213439941
    Время заполнения списка:  1.3490769863128662
    
4)  Время заполнения словаря:  0.7110404968261719
    Время заполнения списка:  1.3690781593322754

5)  Время заполнения словаря:  0.715040922164917
    Время заполнения списка:  1.3750786781311035
"""