"""
Задание 1.

Реализуйте заполнение списка и словаря, сделайте замеры и сделайте выводы, обоснуйте результат.
Сделайте несколько операций с каждым из объектов, сделайте замеры и сделайте выводы, обоснуйте результат.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к двум своим функциям.
"""


def time_cost(func):
    from time import perf_counter

    def wrap(args, *kwargs):
        start = perf_counter()
        func(args, *kwargs)
        end = perf_counter()
        print(f'Функция {func} выполнялась {end - start}')
    return wrap


@time_cost
def fill_list(n):
    test_list = []
    for i in range(n):
        test_list.append('Test text')


@time_cost
def fill_dict(n):
    test_dict = {}
    for i in range(n):
        test_dict[i] = 'Test text'


'''
Не понимаю, по какой причине, но при 10000 элементов список наполняется быстрее словаря.
Далее, при увеличении числа элементов, словарь всё больше проседает по времени.
При создании элемента словаря высчитывается хеш ключа. Из-за этого наполнение словаря происходит медленнее.
Но обе операции добавления и у словаря и у списка имеют одинаковую сложность.
Не понимаю, почему при увеличении числа добавляемых элементов, время наполнения словаря всё больше отдаляется 
от времени наполнения списка.
Возможно имеет место погрешность. Возможно нужны более точные замеры.
'''
for i in range(10000, 1000000, 100000):
    print(f'Заполнение списка и словаря. Кол-во элементов {i}.')
    fill_list(i)
    fill_dict(i)
