"""
Задание 1.

Реализуйте заполнение списка и словаря, сделайте замеры и сделайте выводы, обоснуйте результат.
Сделайте несколько операций с каждым из объектов, сделайте замеры и сделайте выводы, обоснуйте результат.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к двум своим функциям.
"""
##########################################################################################################
"""
Первый замер :
 список заполненый циклом - 13_682_200 наносекунд
 словарь заполненый циклом - 14_351_300 наносекунд
 добавление в начало списка - 12_200
 добавление в конец списка - 1_000
 получение элемента из списка - 1_100
 добавление в словарь - 1_100
 получение элемента из словаря - 900
 поиск элемента в списке - 224_300
 поиск элемента в словаре - 8_500

Второй замер :
 список заполненый циклом - 10_221_400 наносекунд
 словарь заполненый циклом - 9_983_000 наносекунд
 добавление в начало списка - 6_800
 добавление в конец списка - 700
 получение элемента из списка - 1_000
 добавление в словарь - 500
 получение элемента из словаря - 600
 поиск элемента в списке - 124_300
 поиск элемента в словаре - 5_300

Третий замер :
 список заполненый циклом - 16_525_900 наносекунд
 словарь заполненый циклом - 12_596_600 наносекунд
 добавление в начало списка - 10_600
 добавление в конец списка - 1_200
 получение элемента из списка - 1_200
 добавление в словарь - 1_200
 получение элемента из словаря - 1_000
 поиск элемента в списке - 129_900
 поиск элемента в словаре - 5_500


Выводы:
* словари в среднем заполняються быстрее чем списки ...  я думал что на оборот)))
* добавление элемента в конец списка и в словарь занимають примерно одинаковое время
* добавление элемента в начало списка занимает намного больше времени
* получение элемента из словаря происходит быстрее чем из списка
* поиск элемента в словаре происходит намного быстрей чем в списке

** вывод не относящийся к теме, мне нужно еще раз разбираться с декораторами)))))
"""
import time
import random


def measurement_time(func):
    """
    функция декоратор замеряет время выполнения
    """

    def time_execution():
        start = time.perf_counter_ns()
        func()
        print(time.perf_counter_ns() - start)
        return func

    return time_execution()


@measurement_time
def fill_list_circle():
    """
    функция заполняет список случайными значения и возвращяет его
    :return: list
    """
    any_list = []
    for _ in range(10000):
        any_list.append(random.randint(0, 1000))
    return any_list


@measurement_time
def fill_dict():
    """
       функция заполняет словарь случайными значения и возвращяет его
       :return: list
       """
    any_dist = {}
    for el in range(0, 10000):
        any_dist[el] = random.randint(0, 1000)
    return any_dist


my_list = fill_list_circle()
my_dist = fill_dict()


start_list = time.perf_counter_ns()
my_list.insert(0, 1200)
print(time.perf_counter_ns() - start_list)

start_list = time.perf_counter_ns()
my_list.append(2400)
print(time.perf_counter_ns() - start_list)

start_list = time.perf_counter_ns()
n = my_list[5000]
print(time.perf_counter_ns() - start_list)

start_dict = time.perf_counter_ns()
my_dist['element'] = 2555555555555
print(time.perf_counter_ns() - start_dict)

start_dict = time.perf_counter_ns()
m = my_dist['element']
print(time.perf_counter_ns() - start_dict)

start_dict = time.perf_counter_ns()
print(32_000 in my_list)
print(time.perf_counter_ns() - start_dict)

start_dict = time.perf_counter_ns()
print(32_000 in my_dist)
print(time.perf_counter_ns() - start_dict)






