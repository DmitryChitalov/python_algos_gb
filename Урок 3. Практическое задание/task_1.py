
# """
# Задание 1.
#
# Реализуйте заполнение списка и словаря, сделайте замеры и сделайте выводы, обоснуйте результат.
# Сделайте несколько операций с каждым из объектов, сделайте замеры и сделайте выводы, обоснуйте результат.
#
# Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
#
# Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
# то реализуйте ф-цию-декоратор и пусть она считает время
# И примените ее к двум своим функциям.
# """

import time


def my_timer(func):
    def wrapper(arg):
        print(f'Выполняется функция {func}')
        start_time = time.time()
        func(arg)
        end_time = time.time()
        timer = end_time-start_time
        print (f'Затраченное время на заполнение функции   {timer*1000} мс')
    return wrapper

@my_timer
def fill_list(len):
    a=[]
    for i in range(len):
        a.append(i)
@my_timer
def fill_dict(len):
    a = {}
    for i in range(len):
        a[i]=i

@my_timer
def list_degree(len_1):
    a = []
    for k in range(0, len_1):
        a.append((k, k ** 2))

@my_timer
def dict_degree(len):
    b = {}
    for k in range(0, len):
        b[k] = k ** 2





fill_list(5000000)
fill_dict(5000000)

list_degree(100000)
dict_degree(100000)
#
# Выполняется функция <function fill_list at 0x107b8d510>
# Затраченное время на заполнение функции   437.32285499572754 мс
# Выполняется функция <function fill_dict at 0x107b8d620>
# Затраченное время на заполнение функции   488.2638454437256 мс
# Выполняется функция <function list_degree at 0x107b8d730>
# Затраченное время на заполнение функции   46.11563682556152 мс
# Выполняется функция <function dict_degree at 0x107b8d840>
# Затраченное время на заполнение функции   35.01486778259277 мс
# Заполенение списка происходит быстрее, но арифметические операции быстрее происходят со словарем