"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря программно,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
"""

from time import time


def what_long(f):
    def t(*args):
        start = time()
        f(*args)
        stop = time()
        print(f'time: {stop - start}')
    return t


@what_long
def obj_extend(s, iter):
    if isinstance(s, dict):
        for i in range(iter):
            s.update({(i, i + 1): i})
    if isinstance(s, list):
        for i in range(iter):
            s.append(((i, i + 1), i))


@what_long
def get_values(s, iter):
    if isinstance(s, dict):
        for i in range(iter, 0, -1):
            s.get((i, i + 1))
    if isinstance(s, list):
        for i in range(iter, 0, -1):
            s.index(((i, i + 1), i))


def main():
    d = dict()
    l = list()
    obj_extend(d, 10001)
    obj_extend(l, 10001)
    get_values(d, 10000)
    get_values(l, 10000)

"""
time: 0.0041615962982177734 Заполнение словаря вдвое больше
time: 0.0024819374084472656 времени заполнения списка
time: 0.0014832019805908203 Доступ к элементу словаря почти на 3 порядка быстрее
time: 1.016230583190918     чем к элементу списка. у списка ищем индекс первого элемента по значения, что 
                            по идее эквивалентно по смыслу взятию по значению у словаря
"""


if __name__ == '__main__':
    main()
