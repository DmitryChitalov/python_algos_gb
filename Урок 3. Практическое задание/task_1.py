"""
Задание 1.

Реализуйте заполнение списка и словаря, сделайте замеры и сделайте выводы, обоснуйте результат.
Сделайте несколько операций с каждым из объектов, сделайте замеры и сделайте выводы, обоснуйте результат.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к двум своим функциям.
"""
import time

# пример декоратора - нашел через google

def my_timer(f):
    def tmp(*args, **kwargs):
        start_time = time.time()
        result = f(*args, **kwargs)
        delta_time = time.time() - start_time
        print('Время выполнения функции {}'.format(delta_time))
        return result

    return tmp


@my_timer
def create_list(n=1) -> list:
    return [i ** 2 for i in range(1, n)]


@my_timer
def create_dict(n=1) -> dict:
    return {a: a ** 2 for a in range(n)}


for i in range(1, 10):
    print("= " * 50)
    print(f"[INFO]: LIST #{i} -> {create_list(1000)}")
    print("= " * 50)
    print(f"[INFO]: DICT #{i} -> {create_dict(1000)}")


"""
Для заполнения "Листа" потребовалось меньше времени
полагаю, это из-за того, что "Справочник" сложенее по своей конструкции

   List              |   Dict
- - - - - - - - - - -+- - - - - - - - - - - -
0,000339984893798828	0,000360012054443359
0,000332117080688477	0,000588655471801758
0,000326156616210938	0,000340938568115234
0,000623941421508789	0,000683069229125977
0,000656843185424805	0,00130510330200195
0,000344753265380859	0,000692129135131836
0,000587940216064453	0,000723838806152344
0,000474929809570313	0,0013728141784668
0,00229573249816895		0,000648021697998047
- - - - - - - - - - -+- - - - - - - - - - - -
0,000598239898681641	0,000671458244323731

"""