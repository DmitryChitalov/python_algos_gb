"""
Задание 1.

Реализуйте заполнение списка и словаря, сделайте замеры и сделайте выводы, обоснуйте результат.
Сделайте несколько операций с каждым из объектов, сделайте замеры и сделайте выводы, обоснуйте результат.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к двум своим функциям.
"""

import time

n = 10 ** 7  # количество элементов

# список через генератор
start_time = time.time()
test_lst = [i for i in range(n)]
stop_time = time.time()
print(
    f'Время заполнения списка c помощью генератора, длинной {len(test_lst)} элементов, \n составит {stop_time - start_time}')

# список через цикл добавлением элементов
test_lst = []
start_time = time.time()
for i in range(n):
    test_lst.append(i)
stop_time = time.time()
print(
    f'Время заполнения списка с помощью цикла, длинной {len(test_lst)} элементов, \n составит {stop_time - start_time}')

# словарь через генератор
start_time = time.time()
test_dict = {i: i for i in range(n)}
stop_time = time.time()
print(
    f'Время заполнения словаря c помощью генератора, длинной {len(test_dict)} элементов, \n составит {stop_time - start_time}')

# словарь через цикл методом обновления словоря
test_dict = {}
start_time = time.time()
for i in range(n):
    test_dict.update({i: i})
stop_time = time.time()
print(
    f'Время заполнения словаря c помощью цикла мтодом обновления, длинной {len(test_dict)} элементов, \n составит {stop_time - start_time}')

# словарь через цикл методом добавления элемента
test_dict = {}
start_time = time.time()
for i in range(n):
    test_dict[i] = i
stop_time = time.time()
print(
    f'Время заполнения словаря c помощью цикла методом добавления, длинной {len(test_dict)} элементов, \n составит {stop_time - start_time}')

"""
Замеры показывают что для заполнения списка эффективнее по скорости выполнения задачи (почти в 2 раза)
использовать генераторы.
Для словарей таже ситуация (но скорость выполнения отлчается более чем в 3 раза). Если использовать 
генератор невозможно, то в цикле лучше использовать добавление нового элемента, чем метод обновления
словаря (скорость отличается почти в 2 раза).
"""