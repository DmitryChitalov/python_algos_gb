"""
Задание 1.

Докажите, что словари обрабатываются быстрее, чем списки.

Реализуйте две функции, в первой нужно заполнить элементами список, во второй-словарь
Сделайте замеры времени выполнения каждой из функций

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к двум своим функциям.
"""


from time import time
# from random import randint


# Что-то я не соображу, чем заполнять список и решила заполнять рандомными числами, но потом поняла,
# что .append(randint(0,9) для списка я знаю, но не знаю, как сделать рандомные ключ-значение для словарей - нет.
# Поэтому вспомнила про генераторы списков и словарей из базового курса, залезла в материалы..
# Надеюсь, оно отвечает требованиям задания.

def filling_list(a):
    test_list = [i*2 for i in range(a)]
    return test_list


def filling_dict(a):
    test_dict = {i: i*2 for i in range(a)}
    return test_dict


t_list_start = time()
filling_list(1000000)
t_list_finish = time()

t_dict_start = time()
filling_dict(1000000)
t_dict_finish = time()

print(f'Заполнение списка заняло {t_list_finish-t_list_start} сек. '
      f'\nЗаполнение словаря заняло {t_dict_finish-t_list_start} сек.')
# print((t_dict_finish-t_list_start)/(t_list_finish-t_list_start))

# При длинне в миллион время для словаря примерно в 3 раза больше. Если честно, о причинах есть только одна очевидная
# мысль, она заключается в том, что помимо заполнения значений как в списке надо еще создавать ключи и привязку к ним.
