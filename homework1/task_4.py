"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

# сложность алгоритма O(N)
database = [('vskos', '341grot', True), ('semen123', 'frag448', False), ('nadejda1982', 'razerm48', False),
            ('palich111', 'licuidact999', True),('dmitruy', 'ghostmaster', True)]
def auth(database):
    nick = input('Введите логин: ')
    for member in database:                        #O(N)
        if nick == member[0]:
            password = input('Введите пароль: ')
            if password == member[1]:
                if member[2] == True:
                    print('Добро пожаловать', nick)
                    return 0
                else:
                    print('Ваша запись не активирована. Пройдите активацию на сайте')
                    return 0
            else:
                print('Введен неверный пароль. Попробуйте снова')
                return 0
    else:
        print('Такого пользователя не существует. Пожалуйста, пройдите регистрацию.')

auth(database)
# Для данной задачи я не смог придумать более оптимальный алгоритм, единственное, что можно было сделать
# это вместо списка использовать словарь, но врятли это сильно ускорит алгоритм.