"""
2. Отсортируйте по возрастанию методом слияния одномерный вещественный массив,
заданный случайными числами на промежутке [0; 50). Выведите на экран исходный
и отсортированный массивы.

Пример:
Введите число элементов: 5
Исходный - [46.11436617832828, 41.62921998361278, 18.45859540989644, 12.128870723745806, 8.025098788570562]
Отсортированный - [8.025098788570562, 12.128870723745806, 18.45859540989644, 41.62921998361278, 46.11436617832828]
"""
import timeit
import numpy
import copy


def merge_sort(lst_obj):
    lst_obj = copy.copy(lst_obj)  # копия списка
    if len(lst_obj) > 1:
        center = len(lst_obj) // 2
        left = lst_obj[:center]
        right = lst_obj[center:]

        merge_sort(left)
        merge_sort(right)

        # перестали делить
        # выполняем слияние
        i, j, k = 0, 0, 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                lst_obj[k] = left[i]
                i += 1
            else:
                lst_obj[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            lst_obj[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            lst_obj[k] = right[j]
            j += 1
            k += 1
        return lst_obj


input_qty = int(input("введите количество элементов:"))
orig_list = list(numpy.random.uniform(0, 50, input_qty))
print(f'исходный список:       {orig_list}')
list_sorted = merge_sort(orig_list)
print(f'отсортированный список:{list_sorted}')


print(timeit.timeit("merge_sort(orig_list)", setup="from __main__ import merge_sort, orig_list", number=10000))



'''
введите количество элементов:5
исходный список:       [23.347265645688235, 43.792266518657584, 19.12185387291211, 38.02612858321324, 6.327803632533424]
отсортированный список:[6.327803632533424, 19.12185387291211, 23.347265645688235, 38.02612858321324, 43.792266518657584]

замеры:
количество элементов: 5
0.15603800000000012
количество элементов: 10
0.3513938000000003
количество элементов: 20
0.6985929999999998

Мы видим, что при использовании merge sort время выполнения растет несколько быстрее, чем линейно,
а именно, сложность алгоритма O(n.logn), потому что список делится за log(n) вызовов, а процесс слияния занимает 
линейное время для каждого запроса. 

'''