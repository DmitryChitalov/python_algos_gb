"""
2. Отсортируйте по возрастанию методом слияния одномерный вещественный массив,
заданный случайными числами на промежутке [0; 50). Выведите на экран исходный
и отсортированный массивы.

Пример:
Введите число элементов: 5
Исходный - [46.11436617832828, 41.62921998361278, 18.45859540989644, 12.128870723745806, 8.025098788570562]
Отсортированный - [8.025098788570562, 12.128870723745806, 18.45859540989644, 41.62921998361278, 46.11436617832828]
"""

from random import uniform
import timeit

G = [uniform(0,50) for _ in range(5)]


def merge(A, B):
    Res = []
    i = 0
    j = 0
    while i < len(A) and j < len(B):
        if A[i] <= B[j]:
            Res.append(A[i])
            i += 1
        else:
            Res.append(B[j])
            j += 1
    Res += A[i:] + B[j:]
    return Res


def merge_sort(A):
    if len(A) <= 1:
        return A
    else:
        L = A[:len(A) // 2]
        R = A[len(A) // 2:]
    return merge(merge_sort(L), merge_sort(R))


print(f'Не отсортированный список: {G}')
print(f'Отсортированный список: {merge_sort(G)}')

print(f'Время выполнения сортировки методом слияния - '
      f'{timeit.timeit("merge_sort(G)",setup="from __main__ import merge_sort, merge, G", number=10000)}')

'''
Основная идея алгоритма состоит в том, чтобы разделить (под) массивы пополам и отсортировать их рекурсивно.(у меня почти пополам)))
Не отсортированный список: [12.331527937119924, 26.538405721352227, 36.51635598241041, 29.404466069499442, 30.781968197300092]
Отсортированный список: [12.331527937119924, 26.538405721352227, 29.404466069499442, 30.781968197300092, 36.51635598241041]
Время выполнения сортировки методом слияния - 0.10693339999999996
'''