"""
2. Отсортируйте по возрастанию методом слияния одномерный вещественный массив,
заданный случайными числами на промежутке [0; 50). Выведите на экран исходный
и отсортированный массивы.

Пример:
Введите число элементов: 5
Исходный - [46.11436617832828, 41.62921998361278, 18.45859540989644, 12.128870723745806, 8.025098788570562]
Отсортированный - [8.025098788570562, 12.128870723745806, 18.45859540989644, 41.62921998361278, 46.11436617832828]
"""

import timeit
import random

n = (int(input('Введите число элементов: ')))
lst_1 = [random.random() * 50 for i in range(n)]


def merge_sort(lst):
    if len(lst) > 1:
        center = len(lst) // 2
        left = lst[:center]
        right = lst[center:]

        merge_sort(left)
        merge_sort(right)

        i, j, k = 0, 0, 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                lst[k] = left[i]
                i += 1
            else:
                lst[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            lst[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            lst[k] = right[j]
            j += 1
            k += 1
        return lst


print(f'Исходный список: {lst_1}')
print(f'Отсортированный список: {merge_sort(lst_1)}')
print(f'Время выполнения кода: {timeit.timeit("merge_sort(lst_1)", setup="from __main__ import merge_sort, lst_1", number=1000)} сек')

"""
Введите число элементов: 10
Исходный список: [14.994915806970099, 26.766368871382838, 33.89446076532947, 23.224431916182205, 5.076645036203914, 6.577989413973873, 16.034473611120408, 12.994943153264721, 19.75720717912343, 34.06123815516083]
Отсортированный список: [5.076645036203914, 6.577989413973873, 12.994943153264721, 14.994915806970099, 16.034473611120408, 19.75720717912343, 23.224431916182205, 26.766368871382838, 33.89446076532947, 34.06123815516083]
Время выполнения кода: 0.02451099999999995 сек

На мой взгляд, данный тип сортировки (слиянием) не самый эффективный, с точки зрения времени выполнения кода, поскольку, в сравнении с предыдущим заданием (где сортировка выполнялась пузырьковым методом),
сортировка слиянием существенно проигрывает показателям пузырьковой сортировки:

Исходный список: [31.309003920534295, 38.17533543979286, 22.763607896962924, 25.36846464029964, 46.9357028987735, 29.42213123971915, 35.77207803637956, 9.308213000552524, 19.11056296010652, 8.44137071390646]
Отсортированный список: [8.44137071390646, 9.308213000552524, 19.11056296010652, 22.763607896962924, 25.36846464029964, 29.42213123971915, 31.309003920534295, 35.77207803637956, 38.17533543979286, 46.9357028987735]
Время выполнения кода: 0.0009926999999999991 сек
"""
