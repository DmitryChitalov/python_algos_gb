"""
3. Массив размером 2m + 1, где m – натуральное число, заполнен случайным образом.
Найдите в массиве медиану. Медианой называется элемент ряда, делящий его на
две равные части: в одной находятся элементы, которые не меньше медианы,
в другой – не больше медианы.

Задачу можно решить без сортировки исходного
массива.

Но если это слишком сложно, то используйте метод сортировки,
который не рассматривался на уроках: Шелла, Гномья, ...

arr[m]
from statistics import median
"""


from statistics import median, mean
import random


def make_arr(m, dw = 0, up = 50):
    """
    Возвращает массив размерностью 2m+1 заполенный целыми числами в диапазоне от 0 до 50

    """
    return [random.randint(dw,up) for i in range(2*m+1)]


def my_median(lst):
    """
    Возращает медианный элемент массива
    Однако, устойчивой работы так и не добился.

    """
    cnt = len(lst) // 2  #число элементов списка больше или меньше медианного
    size = len(lst)

    for i in range(size):  # перебираем элементы списка
        left = list() # массив с элементами меньше  равными текущему
        right = list() # массив с элементами больше  равными текущего
        lst2 = lst.copy() # копируем массив, исключаем текущий элемент
        lst2.pop(i)
        for el2 in lst2: # сравниваем текущий элемент с каждым элементом массива
           if lst[i] >= el2:
               left.append(el2)
           if lst[i] <= el2:
               right.append(el2)
        if len(left) == len(right) or len(left) == cnt: # если длинна массивов оказалась одинаковой, то этот элемент и есть медиана
            return lst[i]
    
    return

def gnome_sort(lst):
    """
    Реализация оптимизированной Гномьей сортироки. 
    Код отсюда: https://habr.com/ru/post/414653/

    """
    i, j, size = 1, 2, len(lst)

    while i < size:
        if lst[i-1] <= lst[i]:
            i, j = j, j + 1
        else :
            lst[i-1], lst[i] = lst[i], lst[i-1]
            i -= 1
            if i == 0 :
                i, j = j, j+1

    return lst



if __name__ == '__main__':

    m = 5  # Размер массива 2*m +1

    for i in range(10):
        arr = make_arr(m)

        print("Исходный массив ", arr)
        print("Медианное значение ", my_median(arr.copy()))
        s_arr = gnome_sort(arr.copy())
        print("Медиана Гномьей сортировкой", s_arr[m])
        print("Проверка ", median(arr.copy()))

    print("\nМассив с частыми повторами \n")
    for i in range(10):
        arr = make_arr(m,0,5)

        print("Исходный массив ", arr)
        print("Медианное значение ", my_median(arr.copy()))
        s_arr = gnome_sort(arr.copy())
        print("Медиана Гномьей сортировкой", s_arr[m])
        print("Проверка ", median(arr.copy()))



"""
Вывод программы:
Почти работает, лучше на массиве с редкими повторами.
Без сбоев работает с использованием Гномьей сортировки
Исходный массив  [42, 13, 4, 50, 19, 16, 31, 33, 41, 7, 10]
Медианное значение  19
Медиана Гномьей сортировкой 19
Проверка  19
Исходный массив  [11, 50, 27, 0, 43, 43, 16, 35, 29, 5, 0]
Медианное значение  27
Медиана Гномьей сортировкой 27
Проверка  27
Исходный массив  [37, 3, 22, 31, 44, 39, 9, 34, 20, 20, 21]
Медианное значение  22
Медиана Гномьей сортировкой 22
Проверка  22
Исходный массив  [36, 42, 4, 38, 28, 41, 29, 37, 47, 24, 8]
Медианное значение  36
Медиана Гномьей сортировкой 36
Проверка  36
Исходный массив  [41, 14, 12, 2, 23, 34, 8, 29, 11, 29, 26]
Медианное значение  23
Медиана Гномьей сортировкой 23
Проверка  23
Исходный массив  [21, 30, 3, 49, 33, 10, 11, 29, 44, 19, 14]
Медианное значение  21
Медиана Гномьей сортировкой 21
Проверка  21
Исходный массив  [14, 3, 26, 46, 26, 26, 29, 20, 47, 9, 24]
Медианное значение  None
Медиана Гномьей сортировкой 26
Проверка  26
Исходный массив  [31, 9, 47, 35, 13, 27, 16, 35, 11, 37, 11]
Медианное значение  27
Медиана Гномьей сортировкой 27
Проверка  27
Исходный массив  [44, 22, 49, 8, 33, 44, 20, 17, 46, 34, 14]
Медианное значение  33
Медиана Гномьей сортировкой 33
Проверка  33
Исходный массив  [46, 47, 25, 20, 18, 3, 10, 23, 9, 13, 37]
Медианное значение  20
Медиана Гномьей сортировкой 20
Проверка  20

Массив с частыми повторами 

Исходный массив  [4, 1, 2, 2, 3, 2, 1, 1, 5, 4, 3]
Медианное значение  2
Медиана Гномьей сортировкой 2
Проверка  2
Исходный массив  [1, 1, 2, 1, 0, 0, 5, 1, 3, 3, 1]
Медианное значение  None
Медиана Гномьей сортировкой 1
Проверка  1
Исходный массив  [4, 5, 4, 4, 2, 2, 4, 3, 5, 5, 1]
Медианное значение  None
Медиана Гномьей сортировкой 4
Проверка  4
Исходный массив  [3, 1, 0, 5, 2, 1, 2, 3, 0, 1, 0]
Медианное значение  1
Медиана Гномьей сортировкой 1
Проверка  1
Исходный массив  [2, 0, 3, 1, 4, 4, 4, 2, 2, 3, 3]
Медианное значение  None
Медиана Гномьей сортировкой 3
Проверка  3
Исходный массив  [1, 2, 1, 3, 0, 2, 1, 3, 3, 2, 0]
Медианное значение  None
Медиана Гномьей сортировкой 2
Проверка  2
Исходный массив  [1, 5, 1, 3, 5, 5, 2, 0, 5, 0, 4]
Медианное значение  3
Медиана Гномьей сортировкой 3
Проверка  3
Исходный массив  [1, 3, 1, 4, 3, 0, 1, 0, 5, 3, 0]
Медианное значение  1
Медиана Гномьей сортировкой 1
Проверка  1
Исходный массив  [1, 0, 2, 0, 1, 0, 0, 4, 2, 2, 3]
Медианное значение  1
Медиана Гномьей сортировкой 1
Проверка  1
Исходный массив  [5, 4, 4, 2, 0, 0, 1, 4, 1, 5, 3]
Медианное значение  3
Медиана Гномьей сортировкой 3
Проверка  3
"""
