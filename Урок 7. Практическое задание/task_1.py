"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы. Сортировка должна быть реализована в
виде функции. Обязательно доработайте алгоритм (сделайте его умнее).

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию
"""
import timeit
import random


def bubble_sort(lst_obj):
    n = 1
    while n < len(lst_obj):
        check = 0
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
                check += 1
        n += 1
        if check == 0:
            return lst_obj
    return lst_obj


orig_list = [random.randint(-100, 100) for _ in range(1000)]
print(orig_list)
print(bubble_sort(orig_list))

print(timeit.timeit('bubble_sort(orig_list[:])', setup='from __main__ import bubble_sort, orig_list', number=1))
"""
Время работы алгоритма 0.031027800000000008 до оптимизации
Время работы алгоритма 0.00012280000000000624 после оптимизации
Время после оптимизации всегда разное, алгоритм редко работает быстрее. 
Т.к. мы используем каждый раз случайный список, мало эффективности от выполненой доработки.
"""