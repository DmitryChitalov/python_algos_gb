"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы. Сортировка должна быть реализована в
виде функции. Обязательно доработайте алгоритм (сделайте его умнее).

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию
"""
from random import randint
from timeit import timeit

source_list = [randint(-100, 100) for elment in range(1, 100)]
print("Исхлдный масив\n", source_list)


def bubbel_sort_revers(list):
    for step in range(1, len(list)):
        for index in range(0, len(list) - step):
            if list[index] < list[index + 1]:
                list[index], list[index + 1] = list[index + 1], list[index]
    return list


def bubbel_sort_revers_M(list):
    for step in range(1, len(list)):
        check_iter = False
        for index in range(0, len(list) - step):
            if list[index] < list[index + 1]:
                list[index], list[index + 1] = list[index + 1], list[index]
                check_iter = True
        if check_iter == False:
            return list
    return list


print(f"Сортировка пузырьком по убыванию\nПростой алгорит\n{bubbel_sort_revers(source_list)}\nВремя выполнения :")
print(timeit("bubbel_sort_revers(source_list)", "from __main__ import bubbel_sort_revers, source_list ", number=1000))
print(f"\nСортировка пузырьком по убыванию\nПростой алгорит\n{bubbel_sort_revers_M(source_list)}\nВремя выполнения :")
print(timeit("bubbel_sort_revers_M(source_list)", "from __main__ import bubbel_sort_revers_M, source_list ", number=1000))

"""
сравнив время выполнения простого и модеринизированного алгоритмов
Исхлдный масив
 [88, 23, -68, 55, -26, 68, -51, 46, 61, 61, 75, -20, 44, -94, -51, 67, 4, 44, 1, 96, 82, -86, 7, 29, 46, -35, -91, -13, -30, -92, 61, -34, 15, -82, -9, 17, 1, 73, 89, -93, -31, -94, 82, -43, -18, 84, -7, -39, 97, 25, 27, 68, -85, 66, 35, 88, -33, -66, -32, 2, -38, 37, 19, 25, -28, 72, -96, -29, -42, -15, -29, 93, 8, 53, -80, -58, -71, 29, -65, -80, -10, 58, -73, 73, -98, -68, -78, -88, -16, 85, 34, -20, 69, -70, -15, 15, 33, -58, 30]
Сортировка пузырьком по убыванию
Простой алгорит
[97, 96, 93, 89, 88, 88, 85, 84, 82, 82, 75, 73, 73, 72, 69, 68, 68, 67, 66, 61, 61, 61, 58, 55, 53, 46, 46, 44, 44, 37, 35, 34, 33, 30, 29, 29, 27, 25, 25, 23, 19, 17, 15, 15, 8, 7, 4, 2, 1, 1, -7, -9, -10, -13, -15, -15, -16, -18, -20, -20, -26, -28, -29, -29, -30, -31, -32, -33, -34, -35, -38, -39, -42, -43, -51, -51, -58, -58, -65, -66, -68, -68, -70, -71, -73, -78, -80, -80, -82, -85, -86, -88, -91, -92, -93, -94, -94, -96, -98]
Время выполнения :
0.42770364900025015

Сортировка пузырьком по убыванию
Простой алгорит
[97, 96, 93, 89, 88, 88, 85, 84, 82, 82, 75, 73, 73, 72, 69, 68, 68, 67, 66, 61, 61, 61, 58, 55, 53, 46, 46, 44, 44, 37, 35, 34, 33, 30, 29, 29, 27, 25, 25, 23, 19, 17, 15, 15, 8, 7, 4, 2, 1, 1, -7, -9, -10, -13, -15, -15, -16, -18, -20, -20, -26, -28, -29, -29, -30, -31, -32, -33, -34, -35, -38, -39, -42, -43, -51, -51, -58, -58, -65, -66, -68, -68, -70, -71, -73, -78, -80, -80, -82, -85, -86, -88, -91, -92, -93, -94, -94, -96, -98]
Время выполнения :
0.007790894000208937

видно что модернизированный алгоритм с проверкой на присутствие перестановки в проходе по массиву выполняется намного быстрее. не проходя по массиву лишнии шаги
"""