"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы. Сортировка должна быть реализована в
виде функции. Обязательно доработайте алгоритм (сделайте его умнее).

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию
"""
from random import randint
from timeit import timeit


def bubble(raw_arr):
    length = len(raw_arr)
    for j in range(length):
        for i in range(length-j-1):
            if raw_arr[i] < raw_arr[i+1]:
                raw_arr[i], raw_arr[i+1] = raw_arr[i+1], raw_arr[i]
    return raw_arr


def bubble_ench(raw_arr, j=0, unchanged=False):
    length = len(raw_arr)
    while not unchanged and j < length:
        unchanged = True
        for i in range(length-j-1):
            if raw_arr[i] < raw_arr[i+1]:
                raw_arr[i], raw_arr[i+1] = raw_arr[i+1], raw_arr[i]
                unchanged = False
        j += 1
    return raw_arr


raw_arr = [randint(-100, 100) for i in range(100)]
print(f'Base array - {raw_arr}')
print(f'bubble_ench result:\n{bubble_ench(raw_arr[:])}')
print(timeit('bubble_ench(raw_arr[:])', 'from __main__ import bubble_ench, raw_arr', number=10000))
print(f'bubble result:\n{bubble_ench(raw_arr[:])}')
print(timeit('bubble(raw_arr[:])', 'from __main__ import bubble, raw_arr', number=10000))

"""
Base array - [-13, 17, -54, -82, -95, 91, -16, 2, 70, 66, -1, 61, -14, 0, -98, -42, -57, 81, 84, 24, 82, -11, -9, -59, 
68, -5, 34, 68, 69, -27, -35, -71, 33, -17, -66, -77, -18, -8, -14, 80, -39, -56, 39, -5, 18, -63, 56, -84, -8, -22, -8,
 89, 39, 47, 44, 54, -51, 28, 59, -65, -32, 55, -81, 4, 88, 2, -23, -37, -62, -5, -78, -17, 62, 34, 30, -3, 21, -74,
 -24, -54, -15, -94, 91, -95, -24, -35, -20, 17, -78, -5, 88, -19, -59, 1, -79, -72, 22, -86, 52, -68]
bubble_ench result:
[91, 91, 89, 88, 88, 84, 82, 81, 80, 70, 69, 68, 68, 66, 62, 61, 59, 56, 55, 54, 52, 47, 44, 39, 39, 34, 34, 33, 30, 28,
 24, 22, 21, 18, 17, 17, 4, 2, 2, 1, 0, -1, -3, -5, -5, -5, -5, -8, -8, -8, -9, -11, -13, -14, -14, -15, -16, -17, -17,
-18, -19, -20, -22, -23, -24, -24, -27, -32, -35, -35, -37, -39, -42, -51, -54, -54, -56, -57, -59, -59, -62, -63, 
-65, -66, -68, -71, -72, -74, -77, -78, -78, -79, -81, -82, -84, -86, -94, -95, -95, -98]
6.5190513999999995
bubble result:
[91, 91, 89, 88, 88, 84, 82, 81, 80, 70, 69, 68, 68, 66, 62, 61, 59, 56, 55, 54, 52, 47, 44, 39, 39, 34, 34, 33, 30, 28,
 24, 22, 21, 18, 17, 17, 4, 2, 2, 1, 0, -1, -3, -5, -5, -5, -5, -8, -8, -8, -9, -11, -13, -14, -14, -15, -16, -17, -17,
-18, -19, -20, -22, -23, -24, -24, -27, -32, -35, -35, -37, -39, -42, -51, -54, -54, -56, -57, -59, -59, -62, -63,
-65, -66, -68, -71, -72, -74, -77, -78, -78, -79, -81, -82, -84, -86, -94, -95, -95, -98]
8.034089900000001

Исходя из привденных выше замеров "улучшенный" алгоритм пузырька работает быстрее, сложность остается O(n^2). Однако
в лучшем случае - например частично отсортированный массив на входе функция покажет значительно лучший результат, так 
как количество проходов по внутреннему циклу сократится. В базовом же варианте время будет сопоставимо. 
"""