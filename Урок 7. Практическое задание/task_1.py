"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы. Сортировка должна быть реализована в
виде функции. Обязательно доработайте алгоритм (сделайте его умнее).

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию
"""
from random import randint
from timeit import timeit
from sys import version


def bubble_sort(lst_obj):
    n = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
        n += 1
    return lst_obj


def my_sort_bubble(lst):
    k = 1
    while k < len(lst):
        sort_finished = 1
        for i in range(len(lst)-k):
            if lst[i] < lst[i+1]:
                lst[i], lst[i+1] = lst[i+1], lst[i]
                sort_finished = 0
        k += 1
        if sort_finished:
            break
    return lst


if __name__ == '__main__':
    print(version)
    my_lst_10 = [randint(-100, 100) for _ in range(10)]
    my_lst_100 = [randint(-100, 100) for _ in range(100)]
    my_lst_1000 = [randint(-100, 100) for _ in range(1000)]
    print(my_lst_10, my_sort_bubble(my_lst_10[:]), sep='\n')
    print(f"my sort {timeit('my_sort_bubble(my_lst_10[:])', 'from __main__ import my_sort_bubble, my_lst_10', number=100)}")
    print(f"standard {timeit('bubble_sort(my_lst_10[:])', 'from __main__ import bubble_sort, my_lst_10', number=100)}")
    print(my_lst_100, my_sort_bubble(my_lst_100[:]), sep='\n')
    print(f"my sort {timeit('my_sort_bubble(my_lst_100[:])', 'from __main__ import my_sort_bubble, my_lst_100', number=100)}")
    print(f"standard {timeit('bubble_sort(my_lst_100[:])', 'from __main__ import bubble_sort, my_lst_100', number=100)}")
    print(my_lst_1000, my_sort_bubble(my_lst_1000[:]), sep='\n')
    print(f"my sort {timeit('my_sort_bubble(my_lst_1000[:])', 'from __main__ import my_sort_bubble, my_lst_1000', number=100)}")
    print(f"standard {timeit('bubble_sort(my_lst_1000[:])', 'from __main__ import bubble_sort, my_lst_1000', number=100)}")

"""
3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:57:54) [MSC v.1924 64 bit (AMD64)]
[80, -41, -46, -42, -42, -2, 78, -42, 29, 66]
[80, 78, 66, 29, -2, -41, -42, -42, -42, -46]
my sort 0.0011631999999999962
standard 0.0015428999999999998
[50, 11, -77, -25, -50, 29, -64, -41, -29, -28, 36, 14, 40, -27, -83, -92, -69, 33, 3, -33, 28, -94, -23, -31, 60, -65, -41, -63, -41, -14, -30, -15, -12, -94, 36, 81, 70, -38, -67, -17, 84, 34, 17, -68, 53, -99, 79, 4, 17, -51, 48, 10, -6, 15, -63, -78, 15, 71, 25, -95, -4, -74, -91, 16, 8, -51, 87, 5, 42, -76, 72, -39, -76, -60, 48, -85, -83, 35, 61, 49, 68, 34, 70, -92, 15, -59, 72, 35, 4, -61, 0, 77, 88, -37, -62, 42, -87, -98, 55, -84]
[88, 87, 84, 81, 79, 77, 72, 72, 71, 70, 70, 68, 61, 60, 55, 53, 50, 49, 48, 48, 42, 42, 40, 36, 36, 35, 35, 34, 34, 33, 29, 28, 25, 17, 17, 16, 15, 15, 15, 14, 11, 10, 8, 5, 4, 4, 3, 0, -4, -6, -12, -14, -15, -17, -23, -25, -27, -28, -29, -30, -31, -33, -37, -38, -39, -41, -41, -41, -50, -51, -51, -59, -60, -61, -62, -63, -63, -64, -65, -67, -68, -69, -74, -76, -76, -77, -78, -83, -83, -84, -85, -87, -91, -92, -92, -94, -94, -95, -98, -99]
my sort 0.0859214
standard 0.08478179999999999
[19, -13, 11, 19, 45, 50, -48, -74, -17, 76, 54, 79, -91, 2, -31, -8, -94, -99, -52, -60, 67, 20, 52, -74, 65, 19, -50, 57, 74, -56, 77, -13, 48, -70, 30, 76, -75, -86, 17, -40, 30, 84, 51, -98, 30, -31, 96, -8, 33, 88, 7, 73, 92, 25, -23, -80, 18, -4, 56, -1, -48, 17, -29, 87, -59, -53, -72, 57, 100, 77, 58, -79, 83, 34, 100, -97, 91, 22, -86, -13, -95, 56, 51, 55, 45, 17, -93, -71, 72, 12, 1, -2, 50, 49, -64, -45, -86, -78, -57, 14, 35, -81, 55, -73, -65, -80, 4, 34, -46, -60, 38, 26, 97, 100, -88, -15, 65, 56, 72, -50, -33, 3, -28, -41, -59, -72, -81, -50, 18, 54, -67, -2, -89, -49, 36, 74, 89, -87, -56, -36, -85, -78, 75, 94, 74, -72, -15, 76, 47, -80, 23, 84, -61, 33, -67, -5, -83, 13, -69, 84, 71, 35, -27, 24, -48, 67, 86, 34, 48, -9, 15, -75, -36, 58, 35, -95, -12, -61, -37, 83, 0, -7, 9, -17, 57, -51, 92, -5, -3, 59, 12, 15, -26, -90, -100, -83, -87, 10, 75, 51, -56, 51, 20, -71, 10, 35, -86, -85, 43, 49, -8, -3, 34, -27, -13, 96, 85, 62, 24, 46, -40, 78, 91, -98, 99, -24, 58, -16, 74, 55, -67, 99, 18, -44, 35, 35, 77, -61, 92, 41, 94, 46, -83, -81, 21, -80, -83, 4, 55, -70, 7, 24, -29, -80, -38, 96, -65, 39, -68, 12, 72, -7, 81, -77, 91, 25, -91, 31, 63, -69, -34, -84, 91, 47, -53, -96, 41, -5, -29, 71, 99, -13, -20, -84, -3, -93, 49, -39, -34, -74, 85, -55, -73, 54, 67, 9, 70, -29, 33, 45, 19, -7, 5, 30, 88, -54, -35, 66, -4, 34, -87, -77, 13, -19, 69, -1, 8, 92, -92, -24, 13, -71, -29, -71, -5, -48, -19, -31, -60, -8, -1, -64, 40, -18, 34, 43, 19, 52, 97, -69, 95, -59, 75, -61, 16, 79, -57, 42, 16, -67, -23, -94, -21, -90, -36, 22, 84, -17, 50, -69, 41, 30, 10, 58, -23, -42, -66, 83, 98, 58, 14, -84, -29, 76, 31, -23, 3, -61, -90, -92, -5, -69, -83, -95, 93, 73, -27, 33, -54, -51, 51, -9, 33, -49, 27, 32, 24, 42, -15, 34, -8, -14, -44, 15, 1, 4, 23, -82, 67, 84, -56, -44, 90, -93, -25, 12, 60, -29, 30, -64, 94, -87, 8, 69, 89, -87, -43, -91, -78, 71, -83, -30, -41, -68, -28, -75, -68, 19, -23, -85, 9, -36, 67, 33, 25, 96, 30, -42, 45, -3, -29, -74, -7, -58, 8, -94, -7, 46, 63, 77, -49, 91, -49, -20, -97, -71, 62, 21, -16, -54, -50, 10, 88, 32, 16, 89, -33, 61, 73, -17, -35, -1, -98, -72, -23, 51, 97, -11, -48, -70, 87, -52, 24, 28, 56, -55, 82, 78, -76, 53, 53, 0, 96, 86, -13, -10, -53, -68, 21, 60, -53, -93, 51, 40, -12, -82, -62, 99, 56, 6, 39, -18, 16, 35, 34, -36, -54, 16, -96, -21, -32, -26, 92, -82, -86, -19, 32, 60, -47, -36, 2, 18, -85, 55, -68, -89, 37, 25, -44, 92, -56, 38, -99, 0, 65, 66, -8, -40, -9, 65, 19, -55, -19, 90, -68, -40, -27, -80, 80, 100, 73, 100, 97, -3, 69, -46, -100, 4, -13, 10, 12, -65, -33, 37, -75, -17, 81, -62, -79, 82, -25, 59, 14, 28, 53, 50, -68, 97, 10, 38, -92, 61, 22, -93, 60, 50, 91, -9, -89, 44, -40, 78, 67, 0, -28, -25, -37, -10, 8, 91, 22, 39, 14, 12, -23, 83, 22, -36, 66, 34, -94, 75, -6, -20, -86, -46, -74, -50, 85, 9, -88, 31, -34, -16, -86, 97, 24, 31, -13, -26, -26, -77, 91, -95, 95, 51, 50, -72, 10, -58, 24, 52, -8, 51, -92, -48, 63, 81, -19, 28, -1, -38, 17, 41, -58, -45, 58, 21, -49, 10, 61, -69, -75, 72, -45, -35, 26, -56, -53, 82, 9, -47, -56, 99, 41, -84, -50, -46, 70, -68, -14, 55, 71, -25, 90, -55, -57, -83, -78, -16, 31, 65, 73, 37, -14, 74, -59, 81, -65, -83, 21, 82, 47, -14, 33, 32, 50, 9, 65, 75, -20, 35, -68, -64, -85, -77, 0, -10, 71, -18, -56, -78, -44, 84, 37, -69, 41, -38, -43, 84, -68, 94, -54, 56, -48, -82, 94, -88, -82, -1, -34, -77, -43, -67, -81, -85, 35, -72, -60, 92, -4, -82, 23, -58, -67, -48, -49, -44, -41, 67, 42, -64, 97, 57, -95, 17, 67, 92, -72, 93, -86, 0, 89, 14, 7, 17, -77, 39, -92, 41, 52, -23, -98, -15, 68, 34, 52, -40, -86, 86, -7, 42, -67, 78, -44, -86, 56, -8, 81, -49, -89, 94, -10, -37, 52, -82, 37, 67, 52, 48, -48, 58, 73, 57, 83, 80, -39, -70, 50, -52, -24, -93, 28, -48, -1, -70, 46, -45, 65, -84, -80, -74, 38, -59, -20, -16, 23, 45, -75, -41, -42, -77, -54, -23, 31, 88, -49, 25, 9, -59, 25, 23, 79, 39, -18, -25, -2, 24, 68, -1, -48, 35, 99, 14, 38, 87, -44, -95, -26, -48, 89, 68, 78, -20, 34, -39, 79, 69, 58, -85, -16, -73, -5, 87, -5, 77, 69, 57, -5, 22, -17, -64, 9, 5, 13, -40, -57, -52, -91, 73, -4, 81, 70, -54, 53, 86, -15, -22, -77, 10, -56, 93, 23, -49, -1, 6, 73, 30, 39, -92, 24, -66, -32, -59, 22, -11, 33, 26, -58, 57, 5, 98, 49, -46, -72, -11, 73, -30, 56, -96, -29, 80, 3, 80, -38, 40, 100, 27, -82, 76, -20, -83, 74, 54, 8, 17, -30, -92, 27, -4, 8, 77, 57, -96, -62, -93, 42, 58, 77, -86, 78, -86, -55, -78, -31, 83, -46, -27, -93, 53]
[100, 100, 100, 100, 100, 100, 99, 99, 99, 99, 99, 99, 98, 98, 97, 97, 97, 97, 97, 97, 97, 96, 96, 96, 96, 96, 95, 95, 94, 94, 94, 94, 94, 94, 93, 93, 93, 92, 92, 92, 92, 92, 92, 92, 92, 91, 91, 91, 91, 91, 91, 91, 91, 90, 90, 90, 89, 89, 89, 89, 89, 88, 88, 88, 88, 87, 87, 87, 87, 86, 86, 86, 86, 85, 85, 85, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 83, 83, 83, 82, 82, 82, 82, 81, 81, 81, 81, 81, 81, 80, 80, 80, 80, 79, 79, 79, 79, 78, 78, 78, 78, 78, 78, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 76, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 73, 73, 73, 73, 73, 73, 73, 73, 73, 72, 72, 72, 72, 71, 71, 71, 71, 71, 70, 70, 70, 69, 69, 69, 69, 69, 68, 68, 68, 67, 67, 67, 67, 67, 67, 67, 67, 67, 66, 66, 66, 65, 65, 65, 65, 65, 65, 65, 63, 63, 63, 62, 62, 61, 61, 61, 60, 60, 60, 60, 59, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 57, 57, 57, 57, 57, 57, 57, 57, 56, 56, 56, 56, 56, 56, 56, 56, 55, 55, 55, 55, 55, 55, 54, 54, 54, 54, 53, 53, 53, 53, 53, 52, 52, 52, 52, 52, 52, 52, 51, 51, 51, 51, 51, 51, 51, 51, 51, 50, 50, 50, 50, 50, 50, 50, 50, 49, 49, 49, 49, 48, 48, 48, 47, 47, 47, 46, 46, 46, 46, 45, 45, 45, 45, 45, 44, 43, 43, 42, 42, 42, 42, 42, 41, 41, 41, 41, 41, 41, 41, 40, 40, 40, 39, 39, 39, 39, 39, 39, 38, 38, 38, 38, 38, 37, 37, 37, 37, 37, 36, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 33, 33, 33, 33, 33, 33, 33, 33, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30, 30, 28, 28, 28, 28, 27, 27, 27, 26, 26, 26, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 23, 23, 23, 23, 22, 22, 22, 22, 22, 22, 22, 21, 21, 21, 21, 21, 20, 20, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 16, 16, 16, 16, 16, 15, 15, 15, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 7, 7, 7, 6, 6, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -3, -3, -3, -3, -3, -4, -4, -4, -4, -4, -5, -5, -5, -5, -5, -5, -5, -5, -6, -7, -7, -7, -7, -7, -7, -8, -8, -8, -8, -8, -8, -8, -8, -9, -9, -9, -9, -10, -10, -10, -10, -11, -11, -11, -12, -12, -13, -13, -13, -13, -13, -13, -13, -13, -14, -14, -14, -14, -15, -15, -15, -15, -15, -16, -16, -16, -16, -16, -16, -17, -17, -17, -17, -17, -17, -18, -18, -18, -18, -19, -19, -19, -19, -19, -20, -20, -20, -20, -20, -20, -20, -21, -21, -22, -23, -23, -23, -23, -23, -23, -23, -23, -23, -24, -24, -24, -25, -25, -25, -25, -25, -26, -26, -26, -26, -26, -27, -27, -27, -27, -27, -28, -28, -28, -29, -29, -29, -29, -29, -29, -29, -29, -29, -30, -30, -30, -31, -31, -31, -31, -32, -32, -33, -33, -33, -34, -34, -34, -34, -35, -35, -35, -36, -36, -36, -36, -36, -36, -36, -37, -37, -37, -38, -38, -38, -38, -39, -39, -39, -40, -40, -40, -40, -40, -40, -40, -41, -41, -41, -41, -42, -42, -42, -43, -43, -43, -44, -44, -44, -44, -44, -44, -44, -44, -45, -45, -45, -45, -46, -46, -46, -46, -46, -46, -47, -47, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -49, -49, -49, -49, -49, -49, -49, -49, -49, -50, -50, -50, -50, -50, -50, -51, -51, -52, -52, -52, -52, -53, -53, -53, -53, -53, -54, -54, -54, -54, -54, -54, -54, -55, -55, -55, -55, -55, -56, -56, -56, -56, -56, -56, -56, -56, -56, -57, -57, -57, -57, -58, -58, -58, -58, -58, -59, -59, -59, -59, -59, -59, -59, -60, -60, -60, -60, -61, -61, -61, -61, -61, -62, -62, -62, -64, -64, -64, -64, -64, -64, -65, -65, -65, -65, -66, -66, -67, -67, -67, -67, -67, -67, -67, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -69, -69, -69, -69, -69, -69, -69, -70, -70, -70, -70, -70, -71, -71, -71, -71, -71, -72, -72, -72, -72, -72, -72, -72, -72, -73, -73, -73, -74, -74, -74, -74, -74, -74, -75, -75, -75, -75, -75, -75, -76, -77, -77, -77, -77, -77, -77, -77, -77, -78, -78, -78, -78, -78, -78, -79, -79, -80, -80, -80, -80, -80, -80, -80, -81, -81, -81, -81, -82, -82, -82, -82, -82, -82, -82, -82, -83, -83, -83, -83, -83, -83, -83, -83, -83, -84, -84, -84, -84, -84, -85, -85, -85, -85, -85, -85, -85, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -87, -87, -87, -87, -87, -88, -88, -88, -89, -89, -89, -89, -90, -90, -90, -91, -91, -91, -91, -92, -92, -92, -92, -92, -92, -92, -93, -93, -93, -93, -93, -93, -93, -93, -94, -94, -94, -94, -95, -95, -95, -95, -95, -95, -96, -96, -96, -96, -97, -97, -98, -98, -98, -98, -99, -99, -100, -100]
my sort 9.2307233
standard 9.030331700000001

Process finished with exit code 0

Добавление проверки на окончание сортировки не дало сколько-нибудь существенного ускорения, наоборот на больших массивах
есть замедление работы.
Видимо, возникает из-за дополнительных проверок, а количество случаев, когда эта проверка срабатывает - ничтожно.
Данный способ не подходит для ускорения работы алгоритма сортировки пузырьком. 
"""