"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в
виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""

import timeit
import random


def bubble_sort(lst_obj):
    n = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj)-n):
            if lst_obj[i] > lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
        n += 1
    return lst_obj


def reverse_bubble_sort(lst_obj):
    n = 1
    while n < len(lst_obj):
        changed = False
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
                changed = True
        if not changed:
            print('Выход на проходе №', n)
            break
        n += 1
    return lst_obj


orig_list = [random.randint(-100, 100) for _ in range(30)]
print(orig_list)
print(bubble_sort(orig_list[:]))
print(reverse_bubble_sort(orig_list[:]))

orig_list = [random.randint(-100, 100) for _ in range(500)]
# замеры 500
print(timeit.timeit("bubble_sort(orig_list[:])", globals=globals(), number=1000))
orig_list = [random.randint(-100, 100) for _ in range(500)]
print(timeit.timeit("reverse_bubble_sort(orig_list[:])", globals=globals(), number=1000))

"""
Результаты:
[25, -99, -18, -27, 7, -52, 66, 82, -82, 66, 18, -23, 89, -54, 30, -48, -77, -64, 76, 25, -47, 94, 62, 93, -57, -11, 65, 92, 64, -28]
[-99, -82, -77, -64, -57, -54, -52, -48, -47, -28, -27, -23, -18, -11, 7, 18, 25, 25, 30, 62, 64, 65, 66, 66, 76, 82, 89, 92, 93, 94]
Выход на проходе № 24
[94, 93, 92, 89, 82, 76, 66, 66, 65, 64, 62, 30, 25, 25, 18, 7, -11, -18, -23, -27, -28, -47, -48, -52, -54, -57, -64, -77, -82, -99]


Время замеры 500:
12.685240471968427
12.59995676705148

12.454412160965148
12.845127028995194

На разных запусках выход из цикла происходит на 20-28 проходе из 30(выполнил 5 запусков)
на время выполнения досрочный выход не влияет, это всвязано с расходами на выполнение сравнения 
"""