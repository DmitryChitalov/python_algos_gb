"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы. Сортировка должна быть реализована в
виде функции. Обязательно доработайте алгоритм (сделайте его умнее).

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию
"""

from random import randint
from timeit import timeit

random_list = [randint(-100, 100) for _ in range(100)]


def bubble_sort(in_list: list, is_reversed=False):
    n = 1
    while n < len(in_list):
        for i in range(len(in_list) - n):
            if in_list[i] > in_list[i + 1]:
                in_list[i], in_list[i + 1] = in_list[i + 1], in_list[i]
        n += 1
    if is_reversed:
        return in_list[::-1]
    else:
        return in_list


def bubble_sort_advanced(in_list: list, is_reversed=False):
    n = 1
    while n < len(in_list):
        is_sorted = False
        for i in range(len(in_list) - n):
            if is_reversed:
                if in_list[i + 1] > in_list[i]:
                    is_sorted = True
                    in_list[i], in_list[i + 1] = in_list[i + 1], in_list[i]
            else:
                if in_list[i] > in_list[i + 1]:
                    is_sorted = True
                    in_list[i], in_list[i + 1] = in_list[i + 1], in_list[i]
        if not is_sorted:
            break
        n += 1
    return in_list


if __name__ == '__main__':
    print('Обычная сортировка пузырьком')
    print(f'Исходный массив: {random_list}\nОтсортированный массив: {bubble_sort(random_list, True)}')
    print(timeit("bubble_sort(random_list[:], True)",
                 setup="from __main__ import bubble_sort, random_list", number=1000))
    print("\nУлучшенный вариант")
    print(f'Исходный массив: {random_list}\nОтсортированный массив: {bubble_sort_advanced(random_list, True)}')
    print(timeit("bubble_sort_advanced(random_list[:], True)",
                 setup="from __main__ import bubble_sort_advanced, random_list", number=1000))

"""
Обычная сортировка пузырьком
Исходный массив: [91, -1, -78, 73, -91, 38, 12, 15, 66, 24, 70, 25, -13, 100, -45, 89, 52, 86, -3, -82, -3, 16, 30, -3, 87, 72, -62, 9, 49, 5, -80, 15, 51, 68, -41, -60, -51, -17, 7, -96, 42, 35, -80, 97, -84, -94, 78, 35, -93, -82, 32, 41, 85, 0, -96, -68, -85, 16, -40, -41, -72, -59, -50, 52, 22, 99, -24, -86, 7, 94, -73, 52, 86, 64, -33, -4, 2, 83, -47, 89, -15, 20, 37, -4, 72, -46, 43, 21, -97, -55, 44, -67, 41, -9, -79, -78, 84, 52, 96, 7]
Отсортированный массив: [100, 99, 97, 96, 94, 91, 89, 89, 87, 86, 86, 85, 84, 83, 78, 73, 72, 72, 70, 68, 66, 64, 52, 52, 52, 52, 51, 49, 44, 43, 42, 41, 41, 38, 37, 35, 35, 32, 30, 25, 24, 22, 21, 20, 16, 16, 15, 15, 12, 9, 7, 7, 7, 5, 2, 0, -1, -3, -3, -3, -4, -4, -9, -13, -15, -17, -24, -33, -40, -41, -41, -45, -46, -47, -50, -51, -55, -59, -60, -62, -67, -68, -72, -73, -78, -78, -79, -80, -80, -82, -82, -84, -85, -86, -91, -93, -94, -96, -96, -97]
0.5880126

Улучшенный вариант
Исходный массив: [-97, -96, -96, -94, -93, -91, -86, -85, -84, -82, -82, -80, -80, -79, -78, -78, -73, -72, -68, -67, -62, -60, -59, -55, -51, -50, -47, -46, -45, -41, -41, -40, -33, -24, -17, -15, -13, -9, -4, -4, -3, -3, -3, -1, 0, 2, 5, 7, 7, 7, 9, 12, 15, 15, 16, 16, 20, 21, 22, 24, 25, 30, 32, 35, 35, 37, 38, 41, 41, 42, 43, 44, 49, 51, 52, 52, 52, 52, 64, 66, 68, 70, 72, 72, 73, 78, 83, 84, 85, 86, 86, 87, 89, 89, 91, 94, 96, 97, 99, 100]
Отсортированный массив: [100, 99, 97, 96, 94, 91, 89, 89, 87, 86, 86, 85, 84, 83, 78, 73, 72, 72, 70, 68, 66, 64, 52, 52, 52, 52, 51, 49, 44, 43, 42, 41, 41, 38, 37, 35, 35, 32, 30, 25, 24, 22, 21, 20, 16, 16, 15, 15, 12, 9, 7, 7, 7, 5, 2, 0, -1, -3, -3, -3, -4, -4, -9, -13, -15, -17, -24, -33, -40, -41, -41, -45, -46, -47, -50, -51, -55, -59, -60, -62, -67, -68, -72, -73, -78, -78, -79, -80, -80, -82, -82, -84, -85, -86, -91, -93, -94, -96, -96, -97]
0.022247400000000028

Вывод: добавление незначительной казалось бы детали в виде флага внутрь функции дает значительный прирост в 
производительности, что достаточно логично, ведь если все элементы отсортированы как надо - зачем проходиться по каждому
из них снова?
"""