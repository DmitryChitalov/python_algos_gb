"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в
виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""

from random import randint
import timeit
def bubble_sort(nums):
    n = 1
    isSorted = False
    while n < len(nums):
        for i in range(len(nums)-n):
            if nums[i] > nums[i+1]:
                nums[i], nums[i+1] = nums[i+1], nums[i]
                isSorted = True
        n += 1
        if isSorted == True:
            break
    else:
        return nums

a = list()

a = [randint(-100, 100) for x in range(10)]
# 10
print(
    timeit.timeit(
        "bubble_sort(a)",
        globals=globals(),
        number=1000))

a = [randint(-100, 100) for x in range(100)]

# 100
print(
    timeit.timeit(
        "bubble_sort(a)",
        globals=globals(),
        number=1000))

a = [randint(-100, 100) for x in range(1000)]

# 1000
print(
    timeit.timeit(
        "bubble_sort(a)",
        globals=globals(),
        number=1000))

"""
До изменений

0.009131200000000006
0.7685486
106.773521

После изменений

0.0106828
0.5203924
1.9511878999999999

Вывод: Доработка помогает при больших массивах данных. При небольших можно использовать скрипт без доработки.
"""
