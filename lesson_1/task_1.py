"""
Задание 1.

Для каждой из трех задач выполнить следующее:

1) для каждой инструкции рядом в комментарии определите сложность этой инструкции
2) определите сложность алгоритма в целом

укажите сложность непосредственно в этом файле
точки, где нужно поработать вам, отмечены знаком '!!!'

Примечание:
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""

import random
import time


#############################################################################################
def check_1(lst_obj):
    """Функция должна создать множество из списка.

    Алгоритм 3:
    Создать множество из списка

    Сложность: !!!. Сложность алгоритма в целом = O(N) (самая дорогая операция - вставка в новый массив)
    """
    lst_to_set = set(lst_obj)  # O(N)

    return lst_to_set          # O(1)


#############################################################################################
def check_2(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 1:
    Проходимся по списку и для каждого элемента проверяем,
    что такой элемент отстутствует
    в оставшихся справа элементах

    Сложность: !!! n^2
    """
    for j in range(len(lst_obj)):           # !!! длина O(1), первый цикл O(N)
        if lst_obj[j] in lst_obj[j + 1:]:   # !!! Проверить наличие элемента в множестве: O(N)
            return False                    # !!! O(1)
    return True                             # !!! O(1)


#############################################################################################
def check_3(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 2:
    Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
    Если присутствуют дубли, они будут находиться рядом.

    Сложность: !!! O(N log(N))
    """
    lst_copy = list(lst_obj)                # !!! O(N)
    lst_copy.sort()                         # !!! O(N log(N)) или O(N^2) в худшем случае. В python используется Timsort
    for i in range(len(lst_obj) - 1):       # !!! длина O(1), первый цикл O(N)
        if lst_copy[i] == lst_copy[i + 1]:  # !!! O(1)
            return False                    # !!! O(1)
    return True                             # !!! O(1)


#############################################################################################


for j in (50, 500, 1000, 5000, 1000, 10000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = random.sample(range(-10000000, 10000000), j)

end_val = time.time()

start_val = time.time()
print(check_2(lst))
end_val = time.time()
print(end_val - start_val)

start_val = time.time()
print(check_3(lst))
end_val = time.time()
print(end_val - start_val)
